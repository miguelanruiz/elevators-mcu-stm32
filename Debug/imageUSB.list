
imageUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b58  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08008c68  08008c68  00018c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f00  08008f00  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  08008f00  08008f00  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f00  08008f00  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f00  08008f00  00018f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08008f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e70  20000350  08009258  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  08009258  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156d1  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c9  00000000  00000000  00035a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd0  00000000  00000000  00038b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  00039ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000172b6  00000000  00000000  0003a940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e78c  00000000  00000000  00051bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074f75  00000000  00000000  00060382  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d52f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000d5374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c50 	.word	0x08008c50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	08008c50 	.word	0x08008c50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f001 f84d 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f893 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 f937 	bl	8000d08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a9a:	f000 f8e9 	bl	8000c70 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000a9e:	f005 fef7 	bl	8006890 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000aa2:	483e      	ldr	r0, [pc, #248]	; (8000b9c <main+0x114>)
 8000aa4:	f002 fee9 	bl	800387a <HAL_TIM_Base_Start_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for(int i = 0; i < SIZE_QUEUE; i++){
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e007      	b.n	8000abe <main+0x36>
	  queueFloor[i] = DEFAULT_BASE_FLOOR;
 8000aae:	4a3c      	ldr	r2, [pc, #240]	; (8000ba0 <main+0x118>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < SIZE_QUEUE; i++){
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2b09      	cmp	r3, #9
 8000ac2:	ddf4      	ble.n	8000aae <main+0x26>
  }
  for(int i = 0; i < SIZE_PAGE_ASCENSOR; i++){
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e007      	b.n	8000ada <main+0x52>
	  firstAscensorReport[i] = 0;
 8000aca:	4a36      	ldr	r2, [pc, #216]	; (8000ba4 <main+0x11c>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4413      	add	r3, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < SIZE_PAGE_ASCENSOR; i++){
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	ddf4      	ble.n	8000aca <main+0x42>
  }
  firstAscensorReport[0]='A';
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <main+0x11c>)
 8000ae2:	2241      	movs	r2, #65	; 0x41
 8000ae4:	701a      	strb	r2, [r3, #0]
  firstAscensorReport[1]='1';
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <main+0x11c>)
 8000ae8:	2231      	movs	r2, #49	; 0x31
 8000aea:	705a      	strb	r2, [r3, #1]
  firstAscensorReport[2]='S';
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <main+0x11c>)
 8000aee:	2253      	movs	r2, #83	; 0x53
 8000af0:	709a      	strb	r2, [r3, #2]
  firstAscensorReport[3]='0';
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <main+0x11c>)
 8000af4:	2230      	movs	r2, #48	; 0x30
 8000af6:	70da      	strb	r2, [r3, #3]
  firstAscensorReport[4]='B';
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <main+0x11c>)
 8000afa:	2242      	movs	r2, #66	; 0x42
 8000afc:	711a      	strb	r2, [r3, #4]
  firstAscensorReport[5]='0';
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <main+0x11c>)
 8000b00:	2230      	movs	r2, #48	; 0x30
 8000b02:	715a      	strb	r2, [r3, #5]

  for(int i = 0; i < SIZE_QUEUE; i++){
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	e007      	b.n	8000b1a <main+0x92>
  	  queueFloor_second[i] = DEFAULT_BASE_FLOOR;
 8000b0a:	4a27      	ldr	r2, [pc, #156]	; (8000ba8 <main+0x120>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < SIZE_QUEUE; i++){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3301      	adds	r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b09      	cmp	r3, #9
 8000b1e:	ddf4      	ble.n	8000b0a <main+0x82>
  }
  for(int i = 0; i < SIZE_PAGE_ASCENSOR; i++){
 8000b20:	2300      	movs	r3, #0
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	e007      	b.n	8000b36 <main+0xae>
	  secondAscensorReport[i] = 0;
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <main+0x124>)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < SIZE_PAGE_ASCENSOR; i++){
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	ddf4      	ble.n	8000b26 <main+0x9e>
  }
  secondAscensorReport[0]='A';
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <main+0x124>)
 8000b3e:	2241      	movs	r2, #65	; 0x41
 8000b40:	701a      	strb	r2, [r3, #0]
  secondAscensorReport[1]='2';
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <main+0x124>)
 8000b44:	2232      	movs	r2, #50	; 0x32
 8000b46:	705a      	strb	r2, [r3, #1]
  secondAscensorReport[2]='S';
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <main+0x124>)
 8000b4a:	2253      	movs	r2, #83	; 0x53
 8000b4c:	709a      	strb	r2, [r3, #2]
  secondAscensorReport[3]='0';
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <main+0x124>)
 8000b50:	2230      	movs	r2, #48	; 0x30
 8000b52:	70da      	strb	r2, [r3, #3]
  secondAscensorReport[4]='B';
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <main+0x124>)
 8000b56:	2242      	movs	r2, #66	; 0x42
 8000b58:	711a      	strb	r2, [r3, #4]
  secondAscensorReport[5]='0';
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <main+0x124>)
 8000b5c:	2230      	movs	r2, #48	; 0x30
 8000b5e:	715a      	strb	r2, [r3, #5]

  globalDoors[0] = '0';
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <main+0x128>)
 8000b62:	2230      	movs	r2, #48	; 0x30
 8000b64:	701a      	strb	r2, [r3, #0]
  globalDoors[1] = '0';
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <main+0x128>)
 8000b68:	2230      	movs	r2, #48	; 0x30
 8000b6a:	705a      	strb	r2, [r3, #1]

  lockedKeyboardButtons[0] = '0';
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <main+0x12c>)
 8000b6e:	2230      	movs	r2, #48	; 0x30
 8000b70:	701a      	strb	r2, [r3, #0]
  lockedKeyboardButtons[1] = '4';
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <main+0x12c>)
 8000b74:	2234      	movs	r2, #52	; 0x34
 8000b76:	705a      	strb	r2, [r3, #1]

  Timers[TPRINT] = 500;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <main+0x130>)
 8000b7a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  Timers[TDOORS_ONE] = 0;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <main+0x130>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  Timers[TDOORS_TWO] = 0;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <main+0x130>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
	  else{
		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin,GPIO_PIN_SET);
		  HAL_Delay(500);
	  }*/
	  //AscensorUnit();
	  AscensorUnit();
 8000b8c:	f000 facc 	bl	8001128 <AscensorUnit>
	  AscensorUnit_second();
 8000b90:	f000 fc64 	bl	800145c <AscensorUnit_second>
	  PrinterUnit();
 8000b94:	f000 fe32 	bl	80017fc <PrinterUnit>
	  AscensorUnit();
 8000b98:	e7f8      	b.n	8000b8c <main+0x104>
 8000b9a:	bf00      	nop
 8000b9c:	20000610 	.word	0x20000610
 8000ba0:	200005c0 	.word	0x200005c0
 8000ba4:	20000678 	.word	0x20000678
 8000ba8:	20000604 	.word	0x20000604
 8000bac:	200005a4 	.word	0x200005a4
 8000bb0:	200005f4 	.word	0x200005f4
 8000bb4:	20000674 	.word	0x20000674
 8000bb8:	200005cc 	.word	0x200005cc

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc6:	2228      	movs	r2, #40	; 0x28
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 fb20 	bl	8007210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c08:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 f966 	bl	8002ee4 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c1e:	f000 fe65 	bl	80018ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fbd0 	bl	80033e4 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c4a:	f000 fe4f 	bl	80018ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fd2d 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c64:	f000 fe42 	bl	80018ec <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000c96:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000c9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000cb6:	f002 fdb5 	bl	8003824 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cc0:	f000 fe14 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000cd2:	f002 fefd 	bl	8003ad0 <HAL_TIM_ConfigClockSource>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cdc:	f000 fe06 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000cee:	f003 f8c3 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f000 fdf8 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000610 	.word	0x20000610

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d3a:	f043 0320 	orr.w	r3, r3, #32
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0320 	and.w	r3, r3, #32
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <MX_GPIO_Init+0xac>)
 8000d6c:	f001 f9a8 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	480a      	ldr	r0, [pc, #40]	; (8000db4 <MX_GPIO_Init+0xac>)
 8000d8a:	f001 f83f 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CHA_Pin CHB_Pin */
  GPIO_InitStruct.Pin = CHA_Pin|CHB_Pin;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_GPIO_Init+0xb0>)
 8000da2:	f001 f833 	bl	8001e0c <HAL_GPIO_Init>

}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40011000 	.word	0x40011000
 8000db8:	40010800 	.word	0x40010800

08000dbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);
	if(htim->Instance == TIM2){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d129      	bne.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x66>
		if(counter ++ == 1000){
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	b291      	uxth	r1, r2
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dda:	8011      	strh	r1, [r2, #0]
 8000ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000de0:	d107      	bne.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x36>
			counter = 0;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dec:	4810      	ldr	r0, [pc, #64]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000dee:	f001 f97f 	bl	80020f0 <HAL_GPIO_TogglePin>
		}
		for(int i = 0; i < TIMERS; i++){
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	e011      	b.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x60>
			if(Timers[i] != TIMER_FINISHED)
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d008      	beq.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x5a>
				Timers[i]--;
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	1e5a      	subs	r2, r3, #1
 8000e0e:	4909      	ldr	r1, [pc, #36]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < TIMERS; i++){
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b09      	cmp	r3, #9
 8000e20:	ddea      	ble.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000036c 	.word	0x2000036c
 8000e30:	40011000 	.word	0x40011000
 8000e34:	200005cc 	.word	0x200005cc

08000e38 <CDC_ReceiveCallBack>:
void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len){
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	//sprintf(buffer, "Error magnitud\n");
	if(buf[0] == 'A' && buf[1] == '1'){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b41      	cmp	r3, #65	; 0x41
 8000e48:	f040 80b4 	bne.w	8000fb4 <CDC_ReceiveCallBack+0x17c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b31      	cmp	r3, #49	; 0x31
 8000e54:	f040 80ae 	bne.w	8000fb4 <CDC_ReceiveCallBack+0x17c>
		if(buf[3] == '1' || buf[5] == '1'){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3303      	adds	r3, #3
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b31      	cmp	r3, #49	; 0x31
 8000e60:	d005      	beq.n	8000e6e <CDC_ReceiveCallBack+0x36>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3305      	adds	r3, #5
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b31      	cmp	r3, #49	; 0x31
 8000e6a:	f040 80a3 	bne.w	8000fb4 <CDC_ReceiveCallBack+0x17c>
			if(buf[8] != crc8(buf,8))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3308      	adds	r3, #8
 8000e72:	781c      	ldrb	r4, [r3, #0]
 8000e74:	2108      	movs	r1, #8
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fc8a 	bl	8001790 <crc8>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	429c      	cmp	r4, r3
 8000e80:	f040 813b 	bne.w	80010fa <CDC_ReceiveCallBack+0x2c2>
				return;
			if(currentFloor == buf[7]-47){
 8000e84:	4b9f      	ldr	r3, [pc, #636]	; (8001104 <CDC_ReceiveCallBack+0x2cc>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3307      	adds	r3, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3b2f      	subs	r3, #47	; 0x2f
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d103      	bne.n	8000ea0 <CDC_ReceiveCallBack+0x68>
				firstAscensor = ABRIR_PUERTAS;
 8000e98:	4b9b      	ldr	r3, [pc, #620]	; (8001108 <CDC_ReceiveCallBack+0x2d0>)
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	701a      	strb	r2, [r3, #0]
				return;
 8000e9e:	e12d      	b.n	80010fc <CDC_ReceiveCallBack+0x2c4>
			}
			if(currentFloor_second == buf[7]-47){
 8000ea0:	4b9a      	ldr	r3, [pc, #616]	; (800110c <CDC_ReceiveCallBack+0x2d4>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3307      	adds	r3, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	3b2f      	subs	r3, #47	; 0x2f
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d103      	bne.n	8000ebc <CDC_ReceiveCallBack+0x84>
				secondAscensor = ABRIR_PUERTAS;
 8000eb4:	4b96      	ldr	r3, [pc, #600]	; (8001110 <CDC_ReceiveCallBack+0x2d8>)
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	701a      	strb	r2, [r3, #0]
				return;
 8000eba:	e11f      	b.n	80010fc <CDC_ReceiveCallBack+0x2c4>
			}
			if(abs(currentFloor-buf[7]-47) < abs(currentFloor_second-buf[7]-47)){
 8000ebc:	4b91      	ldr	r3, [pc, #580]	; (8001104 <CDC_ReceiveCallBack+0x2cc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	3b2f      	subs	r3, #47	; 0x2f
 8000ece:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ed2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ed6:	4b8d      	ldr	r3, [pc, #564]	; (800110c <CDC_ReceiveCallBack+0x2d4>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	4619      	mov	r1, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3307      	adds	r3, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	1acb      	subs	r3, r1, r3
 8000ee6:	3b2f      	subs	r3, #47	; 0x2f
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bfb8      	it	lt
 8000eec:	425b      	neglt	r3, r3
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	da30      	bge.n	8000f54 <CDC_ReceiveCallBack+0x11c>
				if(firstAscensor == SUBIENDO && buf[7]-47 > currentFloor && buf[3] == '1'){
 8000ef2:	4b85      	ldr	r3, [pc, #532]	; (8001108 <CDC_ReceiveCallBack+0x2d0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d11c      	bne.n	8000f36 <CDC_ReceiveCallBack+0xfe>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3307      	adds	r3, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3b2f      	subs	r3, #47	; 0x2f
 8000f04:	4a7f      	ldr	r2, [pc, #508]	; (8001104 <CDC_ReceiveCallBack+0x2cc>)
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	dd13      	ble.n	8000f36 <CDC_ReceiveCallBack+0xfe>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3303      	adds	r3, #3
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b31      	cmp	r3, #49	; 0x31
 8000f16:	d10e      	bne.n	8000f36 <CDC_ReceiveCallBack+0xfe>
						queueFloor[buf[7]-48] = buf[7]-47;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3307      	adds	r3, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	3b30      	subs	r3, #48	; 0x30
 8000f26:	3a2f      	subs	r2, #47	; 0x2f
 8000f28:	b2d1      	uxtb	r1, r2
 8000f2a:	4a7a      	ldr	r2, [pc, #488]	; (8001114 <CDC_ReceiveCallBack+0x2dc>)
 8000f2c:	54d1      	strb	r1, [r2, r3]
						firstAscensor = ABRIR_PUERTAS;
 8000f2e:	4b76      	ldr	r3, [pc, #472]	; (8001108 <CDC_ReceiveCallBack+0x2d0>)
 8000f30:	2203      	movs	r2, #3
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	e03e      	b.n	8000fb4 <CDC_ReceiveCallBack+0x17c>
				}
				else{
						queueFloor_second[buf[7]-48] = buf[7]-47;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3307      	adds	r3, #7
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3307      	adds	r3, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3b30      	subs	r3, #48	; 0x30
 8000f44:	3a2f      	subs	r2, #47	; 0x2f
 8000f46:	b2d1      	uxtb	r1, r2
 8000f48:	4a73      	ldr	r2, [pc, #460]	; (8001118 <CDC_ReceiveCallBack+0x2e0>)
 8000f4a:	54d1      	strb	r1, [r2, r3]
						secondAscensor = ABRIR_PUERTAS;
 8000f4c:	4b70      	ldr	r3, [pc, #448]	; (8001110 <CDC_ReceiveCallBack+0x2d8>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e02f      	b.n	8000fb4 <CDC_ReceiveCallBack+0x17c>
				}
			}
			else{
				if(secondAscensor == BAJANDO && buf[7]-47 < currentFloor_second && buf[5] == '1'){
 8000f54:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <CDC_ReceiveCallBack+0x2d8>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d11c      	bne.n	8000f98 <CDC_ReceiveCallBack+0x160>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3307      	adds	r3, #7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3b2f      	subs	r3, #47	; 0x2f
 8000f66:	4a69      	ldr	r2, [pc, #420]	; (800110c <CDC_ReceiveCallBack+0x2d4>)
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	da13      	bge.n	8000f98 <CDC_ReceiveCallBack+0x160>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3305      	adds	r3, #5
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b31      	cmp	r3, #49	; 0x31
 8000f78:	d10e      	bne.n	8000f98 <CDC_ReceiveCallBack+0x160>
						queueFloor_second[buf[7]-48] = buf[7]-47;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3307      	adds	r3, #7
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3307      	adds	r3, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	3b30      	subs	r3, #48	; 0x30
 8000f88:	3a2f      	subs	r2, #47	; 0x2f
 8000f8a:	b2d1      	uxtb	r1, r2
 8000f8c:	4a62      	ldr	r2, [pc, #392]	; (8001118 <CDC_ReceiveCallBack+0x2e0>)
 8000f8e:	54d1      	strb	r1, [r2, r3]
						secondAscensor = ABRIR_PUERTAS;
 8000f90:	4b5f      	ldr	r3, [pc, #380]	; (8001110 <CDC_ReceiveCallBack+0x2d8>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e00d      	b.n	8000fb4 <CDC_ReceiveCallBack+0x17c>
				}
				else{
						queueFloor[buf[7]-48] = buf[7]-47;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3307      	adds	r3, #7
 8000f9c:	781a      	ldrb	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3307      	adds	r3, #7
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	3b30      	subs	r3, #48	; 0x30
 8000fa6:	3a2f      	subs	r2, #47	; 0x2f
 8000fa8:	b2d1      	uxtb	r1, r2
 8000faa:	4a5a      	ldr	r2, [pc, #360]	; (8001114 <CDC_ReceiveCallBack+0x2dc>)
 8000fac:	54d1      	strb	r1, [r2, r3]
						firstAscensor = ABRIR_PUERTAS;
 8000fae:	4b56      	ldr	r3, [pc, #344]	; (8001108 <CDC_ReceiveCallBack+0x2d0>)
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	if(buf[0] == 'T' && buf[1] == 'F' && buf[2] == 'S' && buf[3] == '1'){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b54      	cmp	r3, #84	; 0x54
 8000fba:	d14c      	bne.n	8001056 <CDC_ReceiveCallBack+0x21e>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b46      	cmp	r3, #70	; 0x46
 8000fc4:	d147      	bne.n	8001056 <CDC_ReceiveCallBack+0x21e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b53      	cmp	r3, #83	; 0x53
 8000fce:	d142      	bne.n	8001056 <CDC_ReceiveCallBack+0x21e>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b31      	cmp	r3, #49	; 0x31
 8000fd8:	d13d      	bne.n	8001056 <CDC_ReceiveCallBack+0x21e>
		if(buf[14] != crc8(buf+4,10)){
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	330e      	adds	r3, #14
 8000fde:	781c      	ldrb	r4, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	210a      	movs	r1, #10
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fbd2 	bl	8001790 <crc8>
 8000fec:	4603      	mov	r3, r0
 8000fee:	429c      	cmp	r4, r3
 8000ff0:	d011      	beq.n	8001016 <CDC_ReceiveCallBack+0x1de>
			printerUnit = ERROR_UNIT;
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <CDC_ReceiveCallBack+0x2e4>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	701a      	strb	r2, [r3, #0]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e007      	b.n	800100e <CDC_ReceiveCallBack+0x1d6>
				firstAscensorReport[i]='1';
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <CDC_ReceiveCallBack+0x2e8>)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	4413      	add	r3, r2
 8001004:	2231      	movs	r2, #49	; 0x31
 8001006:	701a      	strb	r2, [r3, #0]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	ddf4      	ble.n	8000ffe <CDC_ReceiveCallBack+0x1c6>
			}
			return;
 8001014:	e072      	b.n	80010fc <CDC_ReceiveCallBack+0x2c4>
		}
		for(int i = 0; i < SIZE_QUEUE_KEYBOARD; i++){
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	e019      	b.n	8001050 <CDC_ReceiveCallBack+0x218>
			if(buf[i+4] == '1' && queueFloor[i] == DEFAULT_BASE_FLOOR){
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	3304      	adds	r3, #4
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b31      	cmp	r3, #49	; 0x31
 8001028:	d10f      	bne.n	800104a <CDC_ReceiveCallBack+0x212>
 800102a:	4a3a      	ldr	r2, [pc, #232]	; (8001114 <CDC_ReceiveCallBack+0x2dc>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d108      	bne.n	800104a <CDC_ReceiveCallBack+0x212>
				queueFloor[i] = i+1;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3301      	adds	r3, #1
 800103e:	b2d9      	uxtb	r1, r3
 8001040:	4a34      	ldr	r2, [pc, #208]	; (8001114 <CDC_ReceiveCallBack+0x2dc>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4413      	add	r3, r2
 8001046:	460a      	mov	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < SIZE_QUEUE_KEYBOARD; i++){
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2b09      	cmp	r3, #9
 8001054:	dde2      	ble.n	800101c <CDC_ReceiveCallBack+0x1e4>
			}
		}
	}
	if(buf[0] == 'T' && buf[1] == 'F' && buf[2] == 'S' && buf[3] == '2'){
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b54      	cmp	r3, #84	; 0x54
 800105c:	d14e      	bne.n	80010fc <CDC_ReceiveCallBack+0x2c4>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3301      	adds	r3, #1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b46      	cmp	r3, #70	; 0x46
 8001066:	d149      	bne.n	80010fc <CDC_ReceiveCallBack+0x2c4>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3302      	adds	r3, #2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b53      	cmp	r3, #83	; 0x53
 8001070:	d144      	bne.n	80010fc <CDC_ReceiveCallBack+0x2c4>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3303      	adds	r3, #3
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b32      	cmp	r3, #50	; 0x32
 800107a:	d13f      	bne.n	80010fc <CDC_ReceiveCallBack+0x2c4>
		if(buf[14] != crc8(buf+4,10)){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330e      	adds	r3, #14
 8001080:	781c      	ldrb	r4, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
 8001086:	210a      	movs	r1, #10
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fb81 	bl	8001790 <crc8>
 800108e:	4603      	mov	r3, r0
 8001090:	429c      	cmp	r4, r3
 8001092:	d011      	beq.n	80010b8 <CDC_ReceiveCallBack+0x280>
			printerUnit = ERROR_UNIT;
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <CDC_ReceiveCallBack+0x2e4>)
 8001096:	2202      	movs	r2, #2
 8001098:	701a      	strb	r2, [r3, #0]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 800109a:	2306      	movs	r3, #6
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e007      	b.n	80010b0 <CDC_ReceiveCallBack+0x278>
				secondAscensorReport[i]='1';
 80010a0:	4a20      	ldr	r2, [pc, #128]	; (8001124 <CDC_ReceiveCallBack+0x2ec>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	2231      	movs	r2, #49	; 0x31
 80010a8:	701a      	strb	r2, [r3, #0]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	ddf4      	ble.n	80010a0 <CDC_ReceiveCallBack+0x268>
			}
			return;
 80010b6:	e021      	b.n	80010fc <CDC_ReceiveCallBack+0x2c4>
		}
		for(int i = 0; i < SIZE_QUEUE_KEYBOARD; i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e019      	b.n	80010f2 <CDC_ReceiveCallBack+0x2ba>
			if(buf[i+4] == '1' && queueFloor[i] == DEFAULT_BASE_FLOOR){
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3304      	adds	r3, #4
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b31      	cmp	r3, #49	; 0x31
 80010ca:	d10f      	bne.n	80010ec <CDC_ReceiveCallBack+0x2b4>
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <CDC_ReceiveCallBack+0x2dc>)
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d108      	bne.n	80010ec <CDC_ReceiveCallBack+0x2b4>
				queueFloor_second[i] = i+1;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3301      	adds	r3, #1
 80010e0:	b2d9      	uxtb	r1, r3
 80010e2:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <CDC_ReceiveCallBack+0x2e0>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4413      	add	r3, r2
 80010e8:	460a      	mov	r2, r1
 80010ea:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < SIZE_QUEUE_KEYBOARD; i++){
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	3301      	adds	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b09      	cmp	r3, #9
 80010f6:	dde2      	ble.n	80010be <CDC_ReceiveCallBack+0x286>
 80010f8:	e000      	b.n	80010fc <CDC_ReceiveCallBack+0x2c4>
				return;
 80010fa:	bf00      	nop
			}
		}
	}
	//CDC_Transmit_FS(buf, len);
	//CDC_Transmit_FS(constantBuffer, (uint32_t)4);
}
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000
 8001108:	2000036e 	.word	0x2000036e
 800110c:	20000002 	.word	0x20000002
 8001110:	2000036f 	.word	0x2000036f
 8001114:	200005c0 	.word	0x200005c0
 8001118:	20000604 	.word	0x20000604
 800111c:	20000370 	.word	0x20000370
 8001120:	20000678 	.word	0x20000678
 8001124:	200005a4 	.word	0x200005a4

08001128 <AscensorUnit>:

void AscensorUnit(){
 8001128:	b480      	push	{r7}
 800112a:	b08b      	sub	sp, #44	; 0x2c
 800112c:	af00      	add	r7, sp, #0
	switch(firstAscensor){
 800112e:	4b9e      	ldr	r3, [pc, #632]	; (80013a8 <AscensorUnit+0x280>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b04      	cmp	r3, #4
 8001136:	f200 8182 	bhi.w	800143e <AscensorUnit+0x316>
 800113a:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <AscensorUnit+0x18>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	08001155 	.word	0x08001155
 8001144:	08001235 	.word	0x08001235
 8001148:	0800130b 	.word	0x0800130b
 800114c:	080013fb 	.word	0x080013fb
 8001150:	08001419 	.word	0x08001419
	case DETENIDO:{
		for(int i = 0; i < SIZE_QUEUE; i++){
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	e013      	b.n	8001182 <AscensorUnit+0x5a>
			if(queueFloor[i] > tempFloor){
 800115a:	4a94      	ldr	r2, [pc, #592]	; (80013ac <AscensorUnit+0x284>)
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b92      	ldr	r3, [pc, #584]	; (80013b0 <AscensorUnit+0x288>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	429a      	cmp	r2, r3
 800116c:	d906      	bls.n	800117c <AscensorUnit+0x54>
				tempFloor = queueFloor[i];
 800116e:	4a8f      	ldr	r2, [pc, #572]	; (80013ac <AscensorUnit+0x284>)
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b8d      	ldr	r3, [pc, #564]	; (80013b0 <AscensorUnit+0x288>)
 800117a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < SIZE_QUEUE; i++){
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	3301      	adds	r3, #1
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	2b09      	cmp	r3, #9
 8001186:	dde8      	ble.n	800115a <AscensorUnit+0x32>
			}
		}
		if(tempFloor > currentFloor){
 8001188:	4b89      	ldr	r3, [pc, #548]	; (80013b0 <AscensorUnit+0x288>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b89      	ldr	r3, [pc, #548]	; (80013b4 <AscensorUnit+0x28c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	429a      	cmp	r2, r3
 8001196:	d907      	bls.n	80011a8 <AscensorUnit+0x80>
			firstAscensor = SUBIENDO;
 8001198:	4b83      	ldr	r3, [pc, #524]	; (80013a8 <AscensorUnit+0x280>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
			Timers[T0] = CONST_TIME_MOVEMENT;
 800119e:	4b86      	ldr	r3, [pc, #536]	; (80013b8 <AscensorUnit+0x290>)
 80011a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011a4:	601a      	str	r2, [r3, #0]
			return;
 80011a6:	e14a      	b.n	800143e <AscensorUnit+0x316>
		}
		for(int i = 0; i < SIZE_QUEUE; i++){
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
 80011ac:	e013      	b.n	80011d6 <AscensorUnit+0xae>
			if(queueFloor[i] < tempFloor){
 80011ae:	4a7f      	ldr	r2, [pc, #508]	; (80013ac <AscensorUnit+0x284>)
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b7d      	ldr	r3, [pc, #500]	; (80013b0 <AscensorUnit+0x288>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	429a      	cmp	r2, r3
 80011c0:	d206      	bcs.n	80011d0 <AscensorUnit+0xa8>
				tempFloor = queueFloor[i];
 80011c2:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <AscensorUnit+0x284>)
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b78      	ldr	r3, [pc, #480]	; (80013b0 <AscensorUnit+0x288>)
 80011ce:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < SIZE_QUEUE; i++){
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	3301      	adds	r3, #1
 80011d4:	623b      	str	r3, [r7, #32]
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	2b09      	cmp	r3, #9
 80011da:	dde8      	ble.n	80011ae <AscensorUnit+0x86>
			}
		}
		if(tempFloor < currentFloor){
 80011dc:	4b74      	ldr	r3, [pc, #464]	; (80013b0 <AscensorUnit+0x288>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b74      	ldr	r3, [pc, #464]	; (80013b4 <AscensorUnit+0x28c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <AscensorUnit+0xd4>
			firstAscensor = BAJANDO;
 80011ec:	4b6e      	ldr	r3, [pc, #440]	; (80013a8 <AscensorUnit+0x280>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]
			Timers[T1] = CONST_TIME_MOVEMENT;
 80011f2:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <AscensorUnit+0x290>)
 80011f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011f8:	605a      	str	r2, [r3, #4]
			return;
 80011fa:	e120      	b.n	800143e <AscensorUnit+0x316>
		}
		firstAscensorReport[3]='0';
 80011fc:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <AscensorUnit+0x294>)
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	70da      	strb	r2, [r3, #3]
		firstAscensorReport[5]='0';
 8001202:	4b6e      	ldr	r3, [pc, #440]	; (80013bc <AscensorUnit+0x294>)
 8001204:	2230      	movs	r2, #48	; 0x30
 8001206:	715a      	strb	r2, [r3, #5]
		for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 8001208:	2306      	movs	r3, #6
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	e007      	b.n	800121e <AscensorUnit+0xf6>
			firstAscensorReport[i]='0';
 800120e:	4a6b      	ldr	r2, [pc, #428]	; (80013bc <AscensorUnit+0x294>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	4413      	add	r3, r2
 8001214:	2230      	movs	r2, #48	; 0x30
 8001216:	701a      	strb	r2, [r3, #0]
		for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3301      	adds	r3, #1
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	ddf4      	ble.n	800120e <AscensorUnit+0xe6>
		}
		firstAscensorReport[currentFloor+5]='1';
 8001224:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <AscensorUnit+0x28c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3305      	adds	r3, #5
 800122c:	4a63      	ldr	r2, [pc, #396]	; (80013bc <AscensorUnit+0x294>)
 800122e:	2131      	movs	r1, #49	; 0x31
 8001230:	54d1      	strb	r1, [r2, r3]
		break;
 8001232:	e104      	b.n	800143e <AscensorUnit+0x316>
	}
	case SUBIENDO:{
		if(Timers[T0] == TIMER_FINISHED){
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <AscensorUnit+0x290>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 80f9 	bne.w	8001430 <AscensorUnit+0x308>
			currentFloor++;
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <AscensorUnit+0x28c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <AscensorUnit+0x28c>)
 800124a:	701a      	strb	r2, [r3, #0]
			firstAscensorReport[3]='1';
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <AscensorUnit+0x294>)
 800124e:	2231      	movs	r2, #49	; 0x31
 8001250:	70da      	strb	r2, [r3, #3]
			firstAscensorReport[5]='0';
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <AscensorUnit+0x294>)
 8001254:	2230      	movs	r2, #48	; 0x30
 8001256:	715a      	strb	r2, [r3, #5]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 8001258:	2306      	movs	r3, #6
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	e007      	b.n	800126e <AscensorUnit+0x146>
				firstAscensorReport[i]='0';
 800125e:	4a57      	ldr	r2, [pc, #348]	; (80013bc <AscensorUnit+0x294>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	4413      	add	r3, r2
 8001264:	2230      	movs	r2, #48	; 0x30
 8001266:	701a      	strb	r2, [r3, #0]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	3301      	adds	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	ddf4      	ble.n	800125e <AscensorUnit+0x136>
			}
			firstAscensorReport[currentFloor+5]='1';
 8001274:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <AscensorUnit+0x28c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3305      	adds	r3, #5
 800127c:	4a4f      	ldr	r2, [pc, #316]	; (80013bc <AscensorUnit+0x294>)
 800127e:	2131      	movs	r1, #49	; 0x31
 8001280:	54d1      	strb	r1, [r2, r3]
			//CDC_Transmit_FS(firstAscensorReport, SIZE_PAGE_ASCENSOR); --->
			if(currentFloor == tempFloor){
 8001282:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <AscensorUnit+0x28c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <AscensorUnit+0x288>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	429a      	cmp	r2, r3
 8001290:	d11b      	bne.n	80012ca <AscensorUnit+0x1a2>
				for(int i = 0; i < SIZE_QUEUE; i++){
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e011      	b.n	80012bc <AscensorUnit+0x194>
					if(queueFloor[i] == currentFloor){
 8001298:	4a44      	ldr	r2, [pc, #272]	; (80013ac <AscensorUnit+0x284>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <AscensorUnit+0x28c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d104      	bne.n	80012b6 <AscensorUnit+0x18e>
						queueFloor[i] = DEFAULT_BASE_FLOOR;
 80012ac:	4a3f      	ldr	r2, [pc, #252]	; (80013ac <AscensorUnit+0x284>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	4413      	add	r3, r2
 80012b2:	2203      	movs	r2, #3
 80012b4:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < SIZE_QUEUE; i++){
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b09      	cmp	r3, #9
 80012c0:	ddea      	ble.n	8001298 <AscensorUnit+0x170>
					}
				}
				firstAscensor = ABRIR_PUERTAS;
 80012c2:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <AscensorUnit+0x280>)
 80012c4:	2203      	movs	r2, #3
 80012c6:	701a      	strb	r2, [r3, #0]
				//CDC_Transmit_FS(constantBufferUp, 7);
				return;
 80012c8:	e0b9      	b.n	800143e <AscensorUnit+0x316>
			}
			else{
				for(int i = 0; i < SIZE_QUEUE; i++){
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	e014      	b.n	80012fa <AscensorUnit+0x1d2>
					if(queueFloor[i] == currentFloor){
 80012d0:	4a36      	ldr	r2, [pc, #216]	; (80013ac <AscensorUnit+0x284>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <AscensorUnit+0x28c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d107      	bne.n	80012f4 <AscensorUnit+0x1cc>
						firstAscensor = ABRIR_PUERTAS;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <AscensorUnit+0x280>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	701a      	strb	r2, [r3, #0]
						queueFloor[i] = DEFAULT_BASE_FLOOR;
 80012ea:	4a30      	ldr	r2, [pc, #192]	; (80013ac <AscensorUnit+0x284>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4413      	add	r3, r2
 80012f0:	2203      	movs	r2, #3
 80012f2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < SIZE_QUEUE; i++){
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	3301      	adds	r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b09      	cmp	r3, #9
 80012fe:	dde7      	ble.n	80012d0 <AscensorUnit+0x1a8>
						//CDC_Transmit_FS(constantBufferUp, 7);
					}
				}
			}
			//CDC_Transmit_FS(buf, 5);
			Timers[T0] = CONST_TIME_MOVEMENT;
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <AscensorUnit+0x290>)
 8001302:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001306:	601a      	str	r2, [r3, #0]
		}
		break;
 8001308:	e092      	b.n	8001430 <AscensorUnit+0x308>
	}
	case BAJANDO:{
		if(Timers[T1] == TIMER_FINISHED){
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <AscensorUnit+0x290>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 8090 	bne.w	8001434 <AscensorUnit+0x30c>
			currentFloor--;
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <AscensorUnit+0x28c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	3b01      	subs	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <AscensorUnit+0x28c>)
 8001320:	701a      	strb	r2, [r3, #0]
			firstAscensorReport[3]='0';
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <AscensorUnit+0x294>)
 8001324:	2230      	movs	r2, #48	; 0x30
 8001326:	70da      	strb	r2, [r3, #3]
			firstAscensorReport[5]='1';
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <AscensorUnit+0x294>)
 800132a:	2231      	movs	r2, #49	; 0x31
 800132c:	715a      	strb	r2, [r3, #5]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 800132e:	2306      	movs	r3, #6
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	e007      	b.n	8001344 <AscensorUnit+0x21c>
				firstAscensorReport[i]='0';
 8001334:	4a21      	ldr	r2, [pc, #132]	; (80013bc <AscensorUnit+0x294>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	2230      	movs	r2, #48	; 0x30
 800133c:	701a      	strb	r2, [r3, #0]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	ddf4      	ble.n	8001334 <AscensorUnit+0x20c>
			}
			firstAscensorReport[currentFloor+5]='1';
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <AscensorUnit+0x28c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	3305      	adds	r3, #5
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <AscensorUnit+0x294>)
 8001354:	2131      	movs	r1, #49	; 0x31
 8001356:	54d1      	strb	r1, [r2, r3]
			//CDC_Transmit_FS(firstAscensorReport, SIZE_PAGE_ASCENSOR); --->
			if(currentFloor == tempFloor){
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <AscensorUnit+0x28c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <AscensorUnit+0x288>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	429a      	cmp	r2, r3
 8001366:	d11b      	bne.n	80013a0 <AscensorUnit+0x278>
				for(int i = 0; i < SIZE_QUEUE; i++){
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	e011      	b.n	8001392 <AscensorUnit+0x26a>
					if(queueFloor[i] == currentFloor){
 800136e:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <AscensorUnit+0x284>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <AscensorUnit+0x28c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	429a      	cmp	r2, r3
 8001380:	d104      	bne.n	800138c <AscensorUnit+0x264>
						queueFloor[i] = DEFAULT_BASE_FLOOR;
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <AscensorUnit+0x284>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	2203      	movs	r2, #3
 800138a:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < SIZE_QUEUE; i++){
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3301      	adds	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b09      	cmp	r3, #9
 8001396:	ddea      	ble.n	800136e <AscensorUnit+0x246>
					}
				}
				firstAscensor = ABRIR_PUERTAS;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <AscensorUnit+0x280>)
 800139a:	2203      	movs	r2, #3
 800139c:	701a      	strb	r2, [r3, #0]
				//CDC_Transmit_FS(constantBufferDown, 7);
				return;
 800139e:	e04e      	b.n	800143e <AscensorUnit+0x316>
			}
			else{
				for(int i = 0; i < SIZE_QUEUE; i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	e021      	b.n	80013ea <AscensorUnit+0x2c2>
 80013a6:	bf00      	nop
 80013a8:	2000036e 	.word	0x2000036e
 80013ac:	200005c0 	.word	0x200005c0
 80013b0:	20000001 	.word	0x20000001
 80013b4:	20000000 	.word	0x20000000
 80013b8:	200005cc 	.word	0x200005cc
 80013bc:	20000678 	.word	0x20000678
					if(queueFloor[i] == currentFloor){
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <AscensorUnit+0x320>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <AscensorUnit+0x324>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d107      	bne.n	80013e4 <AscensorUnit+0x2bc>
						firstAscensor = ABRIR_PUERTAS;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <AscensorUnit+0x328>)
 80013d6:	2203      	movs	r2, #3
 80013d8:	701a      	strb	r2, [r3, #0]
						queueFloor[i] = DEFAULT_BASE_FLOOR;
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <AscensorUnit+0x320>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	2203      	movs	r2, #3
 80013e2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < SIZE_QUEUE; i++){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	dde7      	ble.n	80013c0 <AscensorUnit+0x298>
						//CDC_Transmit_FS(constantBufferDown, 7);
					}
				}
			}
			//CDC_Transmit_FS(buf, 5);
			Timers[T1] = CONST_TIME_MOVEMENT;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <AscensorUnit+0x32c>)
 80013f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013f6:	605a      	str	r2, [r3, #4]
		}
		break;
 80013f8:	e01c      	b.n	8001434 <AscensorUnit+0x30c>
	}
	case ABRIR_PUERTAS:{
		globalDoors[0] = '1';
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <AscensorUnit+0x330>)
 80013fc:	2231      	movs	r2, #49	; 0x31
 80013fe:	701a      	strb	r2, [r3, #0]
		if(Timers[TDOORS_ONE] == TIMER_FINISHED){
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <AscensorUnit+0x32c>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d117      	bne.n	8001438 <AscensorUnit+0x310>
			firstAscensor = CERRAR_PUERTAS;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <AscensorUnit+0x328>)
 800140a:	2204      	movs	r2, #4
 800140c:	701a      	strb	r2, [r3, #0]
			Timers[TDOORS_ONE] = CONST_TIME_MOVEMENT;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <AscensorUnit+0x32c>)
 8001410:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001414:	61da      	str	r2, [r3, #28]
		}
		break;
 8001416:	e00f      	b.n	8001438 <AscensorUnit+0x310>
	}
	case CERRAR_PUERTAS:{
		if(Timers[TDOORS_ONE] == TIMER_FINISHED){
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <AscensorUnit+0x32c>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10d      	bne.n	800143c <AscensorUnit+0x314>
			firstAscensor = DETENIDO;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <AscensorUnit+0x328>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
			globalDoors[0] = '0';
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <AscensorUnit+0x330>)
 8001428:	2230      	movs	r2, #48	; 0x30
 800142a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800142c:	bf00      	nop
 800142e:	e005      	b.n	800143c <AscensorUnit+0x314>
		break;
 8001430:	bf00      	nop
 8001432:	e004      	b.n	800143e <AscensorUnit+0x316>
		break;
 8001434:	bf00      	nop
 8001436:	e002      	b.n	800143e <AscensorUnit+0x316>
		break;
 8001438:	bf00      	nop
 800143a:	e000      	b.n	800143e <AscensorUnit+0x316>
		break;
 800143c:	bf00      	nop
	}
	}
}
 800143e:	372c      	adds	r7, #44	; 0x2c
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	200005c0 	.word	0x200005c0
 800144c:	20000000 	.word	0x20000000
 8001450:	2000036e 	.word	0x2000036e
 8001454:	200005cc 	.word	0x200005cc
 8001458:	200005f4 	.word	0x200005f4

0800145c <AscensorUnit_second>:

void AscensorUnit_second(){
 800145c:	b480      	push	{r7}
 800145e:	b08b      	sub	sp, #44	; 0x2c
 8001460:	af00      	add	r7, sp, #0
	switch(secondAscensor){
 8001462:	4b9e      	ldr	r3, [pc, #632]	; (80016dc <AscensorUnit_second+0x280>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b04      	cmp	r3, #4
 800146a:	f200 8182 	bhi.w	8001772 <AscensorUnit_second+0x316>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <AscensorUnit_second+0x18>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	08001489 	.word	0x08001489
 8001478:	08001569 	.word	0x08001569
 800147c:	0800163f 	.word	0x0800163f
 8001480:	0800172f 	.word	0x0800172f
 8001484:	0800174d 	.word	0x0800174d
	case DETENIDO:{
		for(int i = 0; i < SIZE_QUEUE; i++){
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	e013      	b.n	80014b6 <AscensorUnit_second+0x5a>
			if(queueFloor_second[i] > tempFloor_second){
 800148e:	4a94      	ldr	r2, [pc, #592]	; (80016e0 <AscensorUnit_second+0x284>)
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <AscensorUnit_second+0x288>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	429a      	cmp	r2, r3
 80014a0:	d906      	bls.n	80014b0 <AscensorUnit_second+0x54>
				tempFloor_second = queueFloor_second[i];
 80014a2:	4a8f      	ldr	r2, [pc, #572]	; (80016e0 <AscensorUnit_second+0x284>)
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b8d      	ldr	r3, [pc, #564]	; (80016e4 <AscensorUnit_second+0x288>)
 80014ae:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < SIZE_QUEUE; i++){
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	3301      	adds	r3, #1
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	dde8      	ble.n	800148e <AscensorUnit_second+0x32>
			}
		}
		if(tempFloor_second > currentFloor_second){
 80014bc:	4b89      	ldr	r3, [pc, #548]	; (80016e4 <AscensorUnit_second+0x288>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b89      	ldr	r3, [pc, #548]	; (80016e8 <AscensorUnit_second+0x28c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d907      	bls.n	80014dc <AscensorUnit_second+0x80>
			secondAscensor = SUBIENDO;
 80014cc:	4b83      	ldr	r3, [pc, #524]	; (80016dc <AscensorUnit_second+0x280>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
			Timers[T2] = CONST_TIME_MOVEMENT;
 80014d2:	4b86      	ldr	r3, [pc, #536]	; (80016ec <AscensorUnit_second+0x290>)
 80014d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014d8:	609a      	str	r2, [r3, #8]
			return;
 80014da:	e14a      	b.n	8001772 <AscensorUnit_second+0x316>
		}
		for(int i = 0; i < SIZE_QUEUE; i++){
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
 80014e0:	e013      	b.n	800150a <AscensorUnit_second+0xae>
			if(queueFloor_second[i] < tempFloor_second){
 80014e2:	4a7f      	ldr	r2, [pc, #508]	; (80016e0 <AscensorUnit_second+0x284>)
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	4413      	add	r3, r2
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <AscensorUnit_second+0x288>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d206      	bcs.n	8001504 <AscensorUnit_second+0xa8>
				tempFloor_second = queueFloor_second[i];
 80014f6:	4a7a      	ldr	r2, [pc, #488]	; (80016e0 <AscensorUnit_second+0x284>)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b78      	ldr	r3, [pc, #480]	; (80016e4 <AscensorUnit_second+0x288>)
 8001502:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < SIZE_QUEUE; i++){
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	3301      	adds	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	2b09      	cmp	r3, #9
 800150e:	dde8      	ble.n	80014e2 <AscensorUnit_second+0x86>
			}
		}
		if(tempFloor_second < currentFloor_second){
 8001510:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <AscensorUnit_second+0x288>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b74      	ldr	r3, [pc, #464]	; (80016e8 <AscensorUnit_second+0x28c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <AscensorUnit_second+0xd4>
			secondAscensor = BAJANDO;
 8001520:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <AscensorUnit_second+0x280>)
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
			Timers[T3] = CONST_TIME_MOVEMENT;
 8001526:	4b71      	ldr	r3, [pc, #452]	; (80016ec <AscensorUnit_second+0x290>)
 8001528:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800152c:	60da      	str	r2, [r3, #12]
			return;
 800152e:	e120      	b.n	8001772 <AscensorUnit_second+0x316>
		}
		secondAscensorReport[3]='0';
 8001530:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <AscensorUnit_second+0x294>)
 8001532:	2230      	movs	r2, #48	; 0x30
 8001534:	70da      	strb	r2, [r3, #3]
		secondAscensorReport[5]='0';
 8001536:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <AscensorUnit_second+0x294>)
 8001538:	2230      	movs	r2, #48	; 0x30
 800153a:	715a      	strb	r2, [r3, #5]
		for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 800153c:	2306      	movs	r3, #6
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	e007      	b.n	8001552 <AscensorUnit_second+0xf6>
			secondAscensorReport[i]='0';
 8001542:	4a6b      	ldr	r2, [pc, #428]	; (80016f0 <AscensorUnit_second+0x294>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	2230      	movs	r2, #48	; 0x30
 800154a:	701a      	strb	r2, [r3, #0]
		for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	3301      	adds	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	ddf4      	ble.n	8001542 <AscensorUnit_second+0xe6>
		}
		secondAscensorReport[currentFloor_second+5]='1';
 8001558:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <AscensorUnit_second+0x28c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3305      	adds	r3, #5
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <AscensorUnit_second+0x294>)
 8001562:	2131      	movs	r1, #49	; 0x31
 8001564:	54d1      	strb	r1, [r2, r3]
		break;
 8001566:	e104      	b.n	8001772 <AscensorUnit_second+0x316>
	}
	case SUBIENDO:{
		if(Timers[T2] == TIMER_FINISHED){
 8001568:	4b60      	ldr	r3, [pc, #384]	; (80016ec <AscensorUnit_second+0x290>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 80f9 	bne.w	8001764 <AscensorUnit_second+0x308>
			currentFloor_second++;
 8001572:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <AscensorUnit_second+0x28c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3301      	adds	r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <AscensorUnit_second+0x28c>)
 800157e:	701a      	strb	r2, [r3, #0]
			secondAscensorReport[3]='1';
 8001580:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <AscensorUnit_second+0x294>)
 8001582:	2231      	movs	r2, #49	; 0x31
 8001584:	70da      	strb	r2, [r3, #3]
			secondAscensorReport[5]='0';
 8001586:	4b5a      	ldr	r3, [pc, #360]	; (80016f0 <AscensorUnit_second+0x294>)
 8001588:	2230      	movs	r2, #48	; 0x30
 800158a:	715a      	strb	r2, [r3, #5]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 800158c:	2306      	movs	r3, #6
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	e007      	b.n	80015a2 <AscensorUnit_second+0x146>
				secondAscensorReport[i]='0';
 8001592:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <AscensorUnit_second+0x294>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	4413      	add	r3, r2
 8001598:	2230      	movs	r2, #48	; 0x30
 800159a:	701a      	strb	r2, [r3, #0]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	ddf4      	ble.n	8001592 <AscensorUnit_second+0x136>
			}
			secondAscensorReport[currentFloor_second+5]='1';
 80015a8:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <AscensorUnit_second+0x28c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3305      	adds	r3, #5
 80015b0:	4a4f      	ldr	r2, [pc, #316]	; (80016f0 <AscensorUnit_second+0x294>)
 80015b2:	2131      	movs	r1, #49	; 0x31
 80015b4:	54d1      	strb	r1, [r2, r3]
			//CDC_Transmit_FS(secondAscensorReport, SIZE_PAGE_ASCENSOR); --->
			if(currentFloor_second == tempFloor_second){
 80015b6:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <AscensorUnit_second+0x28c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <AscensorUnit_second+0x288>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d11b      	bne.n	80015fe <AscensorUnit_second+0x1a2>
				for(int i = 0; i < SIZE_QUEUE; i++){
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e011      	b.n	80015f0 <AscensorUnit_second+0x194>
					if(queueFloor_second[i] == currentFloor_second){
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <AscensorUnit_second+0x284>)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <AscensorUnit_second+0x28c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	429a      	cmp	r2, r3
 80015de:	d104      	bne.n	80015ea <AscensorUnit_second+0x18e>
						queueFloor_second[i] = DEFAULT_BASE_FLOOR;
 80015e0:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <AscensorUnit_second+0x284>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	4413      	add	r3, r2
 80015e6:	2203      	movs	r2, #3
 80015e8:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < SIZE_QUEUE; i++){
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b09      	cmp	r3, #9
 80015f4:	ddea      	ble.n	80015cc <AscensorUnit_second+0x170>
					}
				}
				secondAscensor = ABRIR_PUERTAS;
 80015f6:	4b39      	ldr	r3, [pc, #228]	; (80016dc <AscensorUnit_second+0x280>)
 80015f8:	2203      	movs	r2, #3
 80015fa:	701a      	strb	r2, [r3, #0]
				//CDC_Transmit_FS(constantBufferUp, 7);
				return;
 80015fc:	e0b9      	b.n	8001772 <AscensorUnit_second+0x316>
			}
			else{
				for(int i = 0; i < SIZE_QUEUE; i++){
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e014      	b.n	800162e <AscensorUnit_second+0x1d2>
					if(queueFloor_second[i] == currentFloor_second){
 8001604:	4a36      	ldr	r2, [pc, #216]	; (80016e0 <AscensorUnit_second+0x284>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <AscensorUnit_second+0x28c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <AscensorUnit_second+0x1cc>
						secondAscensor = ABRIR_PUERTAS;
 8001618:	4b30      	ldr	r3, [pc, #192]	; (80016dc <AscensorUnit_second+0x280>)
 800161a:	2203      	movs	r2, #3
 800161c:	701a      	strb	r2, [r3, #0]
						queueFloor_second[i] = DEFAULT_BASE_FLOOR;
 800161e:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <AscensorUnit_second+0x284>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4413      	add	r3, r2
 8001624:	2203      	movs	r2, #3
 8001626:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < SIZE_QUEUE; i++){
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	3301      	adds	r3, #1
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b09      	cmp	r3, #9
 8001632:	dde7      	ble.n	8001604 <AscensorUnit_second+0x1a8>
						//CDC_Transmit_FS(constantBufferUp, 7);
					}
				}
			}
			//CDC_Transmit_FS(buf, 5);
			Timers[T2] = CONST_TIME_MOVEMENT;
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <AscensorUnit_second+0x290>)
 8001636:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800163a:	609a      	str	r2, [r3, #8]
		}
		break;
 800163c:	e092      	b.n	8001764 <AscensorUnit_second+0x308>
	}
	case BAJANDO:{
		if(Timers[T3] == TIMER_FINISHED){
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <AscensorUnit_second+0x290>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 8090 	bne.w	8001768 <AscensorUnit_second+0x30c>
			currentFloor_second--;
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <AscensorUnit_second+0x28c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <AscensorUnit_second+0x28c>)
 8001654:	701a      	strb	r2, [r3, #0]
			secondAscensorReport[3]='0';
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <AscensorUnit_second+0x294>)
 8001658:	2230      	movs	r2, #48	; 0x30
 800165a:	70da      	strb	r2, [r3, #3]
			secondAscensorReport[5]='1';
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <AscensorUnit_second+0x294>)
 800165e:	2231      	movs	r2, #49	; 0x31
 8001660:	715a      	strb	r2, [r3, #5]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 8001662:	2306      	movs	r3, #6
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e007      	b.n	8001678 <AscensorUnit_second+0x21c>
				secondAscensorReport[i]='0';
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <AscensorUnit_second+0x294>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	2230      	movs	r2, #48	; 0x30
 8001670:	701a      	strb	r2, [r3, #0]
			for(int i = 6; i < SIZE_PAGE_ASCENSOR; i++){
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	ddf4      	ble.n	8001668 <AscensorUnit_second+0x20c>
			}
			secondAscensorReport[currentFloor_second+5]='1';
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <AscensorUnit_second+0x28c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3305      	adds	r3, #5
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <AscensorUnit_second+0x294>)
 8001688:	2131      	movs	r1, #49	; 0x31
 800168a:	54d1      	strb	r1, [r2, r3]
			//CDC_Transmit_FS(secondAscensorReport, SIZE_PAGE_ASCENSOR); --->
			if(currentFloor_second == tempFloor_second){
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <AscensorUnit_second+0x28c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <AscensorUnit_second+0x288>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	429a      	cmp	r2, r3
 800169a:	d11b      	bne.n	80016d4 <AscensorUnit_second+0x278>
				for(int i = 0; i < SIZE_QUEUE; i++){
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	e011      	b.n	80016c6 <AscensorUnit_second+0x26a>
					if(queueFloor_second[i] == currentFloor_second){
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <AscensorUnit_second+0x284>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <AscensorUnit_second+0x28c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d104      	bne.n	80016c0 <AscensorUnit_second+0x264>
						queueFloor_second[i] = DEFAULT_BASE_FLOOR;
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <AscensorUnit_second+0x284>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4413      	add	r3, r2
 80016bc:	2203      	movs	r2, #3
 80016be:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < SIZE_QUEUE; i++){
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b09      	cmp	r3, #9
 80016ca:	ddea      	ble.n	80016a2 <AscensorUnit_second+0x246>
					}
				}
				secondAscensor = ABRIR_PUERTAS;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <AscensorUnit_second+0x280>)
 80016ce:	2203      	movs	r2, #3
 80016d0:	701a      	strb	r2, [r3, #0]
				//CDC_Transmit_FS(constantBufferDown, 7);
				return;
 80016d2:	e04e      	b.n	8001772 <AscensorUnit_second+0x316>
			}
			else{
				for(int i = 0; i < SIZE_QUEUE; i++){
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	e021      	b.n	800171e <AscensorUnit_second+0x2c2>
 80016da:	bf00      	nop
 80016dc:	2000036f 	.word	0x2000036f
 80016e0:	20000604 	.word	0x20000604
 80016e4:	20000003 	.word	0x20000003
 80016e8:	20000002 	.word	0x20000002
 80016ec:	200005cc 	.word	0x200005cc
 80016f0:	200005a4 	.word	0x200005a4
					if(queueFloor_second[i] == currentFloor_second){
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <AscensorUnit_second+0x320>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <AscensorUnit_second+0x324>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <AscensorUnit_second+0x2bc>
						secondAscensor = ABRIR_PUERTAS;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <AscensorUnit_second+0x328>)
 800170a:	2203      	movs	r2, #3
 800170c:	701a      	strb	r2, [r3, #0]
						queueFloor_second[i] = DEFAULT_BASE_FLOOR;
 800170e:	4a1b      	ldr	r2, [pc, #108]	; (800177c <AscensorUnit_second+0x320>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	2203      	movs	r2, #3
 8001716:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < SIZE_QUEUE; i++){
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b09      	cmp	r3, #9
 8001722:	dde7      	ble.n	80016f4 <AscensorUnit_second+0x298>
						//CDC_Transmit_FS(constantBufferDown, 7);
					}
				}
			}
			//CDC_Transmit_FS(buf, 5);
			Timers[T3] = CONST_TIME_MOVEMENT;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <AscensorUnit_second+0x32c>)
 8001726:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800172a:	60da      	str	r2, [r3, #12]
		}
		break;
 800172c:	e01c      	b.n	8001768 <AscensorUnit_second+0x30c>
	}
	case ABRIR_PUERTAS:{
		globalDoors[1] = '1';
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <AscensorUnit_second+0x330>)
 8001730:	2231      	movs	r2, #49	; 0x31
 8001732:	705a      	strb	r2, [r3, #1]
		if(Timers[TDOORS_TWO] == TIMER_FINISHED){
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <AscensorUnit_second+0x32c>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d117      	bne.n	800176c <AscensorUnit_second+0x310>
			secondAscensor = CERRAR_PUERTAS;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <AscensorUnit_second+0x328>)
 800173e:	2204      	movs	r2, #4
 8001740:	701a      	strb	r2, [r3, #0]
			Timers[TDOORS_TWO] = CONST_TIME_MOVEMENT;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <AscensorUnit_second+0x32c>)
 8001744:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001748:	621a      	str	r2, [r3, #32]
		}
		break;
 800174a:	e00f      	b.n	800176c <AscensorUnit_second+0x310>
	}
	case CERRAR_PUERTAS:{
		if(Timers[TDOORS_TWO] == TIMER_FINISHED){
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <AscensorUnit_second+0x32c>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10d      	bne.n	8001770 <AscensorUnit_second+0x314>
			secondAscensor = DETENIDO;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <AscensorUnit_second+0x328>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
			globalDoors[1] = '0';
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <AscensorUnit_second+0x330>)
 800175c:	2230      	movs	r2, #48	; 0x30
 800175e:	705a      	strb	r2, [r3, #1]
		}
		break;
 8001760:	bf00      	nop
 8001762:	e005      	b.n	8001770 <AscensorUnit_second+0x314>
		break;
 8001764:	bf00      	nop
 8001766:	e004      	b.n	8001772 <AscensorUnit_second+0x316>
		break;
 8001768:	bf00      	nop
 800176a:	e002      	b.n	8001772 <AscensorUnit_second+0x316>
		break;
 800176c:	bf00      	nop
 800176e:	e000      	b.n	8001772 <AscensorUnit_second+0x316>
		break;
 8001770:	bf00      	nop
	}
	}
}
 8001772:	372c      	adds	r7, #44	; 0x2c
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000604 	.word	0x20000604
 8001780:	20000002 	.word	0x20000002
 8001784:	2000036f 	.word	0x2000036f
 8001788:	200005cc 	.word	0x200005cc
 800178c:	200005f4 	.word	0x200005f4

08001790 <crc8>:

uint8_t crc8(uint8_t *message, uint32_t length)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	uint8_t i, j, crc = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < length; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e020      	b.n	80017e6 <crc8+0x56>
    {
    	crc ^= message[i];
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	7b7b      	ldrb	r3, [r7, #13]
 80017ae:	4053      	eors	r3, r2
 80017b0:	737b      	strb	r3, [r7, #13]
    	for (j = 0; j < 8; j++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	73bb      	strb	r3, [r7, #14]
 80017b6:	e010      	b.n	80017da <crc8+0x4a>
    	{
    		if (crc & 1)
 80017b8:	7b7b      	ldrb	r3, [r7, #13]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <crc8+0x3e>
    			crc ^= G_P;
 80017c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017c6:	f083 0307 	eor.w	r3, r3, #7
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	737b      	strb	r3, [r7, #13]
    		crc >>= 1;
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	737b      	strb	r3, [r7, #13]
    	for (j = 0; j < 8; j++)
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	3301      	adds	r3, #1
 80017d8:	73bb      	strb	r3, [r7, #14]
 80017da:	7bbb      	ldrb	r3, [r7, #14]
 80017dc:	2b07      	cmp	r3, #7
 80017de:	d9eb      	bls.n	80017b8 <crc8+0x28>
    for (i = 0; i < length; i++)
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	3301      	adds	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d8da      	bhi.n	80017a4 <crc8+0x14>
    	}
    }
    return crc;
 80017ee:	7b7b      	ldrb	r3, [r7, #13]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
	...

080017fc <PrinterUnit>:

void PrinterUnit(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
	switch(printerUnit){
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <PrinterUnit+0xd8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d049      	beq.n	80018a0 <PrinterUnit+0xa4>
 800180c:	2b02      	cmp	r3, #2
 800180e:	d04f      	beq.n	80018b0 <PrinterUnit+0xb4>
 8001810:	2b00      	cmp	r3, #0
 8001812:	d000      	beq.n	8001816 <PrinterUnit+0x1a>
			CDC_Transmit_FS(dataReport, SIZE_DATA_REPORT);
			printerUnit = WAIT_INFO;
		}
	}
	}
}
 8001814:	e059      	b.n	80018ca <PrinterUnit+0xce>
		for(int i = 0; i < SIZE_PAGE_ASCENSOR; i++)
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e00c      	b.n	8001836 <PrinterUnit+0x3a>
			dataReport[i] = firstAscensorReport[i];
 800181c:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <PrinterUnit+0xdc>)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <PrinterUnit+0xe0>)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	460a      	mov	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < SIZE_PAGE_ASCENSOR; i++)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	ddef      	ble.n	800181c <PrinterUnit+0x20>
		for(int i = SIZE_PAGE_ASCENSOR; i < SIZE_PAGE_ASCENSOR*2; i++)
 800183c:	2310      	movs	r3, #16
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	e00c      	b.n	800185c <PrinterUnit+0x60>
			dataReport[i] = secondAscensorReport[i-SIZE_PAGE_ASCENSOR];
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3b10      	subs	r3, #16
 8001846:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <PrinterUnit+0xe4>)
 8001848:	5cd3      	ldrb	r3, [r2, r3]
 800184a:	b2d9      	uxtb	r1, r3
 800184c:	4a23      	ldr	r2, [pc, #140]	; (80018dc <PrinterUnit+0xe0>)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	4413      	add	r3, r2
 8001852:	460a      	mov	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
		for(int i = SIZE_PAGE_ASCENSOR; i < SIZE_PAGE_ASCENSOR*2; i++)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3301      	adds	r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b1f      	cmp	r3, #31
 8001860:	ddef      	ble.n	8001842 <PrinterUnit+0x46>
		for(int i = SIZE_PAGE_ASCENSOR*2; i < (SIZE_DATA_REPORT); i++)
 8001862:	2320      	movs	r3, #32
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e00c      	b.n	8001882 <PrinterUnit+0x86>
			dataReport[i] = globalDoors[i-SIZE_PAGE_ASCENSOR*2];
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b20      	subs	r3, #32
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <PrinterUnit+0xe8>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	b2d9      	uxtb	r1, r3
 8001872:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <PrinterUnit+0xe0>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	460a      	mov	r2, r1
 800187a:	701a      	strb	r2, [r3, #0]
		for(int i = SIZE_PAGE_ASCENSOR*2; i < (SIZE_DATA_REPORT); i++)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3301      	adds	r3, #1
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b21      	cmp	r3, #33	; 0x21
 8001886:	ddef      	ble.n	8001868 <PrinterUnit+0x6c>
		CDC_Transmit_FS(dataReport, SIZE_DATA_REPORT);
 8001888:	2122      	movs	r1, #34	; 0x22
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <PrinterUnit+0xe0>)
 800188c:	f005 f8c4 	bl	8006a18 <CDC_Transmit_FS>
		Timers[TPRINT] = 500;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <PrinterUnit+0xec>)
 8001892:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
		printerUnit = WAIT_INFO;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <PrinterUnit+0xd8>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
		break;
 800189e:	e014      	b.n	80018ca <PrinterUnit+0xce>
		if(Timers[TPRINT] == TIMER_FINISHED){
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <PrinterUnit+0xec>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10f      	bne.n	80018c8 <PrinterUnit+0xcc>
			printerUnit = PRINTING;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <PrinterUnit+0xd8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
		break;
 80018ae:	e00b      	b.n	80018c8 <PrinterUnit+0xcc>
		if(Timers[TPRINT] == TIMER_FINISHED){
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <PrinterUnit+0xec>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d108      	bne.n	80018ca <PrinterUnit+0xce>
			CDC_Transmit_FS(dataReport, SIZE_DATA_REPORT);
 80018b8:	2122      	movs	r1, #34	; 0x22
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <PrinterUnit+0xe0>)
 80018bc:	f005 f8ac 	bl	8006a18 <CDC_Transmit_FS>
			printerUnit = WAIT_INFO;
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <PrinterUnit+0xd8>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	e000      	b.n	80018ca <PrinterUnit+0xce>
		break;
 80018c8:	bf00      	nop
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000370 	.word	0x20000370
 80018d8:	20000678 	.word	0x20000678
 80018dc:	20000650 	.word	0x20000650
 80018e0:	200005a4 	.word	0x200005a4
 80018e4:	200005f4 	.word	0x200005f4
 80018e8:	200005cc 	.word	0x200005cc

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of ERROR_UNIT occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_MspInit+0x5c>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_MspInit+0x5c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6193      	str	r3, [r2, #24]
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_MspInit+0x5c>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_MspInit+0x5c>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_MspInit+0x5c>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_MspInit+0x5c>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_MspInit+0x60>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_MspInit+0x60>)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d113      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_TIM_Base_MspInit+0x44>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_TIM_Base_MspInit+0x44>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_TIM_Base_MspInit+0x44>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	201c      	movs	r0, #28
 800198c:	f000 fa07 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001990:	201c      	movs	r0, #28
 8001992:	f000 fa20 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <HardFault_Handler+0x4>

080019b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <MemManage_Handler+0x4>

080019bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <BusFault_Handler+0x4>

080019c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <UsageFault_Handler+0x4>

080019c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 f8e2 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019fe:	f000 fc96 	bl	800232e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000f50 	.word	0x20000f50

08001a0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM2_IRQHandler+0x10>)
 8001a12:	f001 ff55 	bl	80038c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000610 	.word	0x20000610

08001a20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x50>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x16>
		heap_end = &end;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <_sbrk+0x50>)
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <_sbrk+0x54>)
 8001a34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <_sbrk+0x50>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <_sbrk+0x50>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	466a      	mov	r2, sp
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d907      	bls.n	8001a5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a4a:	f005 fbb7 	bl	80071bc <__errno>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	230c      	movs	r3, #12
 8001a52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	e006      	b.n	8001a68 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <_sbrk+0x50>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <_sbrk+0x50>)
 8001a64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000374 	.word	0x20000374
 8001a74:	200011c0 	.word	0x200011c0

08001a78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <SystemInit+0x5c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <SystemInit+0x5c>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <SystemInit+0x5c>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4911      	ldr	r1, [pc, #68]	; (8001ad4 <SystemInit+0x5c>)
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <SystemInit+0x60>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <SystemInit+0x5c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <SystemInit+0x5c>)
 8001a9a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <SystemInit+0x5c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <SystemInit+0x5c>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <SystemInit+0x5c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <SystemInit+0x5c>)
 8001ab6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001aba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SystemInit+0x5c>)
 8001abe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ac2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SystemInit+0x64>)
 8001ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aca:	609a      	str	r2, [r3, #8]
#endif 
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	f8ff0000 	.word	0xf8ff0000
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ae0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ae2:	e003      	b.n	8001aec <LoopCopyDataInit>

08001ae4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ae6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ae8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001aea:	3104      	adds	r1, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001af0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001af2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001af4:	d3f6      	bcc.n	8001ae4 <CopyDataInit>
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001af8:	e002      	b.n	8001b00 <LoopFillZerobss>

08001afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001afc:	f842 3b04 	str.w	r3, [r2], #4

08001b00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b04:	d3f9      	bcc.n	8001afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b06:	f7ff ffb7 	bl	8001a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f005 fb5d 	bl	80071c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b0e:	f7fe ffbb 	bl	8000a88 <main>
  bx lr
 8001b12:	4770      	bx	lr
  ldr r3, =_sidata
 8001b14:	08008f08 	.word	0x08008f08
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b1c:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 8001b20:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 8001b24:	200011c0 	.word	0x200011c0

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x28>)
 8001b36:	f043 0310 	orr.w	r3, r3, #16
 8001b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f923 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fed6 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f93b 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f903 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_IncTick+0x1c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	2000000c 	.word	0x2000000c
 8001bd8:	20000688 	.word	0x20000688

08001bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <HAL_GetTick+0x10>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000688 	.word	0x20000688

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4906      	ldr	r1, [pc, #24]	; (8001c88 <__NVIC_EnableIRQ+0x34>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff90 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff2d 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff42 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff35 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b08b      	sub	sp, #44	; 0x2c
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e127      	b.n	8002070 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e20:	2201      	movs	r2, #1
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 8116 	bne.w	800206a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d034      	beq.n	8001eb0 <HAL_GPIO_Init+0xa4>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d80d      	bhi.n	8001e66 <HAL_GPIO_Init+0x5a>
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d02b      	beq.n	8001ea6 <HAL_GPIO_Init+0x9a>
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d804      	bhi.n	8001e5c <HAL_GPIO_Init+0x50>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d031      	beq.n	8001eba <HAL_GPIO_Init+0xae>
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d01c      	beq.n	8001e94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e5a:	e048      	b.n	8001eee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d043      	beq.n	8001ee8 <HAL_GPIO_Init+0xdc>
 8001e60:	2b11      	cmp	r3, #17
 8001e62:	d01b      	beq.n	8001e9c <HAL_GPIO_Init+0x90>
          break;
 8001e64:	e043      	b.n	8001eee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e66:	4a89      	ldr	r2, [pc, #548]	; (800208c <HAL_GPIO_Init+0x280>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d026      	beq.n	8001eba <HAL_GPIO_Init+0xae>
 8001e6c:	4a87      	ldr	r2, [pc, #540]	; (800208c <HAL_GPIO_Init+0x280>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d806      	bhi.n	8001e80 <HAL_GPIO_Init+0x74>
 8001e72:	4a87      	ldr	r2, [pc, #540]	; (8002090 <HAL_GPIO_Init+0x284>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d020      	beq.n	8001eba <HAL_GPIO_Init+0xae>
 8001e78:	4a86      	ldr	r2, [pc, #536]	; (8002094 <HAL_GPIO_Init+0x288>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01d      	beq.n	8001eba <HAL_GPIO_Init+0xae>
          break;
 8001e7e:	e036      	b.n	8001eee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e80:	4a85      	ldr	r2, [pc, #532]	; (8002098 <HAL_GPIO_Init+0x28c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d019      	beq.n	8001eba <HAL_GPIO_Init+0xae>
 8001e86:	4a85      	ldr	r2, [pc, #532]	; (800209c <HAL_GPIO_Init+0x290>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d016      	beq.n	8001eba <HAL_GPIO_Init+0xae>
 8001e8c:	4a84      	ldr	r2, [pc, #528]	; (80020a0 <HAL_GPIO_Init+0x294>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0xae>
          break;
 8001e92:	e02c      	b.n	8001eee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e028      	b.n	8001eee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e023      	b.n	8001eee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	3308      	adds	r3, #8
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e01e      	b.n	8001eee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e019      	b.n	8001eee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e012      	b.n	8001eee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	611a      	str	r2, [r3, #16]
          break;
 8001eda:	e008      	b.n	8001eee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001edc:	2308      	movs	r3, #8
 8001ede:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	615a      	str	r2, [r3, #20]
          break;
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
          break;
 8001eec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2bff      	cmp	r3, #255	; 0xff
 8001ef2:	d801      	bhi.n	8001ef8 <HAL_GPIO_Init+0xec>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	e001      	b.n	8001efc <HAL_GPIO_Init+0xf0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3304      	adds	r3, #4
 8001efc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2bff      	cmp	r3, #255	; 0xff
 8001f02:	d802      	bhi.n	8001f0a <HAL_GPIO_Init+0xfe>
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x104>
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	3b08      	subs	r3, #8
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	210f      	movs	r1, #15
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	401a      	ands	r2, r3
 8001f22:	6a39      	ldr	r1, [r7, #32]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8096 	beq.w	800206a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f3e:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_GPIO_Init+0x298>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_GPIO_Init+0x298>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6193      	str	r3, [r2, #24]
 8001f4a:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_GPIO_Init+0x298>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f56:	4a54      	ldr	r2, [pc, #336]	; (80020a8 <HAL_GPIO_Init+0x29c>)
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_GPIO_Init+0x2a0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x19e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	; (80020b0 <HAL_GPIO_Init+0x2a4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_GPIO_Init+0x19a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a49      	ldr	r2, [pc, #292]	; (80020b4 <HAL_GPIO_Init+0x2a8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x196>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a48      	ldr	r2, [pc, #288]	; (80020b8 <HAL_GPIO_Init+0x2ac>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_GPIO_Init+0x192>
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x1a0>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	e004      	b.n	8001fac <HAL_GPIO_Init+0x1a0>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_Init+0x1a0>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x1a0>
 8001faa:	2300      	movs	r3, #0
 8001fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fbc:	493a      	ldr	r1, [pc, #232]	; (80020a8 <HAL_GPIO_Init+0x29c>)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4938      	ldr	r1, [pc, #224]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4933      	ldr	r1, [pc, #204]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	492e      	ldr	r1, [pc, #184]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
 800200a:	e006      	b.n	800201a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	43db      	mvns	r3, r3
 8002014:	4929      	ldr	r1, [pc, #164]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002016:	4013      	ands	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	4924      	ldr	r1, [pc, #144]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
 8002032:	e006      	b.n	8002042 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	43db      	mvns	r3, r3
 800203c:	491f      	ldr	r1, [pc, #124]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 800203e:	4013      	ands	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	491a      	ldr	r1, [pc, #104]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	60cb      	str	r3, [r1, #12]
 800205a:	e006      	b.n	800206a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	43db      	mvns	r3, r3
 8002064:	4915      	ldr	r1, [pc, #84]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002066:	4013      	ands	r3, r2
 8002068:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	3301      	adds	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	f47f aed0 	bne.w	8001e20 <HAL_GPIO_Init+0x14>
  }
}
 8002080:	bf00      	nop
 8002082:	372c      	adds	r7, #44	; 0x2c
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	10210000 	.word	0x10210000
 8002090:	10110000 	.word	0x10110000
 8002094:	10120000 	.word	0x10120000
 8002098:	10310000 	.word	0x10310000
 800209c:	10320000 	.word	0x10320000
 80020a0:	10220000 	.word	0x10220000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40011400 	.word	0x40011400
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	041a      	lsls	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800210e:	e002      	b.n	8002116 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002110:	887a      	ldrh	r2, [r7, #2]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af06      	add	r7, sp, #24
 8002126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0d3      	b.n	80022da <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f004 fd9a 	bl	8006c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f001 ff0a 	bl	8003f72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	687e      	ldr	r6, [r7, #4]
 8002166:	466d      	mov	r5, sp
 8002168:	f106 0410 	add.w	r4, r6, #16
 800216c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	602b      	str	r3, [r5, #0]
 8002174:	1d33      	adds	r3, r6, #4
 8002176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f001 fed3 	bl	8003f24 <USB_CoreInit>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0a4      	b.n	80022da <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f001 ff07 	bl	8003faa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e035      	b.n	800220e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	015b      	lsls	r3, r3, #5
 80021a8:	4413      	add	r3, r2
 80021aa:	3329      	adds	r3, #41	; 0x29
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	015b      	lsls	r3, r3, #5
 80021b6:	4413      	add	r3, r2
 80021b8:	3328      	adds	r3, #40	; 0x28
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	b291      	uxth	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	015b      	lsls	r3, r3, #5
 80021c8:	4413      	add	r3, r2
 80021ca:	3336      	adds	r3, #54	; 0x36
 80021cc:	460a      	mov	r2, r1
 80021ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	015b      	lsls	r3, r3, #5
 80021d6:	4413      	add	r3, r2
 80021d8:	332b      	adds	r3, #43	; 0x2b
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	015b      	lsls	r3, r3, #5
 80021e4:	4413      	add	r3, r2
 80021e6:	3338      	adds	r3, #56	; 0x38
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	015b      	lsls	r3, r3, #5
 80021f2:	4413      	add	r3, r2
 80021f4:	333c      	adds	r3, #60	; 0x3c
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	3302      	adds	r3, #2
 8002200:	015b      	lsls	r3, r3, #5
 8002202:	4413      	add	r3, r2
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3301      	adds	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d3c4      	bcc.n	80021a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e031      	b.n	8002282 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	015b      	lsls	r3, r3, #5
 8002224:	4413      	add	r3, r2
 8002226:	f203 1329 	addw	r3, r3, #297	; 0x129
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	015b      	lsls	r3, r3, #5
 8002234:	4413      	add	r3, r2
 8002236:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	015b      	lsls	r3, r3, #5
 8002244:	4413      	add	r3, r2
 8002246:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	4413      	add	r3, r2
 8002256:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	015b      	lsls	r3, r3, #5
 8002264:	4413      	add	r3, r2
 8002266:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	330a      	adds	r3, #10
 8002274:	015b      	lsls	r3, r3, #5
 8002276:	4413      	add	r3, r2
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3301      	adds	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	d3c8      	bcc.n	800221e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	687e      	ldr	r6, [r7, #4]
 8002294:	466d      	mov	r5, sp
 8002296:	f106 0410 	add.w	r4, r6, #16
 800229a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	602b      	str	r3, [r5, #0]
 80022a2:	1d33      	adds	r3, r6, #4
 80022a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a6:	6838      	ldr	r0, [r7, #0]
 80022a8:	f001 fe8b 	bl	8003fc2 <USB_DevInit>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2202      	movs	r2, #2
 80022b6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00d      	b.n	80022da <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fec9 	bl	800506a <USB_DevDisconnect>

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_PCD_Start+0x16>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e016      	b.n	8002326 <HAL_PCD_Start+0x44>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002300:	2101      	movs	r1, #1
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f004 ff23 	bl	800714e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fea2 	bl	8005056 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f001 fe14 	bl	8003f44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fe9f 	bl	800507e <USB_ReadInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234a:	d102      	bne.n	8002352 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 faf3 	bl	8002938 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f002 fe91 	bl	800507e <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002366:	d112      	bne.n	800238e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237a:	b292      	uxth	r2, r2
 800237c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f004 fcf2 	bl	8006d6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002386:	2100      	movs	r1, #0
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f8de 	bl	800254a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fe73 	bl	800507e <USB_ReadInterrupts>
 8002398:	4603      	mov	r3, r0
 800239a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a2:	d10b      	bne.n	80023bc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023b6:	b292      	uxth	r2, r2
 80023b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fe5c 	bl	800507e <USB_ReadInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d0:	d10b      	bne.n	80023ea <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e4:	b292      	uxth	r2, r2
 80023e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fe45 	bl	800507e <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fe:	d126      	bne.n	800244e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	b292      	uxth	r2, r2
 8002414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0208 	bic.w	r2, r2, #8
 800242a:	b292      	uxth	r2, r2
 800242c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f004 fcd3 	bl	8006ddc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002448:	b292      	uxth	r2, r2
 800244a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fe13 	bl	800507e <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002462:	d13d      	bne.n	80024e0 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0208 	orr.w	r2, r2, #8
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	b292      	uxth	r2, r2
 8002490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0204 	orr.w	r2, r2, #4
 80024a6:	b292      	uxth	r2, r2
 80024a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 fde4 	bl	800507e <USB_ReadInterrupts>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c0:	d10b      	bne.n	80024da <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024d4:	b292      	uxth	r2, r2
 80024d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f004 fc64 	bl	8006da8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 fdca 	bl	800507e <USB_ReadInterrupts>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d10e      	bne.n	8002514 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002508:	b292      	uxth	r2, r2
 800250a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f004 fc1d 	bl	8006d4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f002 fdb0 	bl	800507e <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002528:	d10b      	bne.n	8002542 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002532:	b29a      	uxth	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253c:	b292      	uxth	r2, r2
 800253e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_PCD_SetAddress+0x1a>
 8002560:	2302      	movs	r3, #2
 8002562:	e013      	b.n	800258c <HAL_PCD_SetAddress+0x42>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fd57 	bl	8005030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	70fb      	strb	r3, [r7, #3]
 80025a6:	460b      	mov	r3, r1
 80025a8:	803b      	strh	r3, [r7, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da0b      	bge.n	80025d2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	015b      	lsls	r3, r3, #5
 80025c2:	3328      	adds	r3, #40	; 0x28
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	705a      	strb	r2, [r3, #1]
 80025d0:	e00b      	b.n	80025ea <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	015b      	lsls	r3, r3, #5
 80025da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025f6:	883a      	ldrh	r2, [r7, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	78ba      	ldrb	r2, [r7, #2]
 8002600:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002614:	78bb      	ldrb	r3, [r7, #2]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d102      	bne.n	8002620 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_PCD_EP_Open+0x9a>
 800262a:	2302      	movs	r3, #2
 800262c:	e00e      	b.n	800264c <HAL_PCD_EP_Open+0xb8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68f9      	ldr	r1, [r7, #12]
 800263c:	4618      	mov	r0, r3
 800263e:	f001 fce5 	bl	800400c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800264a:	7afb      	ldrb	r3, [r7, #11]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002664:	2b00      	cmp	r3, #0
 8002666:	da0b      	bge.n	8002680 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	015b      	lsls	r3, r3, #5
 8002670:	3328      	adds	r3, #40	; 0x28
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	705a      	strb	r2, [r3, #1]
 800267e:	e00b      	b.n	8002698 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	015b      	lsls	r3, r3, #5
 8002688:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_EP_Close+0x5e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e00e      	b.n	80026d0 <HAL_PCD_EP_Close+0x7c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 ff91 	bl	80045e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	015b      	lsls	r3, r3, #5
 80026f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2200      	movs	r2, #0
 800270a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2200      	movs	r2, #0
 8002710:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002712:	7afb      	ldrb	r3, [r7, #11]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	b2da      	uxtb	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6979      	ldr	r1, [r7, #20]
 800272e:	4618      	mov	r0, r3
 8002730:	f002 f8f0 	bl	8004914 <USB_EPStartXfer>
 8002734:	e005      	b.n	8002742 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6979      	ldr	r1, [r7, #20]
 800273c:	4618      	mov	r0, r3
 800273e:	f002 f8e9 	bl	8004914 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	330a      	adds	r3, #10
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	4413      	add	r3, r2
 8002766:	3304      	adds	r3, #4
 8002768:	681b      	ldr	r3, [r3, #0]
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	015b      	lsls	r3, r3, #5
 800278c:	3328      	adds	r3, #40	; 0x28
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2201      	movs	r2, #1
 80027aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027b8:	7afb      	ldrb	r3, [r7, #11]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6979      	ldr	r1, [r7, #20]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 f8a3 	bl	8004914 <USB_EPStartXfer>
 80027ce:	e005      	b.n	80027dc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6979      	ldr	r1, [r7, #20]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 f89c 	bl	8004914 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	f003 0207 	and.w	r2, r3, #7
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d901      	bls.n	8002804 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e046      	b.n	8002892 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da0b      	bge.n	8002824 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	015b      	lsls	r3, r3, #5
 8002814:	3328      	adds	r3, #40	; 0x28
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	705a      	strb	r2, [r3, #1]
 8002822:	e009      	b.n	8002838 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	015b      	lsls	r3, r3, #5
 8002828:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_PCD_EP_SetStall+0x72>
 8002854:	2302      	movs	r3, #2
 8002856:	e01c      	b.n	8002892 <HAL_PCD_EP_SetStall+0xac>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fb0c 	bl	8004e84 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f002 fc0a 	bl	800509c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 020f 	and.w	r2, r3, #15
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d901      	bls.n	80028b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e03a      	b.n	800292e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	da0b      	bge.n	80028d8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	3328      	adds	r3, #40	; 0x28
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	705a      	strb	r2, [r3, #1]
 80028d6:	e00b      	b.n	80028f0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_PCD_EP_ClrStall+0x76>
 800290c:	2302      	movs	r3, #2
 800290e:	e00e      	b.n	800292e <HAL_PCD_EP_ClrStall+0x94>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68f9      	ldr	r1, [r7, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	f002 faf2 	bl	8004f08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002940:	e282      	b.n	8002e48 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800294a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800294c:	8afb      	ldrh	r3, [r7, #22]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002956:	7d7b      	ldrb	r3, [r7, #21]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 8142 	bne.w	8002be2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800295e:	8afb      	ldrh	r3, [r7, #22]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d151      	bne.n	8002a0c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002978:	b29c      	uxth	r4, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002986:	b29b      	uxth	r3, r3
 8002988:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3328      	adds	r3, #40	; 0x28
 800298e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	3302      	adds	r3, #2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	441a      	add	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029ca:	2100      	movs	r1, #0
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f004 f9a7 	bl	8006d20 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8234 	beq.w	8002e48 <PCD_EP_ISR_Handler+0x510>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 822f 	bne.w	8002e48 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b292      	uxth	r2, r2
 80029fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a0a:	e21d      	b.n	8002e48 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a12:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a1c:	8a7b      	ldrh	r3, [r7, #18]
 8002a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d033      	beq.n	8002a8e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3306      	adds	r3, #6
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f002 fb68 	bl	800513a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a76:	4013      	ands	r3, r2
 8002a78:	b29c      	uxth	r4, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002a82:	b292      	uxth	r2, r2
 8002a84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f004 f920 	bl	8006ccc <HAL_PCD_SetupStageCallback>
 8002a8c:	e1dc      	b.n	8002e48 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f280 81d8 	bge.w	8002e48 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	b29c      	uxth	r4, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002ab0:	b292      	uxth	r2, r2
 8002ab2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3306      	adds	r3, #6
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d019      	beq.n	8002b1c <PCD_EP_ISR_Handler+0x1e4>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d015      	beq.n	8002b1c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6959      	ldr	r1, [r3, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f002 fb1a 	bl	800513a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	441a      	add	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b14:	2100      	movs	r1, #0
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f004 f8ea 	bl	8006cf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461c      	mov	r4, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	441c      	add	r4, r3
 8002b2e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002b32:	461c      	mov	r4, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10e      	bne.n	8002b5a <PCD_EP_ISR_Handler+0x222>
 8002b3c:	8823      	ldrh	r3, [r4, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	8023      	strh	r3, [r4, #0]
 8002b48:	8823      	ldrh	r3, [r4, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	8023      	strh	r3, [r4, #0]
 8002b58:	e02d      	b.n	8002bb6 <PCD_EP_ISR_Handler+0x27e>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b60:	d812      	bhi.n	8002b88 <PCD_EP_ISR_Handler+0x250>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <PCD_EP_ISR_Handler+0x244>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	029b      	lsls	r3, r3, #10
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	8023      	strh	r3, [r4, #0]
 8002b86:	e016      	b.n	8002bb6 <PCD_EP_ISR_Handler+0x27e>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <PCD_EP_ISR_Handler+0x26a>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc6:	b29c      	uxth	r4, r3
 8002bc8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002bcc:	b29c      	uxth	r4, r3
 8002bce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002bd2:	b29c      	uxth	r4, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4ba2      	ldr	r3, [pc, #648]	; (8002e64 <PCD_EP_ISR_Handler+0x52c>)
 8002bda:	4323      	orrs	r3, r4
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	8013      	strh	r3, [r2, #0]
 8002be0:	e132      	b.n	8002e48 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	7d7b      	ldrb	r3, [r7, #21]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f280 80d1 	bge.w	8002d9e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	7d7b      	ldrb	r3, [r7, #21]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c10:	4013      	ands	r3, r2
 8002c12:	b29c      	uxth	r4, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	7d7b      	ldrb	r3, [r7, #21]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002c24:	b292      	uxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c28:	7d7b      	ldrb	r3, [r7, #21]
 8002c2a:	015b      	lsls	r3, r3, #5
 8002c2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	7b1b      	ldrb	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d121      	bne.n	8002c82 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	3306      	adds	r3, #6
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c66:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002c68:	8bfb      	ldrh	r3, [r7, #30]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d072      	beq.n	8002d54 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6959      	ldr	r1, [r3, #20]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88da      	ldrh	r2, [r3, #6]
 8002c7a:	8bfb      	ldrh	r3, [r7, #30]
 8002c7c:	f002 fa5d 	bl	800513a <USB_ReadPMA>
 8002c80:	e068      	b.n	8002d54 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d021      	beq.n	8002ce0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002cc6:	8bfb      	ldrh	r3, [r7, #30]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02a      	beq.n	8002d22 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6959      	ldr	r1, [r3, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	891a      	ldrh	r2, [r3, #8]
 8002cd8:	8bfb      	ldrh	r3, [r7, #30]
 8002cda:	f002 fa2e 	bl	800513a <USB_ReadPMA>
 8002cde:	e020      	b.n	8002d22 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3306      	adds	r3, #6
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d08:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002d0a:	8bfb      	ldrh	r3, [r7, #30]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6959      	ldr	r1, [r3, #20]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	895a      	ldrh	r2, [r3, #10]
 8002d1c:	8bfb      	ldrh	r3, [r7, #30]
 8002d1e:	f002 fa0c 	bl	800513a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3c:	b29c      	uxth	r4, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	441a      	add	r2, r3
 8002d4c:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <PCD_EP_ISR_Handler+0x530>)
 8002d4e:	4323      	orrs	r3, r4
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	8bfb      	ldrh	r3, [r7, #30]
 8002d5a:	441a      	add	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	8bfb      	ldrh	r3, [r7, #30]
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <PCD_EP_ISR_Handler+0x446>
 8002d74:	8bfa      	ldrh	r2, [r7, #30]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d206      	bcs.n	8002d8c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f003 ffb3 	bl	8006cf0 <HAL_PCD_DataOutStageCallback>
 8002d8a:	e008      	b.n	8002d9e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	7819      	ldrb	r1, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fc9d 	bl	80026d8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d9e:	8a7b      	ldrh	r3, [r7, #18]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d04f      	beq.n	8002e48 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002da8:	7d7b      	ldrb	r3, [r7, #21]
 8002daa:	015b      	lsls	r3, r3, #5
 8002dac:	3328      	adds	r3, #40	; 0x28
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	7d7b      	ldrb	r3, [r7, #21]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dcc:	b29c      	uxth	r4, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	7d7b      	ldrb	r3, [r7, #21]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f003 ff76 	bl	8006d20 <HAL_PCD_DataInStageCallback>
 8002e34:	e008      	b.n	8002e48 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	7819      	ldrb	r1, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fc96 	bl	8002774 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f6ff ad74 	blt.w	8002942 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3724      	adds	r7, #36	; 0x24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	ffff8080 	.word	0xffff8080
 8002e68:	ffff80c0 	.word	0xffff80c0

08002e6c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	897b      	ldrh	r3, [r7, #10]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	015b      	lsls	r3, r3, #5
 8002e92:	3328      	adds	r3, #40	; 0x28
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e006      	b.n	8002eaa <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e9c:	897b      	ldrh	r3, [r7, #10]
 8002e9e:	015b      	lsls	r3, r3, #5
 8002ea0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eaa:	893b      	ldrh	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	80da      	strh	r2, [r3, #6]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e26c      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8087 	beq.w	8003012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f04:	4b92      	ldr	r3, [pc, #584]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d00c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f10:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d112      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5e>
 8002f1c:	4b8c      	ldr	r3, [pc, #560]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d10b      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2a:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d06c      	beq.n	8003010 <HAL_RCC_OscConfig+0x12c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d168      	bne.n	8003010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e246      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x76>
 8002f4c:	4b80      	ldr	r3, [pc, #512]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a7f      	ldr	r2, [pc, #508]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e02e      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x98>
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7a      	ldr	r2, [pc, #488]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b78      	ldr	r3, [pc, #480]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a77      	ldr	r2, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xbc>
 8002f86:	4b72      	ldr	r3, [pc, #456]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a71      	ldr	r2, [pc, #452]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6e      	ldr	r2, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002fa0:	4b6b      	ldr	r3, [pc, #428]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6a      	ldr	r2, [pc, #424]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b68      	ldr	r3, [pc, #416]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a67      	ldr	r2, [pc, #412]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fe0c 	bl	8001bdc <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fe08 	bl	8001bdc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1fa      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe4>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fdf8 	bl	8001bdc <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fdf4 	bl	8001bdc <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1e6      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	4b53      	ldr	r3, [pc, #332]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x10c>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d063      	beq.n	80030e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800301e:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d11c      	bne.n	8003070 <HAL_RCC_OscConfig+0x18c>
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	4b43      	ldr	r3, [pc, #268]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_RCC_OscConfig+0x176>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e1ba      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4939      	ldr	r1, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	e03a      	b.n	80030e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fdad 	bl	8001bdc <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003086:	f7fe fda9 	bl	8001bdc <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e19b      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4927      	ldr	r1, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
 80030b8:	e015      	b.n	80030e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fd8c 	bl	8001bdc <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fd88 	bl	8001bdc <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e17a      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03a      	beq.n	8003168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d019      	beq.n	800312e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_RCC_OscConfig+0x274>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7fe fd6c 	bl	8001bdc <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003108:	f7fe fd68 	bl	8001bdc <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e15a      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003126:	2001      	movs	r0, #1
 8003128:	f000 faa8 	bl	800367c <RCC_Delay>
 800312c:	e01c      	b.n	8003168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_OscConfig+0x274>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003134:	f7fe fd52 	bl	8001bdc <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313a:	e00f      	b.n	800315c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313c:	f7fe fd4e 	bl	8001bdc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d908      	bls.n	800315c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e140      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	42420000 	.word	0x42420000
 8003158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	4b9e      	ldr	r3, [pc, #632]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e9      	bne.n	800313c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a6 	beq.w	80032c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b97      	ldr	r3, [pc, #604]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10d      	bne.n	80031a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	4b94      	ldr	r3, [pc, #592]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4a93      	ldr	r2, [pc, #588]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	61d3      	str	r3, [r2, #28]
 8003192:	4b91      	ldr	r3, [pc, #580]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d118      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b8b      	ldr	r3, [pc, #556]	; (80033dc <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a8a      	ldr	r2, [pc, #552]	; (80033dc <HAL_RCC_OscConfig+0x4f8>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fd0f 	bl	8001bdc <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fe fd0b 	bl	8001bdc <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b64      	cmp	r3, #100	; 0x64
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e0fd      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d4:	4b81      	ldr	r3, [pc, #516]	; (80033dc <HAL_RCC_OscConfig+0x4f8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x312>
 80031e8:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4a7a      	ldr	r2, [pc, #488]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6213      	str	r3, [r2, #32]
 80031f4:	e02d      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x334>
 80031fe:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a75      	ldr	r2, [pc, #468]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b73      	ldr	r3, [pc, #460]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a72      	ldr	r2, [pc, #456]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	e01c      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d10c      	bne.n	800323a <HAL_RCC_OscConfig+0x356>
 8003220:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a6c      	ldr	r2, [pc, #432]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	e00b      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a66      	ldr	r2, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a63      	ldr	r2, [pc, #396]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d015      	beq.n	8003286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fe fcbf 	bl	8001bdc <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe fcbb 	bl	8001bdc <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0ab      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0ee      	beq.n	8003262 <HAL_RCC_OscConfig+0x37e>
 8003284:	e014      	b.n	80032b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fe fca9 	bl	8001bdc <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fe fca5 	bl	8001bdc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e095      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ee      	bne.n	800328e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b6:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8081 	beq.w	80033ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032cc:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d061      	beq.n	800339c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d146      	bne.n	800336e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_RCC_OscConfig+0x4fc>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fe fc79 	bl	8001bdc <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe fc75 	bl	8001bdc <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e067      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f0      	bne.n	80032ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d108      	bne.n	8003328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003316:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	492d      	ldr	r1, [pc, #180]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a19      	ldr	r1, [r3, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	430b      	orrs	r3, r1
 800333a:	4927      	ldr	r1, [pc, #156]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_RCC_OscConfig+0x4fc>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe fc49 	bl	8001bdc <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe fc45 	bl	8001bdc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e037      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x46a>
 800336c:	e02f      	b.n	80033ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_RCC_OscConfig+0x4fc>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fc32 	bl	8001bdc <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe fc2e 	bl	8001bdc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e020      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x498>
 800339a:	e018      	b.n	80033ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e013      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42420060 	.word	0x42420060

080033e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0d0      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d910      	bls.n	8003428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4965      	ldr	r1, [pc, #404]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800344a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d040      	beq.n	8003504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d115      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e073      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06b      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4936      	ldr	r1, [pc, #216]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d4:	f7fe fb82 	bl	8001bdc <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034dc:	f7fe fb7e 	bl	8001bdc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e053      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 020c 	and.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	429a      	cmp	r2, r3
 8003502:	d1eb      	bne.n	80034dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d210      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0207 	bic.w	r2, r3, #7
 800351a:	4922      	ldr	r1, [pc, #136]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003572:	f000 f821 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003576:	4601      	mov	r1, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	fa21 f303 	lsr.w	r3, r1, r3
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1cc>)
 800358c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fae0 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40022000 	.word	0x40022000
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08008cc4 	.word	0x08008cc4
 80035b0:	20000004 	.word	0x20000004
 80035b4:	20000008 	.word	0x20000008

080035b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	b490      	push	{r4, r7}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035be:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035c0:	1d3c      	adds	r4, r7, #4
 80035c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035e2:	4b23      	ldr	r3, [pc, #140]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x40>
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x46>
 80035f6:	e02d      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035fa:	623b      	str	r3, [r7, #32]
      break;
 80035fc:	e02d      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	0c9b      	lsrs	r3, r3, #18
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800360a:	4413      	add	r3, r2
 800360c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003610:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0c5b      	lsrs	r3, r3, #17
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800362a:	4413      	add	r3, r2
 800362c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003630:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003636:	fb02 f203 	mul.w	r2, r2, r3
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	e004      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	623b      	str	r3, [r7, #32]
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003656:	623b      	str	r3, [r7, #32]
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	6a3b      	ldr	r3, [r7, #32]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc90      	pop	{r4, r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	08008c68 	.word	0x08008c68
 800366c:	08008c78 	.word	0x08008c78
 8003670:	40021000 	.word	0x40021000
 8003674:	007a1200 	.word	0x007a1200
 8003678:	003d0900 	.word	0x003d0900

0800367c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <RCC_Delay+0x34>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <RCC_Delay+0x38>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a5b      	lsrs	r3, r3, #9
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003698:	bf00      	nop
  }
  while (Delay --);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1e5a      	subs	r2, r3, #1
 800369e:	60fa      	str	r2, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f9      	bne.n	8003698 <RCC_Delay+0x1c>
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000004 	.word	0x20000004
 80036b4:	10624dd3 	.word	0x10624dd3

080036b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d07d      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d8:	4b4f      	ldr	r3, [pc, #316]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10d      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ee:	61d3      	str	r3, [r2, #28]
 80036f0:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d118      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a42      	ldr	r2, [pc, #264]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003718:	f7fe fa60 	bl	8001bdc <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	e008      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003720:	f7fe fa5c 	bl	8001bdc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e06d      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	4b3a      	ldr	r3, [pc, #232]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02e      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	429a      	cmp	r2, r3
 800375a:	d027      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003766:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800376c:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d014      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe fa2b 	bl	8001bdc <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe fa27 	bl	8001bdc <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e036      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ee      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ac:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4917      	ldr	r1, [pc, #92]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037dc:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	490b      	ldr	r1, [pc, #44]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4904      	ldr	r1, [pc, #16]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
 8003820:	42420440 	.word	0x42420440

08003824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e01d      	b.n	8003872 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe f886 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f000 fa10 	bl	8003c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d122      	bne.n	800391c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d11b      	bne.n	800391c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0202 	mvn.w	r2, #2
 80038ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f9a4 	bl	8003c50 <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f997 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f9a6 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b04      	cmp	r3, #4
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0204 	mvn.w	r2, #4
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f97a 	bl	8003c50 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f96d 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f97c 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b08      	cmp	r3, #8
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0208 	mvn.w	r2, #8
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f950 	bl	8003c50 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f943 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f952 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d122      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0210 	mvn.w	r2, #16
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2208      	movs	r2, #8
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f926 	bl	8003c50 <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f919 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f928 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d10e      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d107      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0201 	mvn.w	r2, #1
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd f9bc 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b80      	cmp	r3, #128	; 0x80
 8003a50:	d10e      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d107      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa51 	bl	8003f12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d10e      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8ec 	bl	8003c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d107      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0220 	mvn.w	r2, #32
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa1c 	bl	8003f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIM_ConfigClockSource+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0a6      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x166>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d067      	beq.n	8003bf0 <HAL_TIM_ConfigClockSource+0x120>
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d80b      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x6c>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d073      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x140>
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d802      	bhi.n	8003b32 <HAL_TIM_ConfigClockSource+0x62>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d06f      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b30:	e078      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d06c      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x140>
 8003b36:	2b30      	cmp	r3, #48	; 0x30
 8003b38:	d06a      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b3a:	e073      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b3c:	2b70      	cmp	r3, #112	; 0x70
 8003b3e:	d00d      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x8c>
 8003b40:	2b70      	cmp	r3, #112	; 0x70
 8003b42:	d804      	bhi.n	8003b4e <HAL_TIM_ConfigClockSource+0x7e>
 8003b44:	2b50      	cmp	r3, #80	; 0x50
 8003b46:	d033      	beq.n	8003bb0 <HAL_TIM_ConfigClockSource+0xe0>
 8003b48:	2b60      	cmp	r3, #96	; 0x60
 8003b4a:	d041      	beq.n	8003bd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b4c:	e06a      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	d066      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x152>
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b58:	d017      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b5a:	e063      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f000 f965 	bl	8003e3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]
      break;
 8003b88:	e04c      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f000 f94e 	bl	8003e3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bac:	609a      	str	r2, [r3, #8]
      break;
 8003bae:	e039      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f000 f8c5 	bl	8003d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2150      	movs	r1, #80	; 0x50
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f91c 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003bce:	e029      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f000 f8e3 	bl	8003da8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2160      	movs	r1, #96	; 0x60
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f90c 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003bee:	e019      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f000 f8a5 	bl	8003d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f8fc 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003c0e:	e009      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 f8f3 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003c20:	e000      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
	...

08003c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a29      	ldr	r2, [pc, #164]	; (8003d40 <TIM_Base_SetConfig+0xb8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_Base_SetConfig+0x30>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d007      	beq.n	8003cb8 <TIM_Base_SetConfig+0x30>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <TIM_Base_SetConfig+0xbc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_Base_SetConfig+0x30>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a25      	ldr	r2, [pc, #148]	; (8003d48 <TIM_Base_SetConfig+0xc0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d108      	bne.n	8003cca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <TIM_Base_SetConfig+0xb8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00b      	beq.n	8003cea <TIM_Base_SetConfig+0x62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	d007      	beq.n	8003cea <TIM_Base_SetConfig+0x62>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a19      	ldr	r2, [pc, #100]	; (8003d44 <TIM_Base_SetConfig+0xbc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <TIM_Base_SetConfig+0x62>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <TIM_Base_SetConfig+0xc0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d108      	bne.n	8003cfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <TIM_Base_SetConfig+0xb8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d103      	bne.n	8003d30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	615a      	str	r2, [r3, #20]
}
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800

08003d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0201 	bic.w	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 030a 	bic.w	r3, r3, #10
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f023 0210 	bic.w	r2, r3, #16
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	031b      	lsls	r3, r3, #12
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	621a      	str	r2, [r3, #32]
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f043 0307 	orr.w	r3, r3, #7
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b087      	sub	sp, #28
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	021a      	lsls	r2, r3, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	609a      	str	r2, [r3, #8]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e032      	b.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f24:	b084      	sub	sp, #16
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	f107 0014 	add.w	r0, r7, #20
 8003f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	b004      	add	sp, #16
 8003f42:	4770      	bx	lr

08003f44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f50:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	89fb      	ldrh	r3, [r7, #14]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f7a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f7e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	b21a      	sxth	r2, r3
 8003f8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	b21b      	sxth	r3, r3
 8003f92:	4013      	ands	r3, r2
 8003f94:	b21b      	sxth	r3, r3
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	f107 0014 	add.w	r0, r7, #20
 8003fd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ffa5 	bl	8003f44 <USB_EnableGlobalInt>

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004006:	b004      	add	sp, #16
 8004008:	4770      	bx	lr
	...

0800400c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800400c:	b490      	push	{r4, r7}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800402c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004030:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d819      	bhi.n	800406e <USB_ActivateEndpoint+0x62>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <USB_ActivateEndpoint+0x34>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004051 	.word	0x08004051
 8004044:	08004065 	.word	0x08004065
 8004048:	08004075 	.word	0x08004075
 800404c:	0800405b 	.word	0x0800405b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004050:	89bb      	ldrh	r3, [r7, #12]
 8004052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004056:	81bb      	strh	r3, [r7, #12]
      break;
 8004058:	e00d      	b.n	8004076 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800405a:	89bb      	ldrh	r3, [r7, #12]
 800405c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004060:	81bb      	strh	r3, [r7, #12]
      break;
 8004062:	e008      	b.n	8004076 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004064:	89bb      	ldrh	r3, [r7, #12]
 8004066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800406a:	81bb      	strh	r3, [r7, #12]
      break;
 800406c:	e003      	b.n	8004076 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      break;
 8004072:	e000      	b.n	8004076 <USB_ActivateEndpoint+0x6a>
      break;
 8004074:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	441a      	add	r2, r3
 8004080:	89bb      	ldrh	r3, [r7, #12]
 8004082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004092:	b29b      	uxth	r3, r3
 8004094:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4313      	orrs	r3, r2
 80040b6:	b29c      	uxth	r4, r3
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	4b8a      	ldr	r3, [pc, #552]	; (80042ec <USB_ActivateEndpoint+0x2e0>)
 80040c4:	4323      	orrs	r3, r4
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	7b1b      	ldrb	r3, [r3, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 8112 	bne.w	80042f8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d067      	beq.n	80041ac <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040dc:	687c      	ldr	r4, [r7, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	441c      	add	r4, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	4423      	add	r3, r4
 80040f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f4:	461c      	mov	r4, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	88db      	ldrh	r3, [r3, #6]
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	b29b      	uxth	r3, r3
 8004102:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29c      	uxth	r4, r3
 8004112:	4623      	mov	r3, r4
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d014      	beq.n	8004146 <USB_ActivateEndpoint+0x13a>
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	b29c      	uxth	r4, r3
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	4b6c      	ldr	r3, [pc, #432]	; (80042f0 <USB_ActivateEndpoint+0x2e4>)
 8004140:	4323      	orrs	r3, r4
 8004142:	b29b      	uxth	r3, r3
 8004144:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	78db      	ldrb	r3, [r3, #3]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d018      	beq.n	8004180 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004164:	b29c      	uxth	r4, r3
 8004166:	f084 0320 	eor.w	r3, r4, #32
 800416a:	b29c      	uxth	r4, r3
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	4b5d      	ldr	r3, [pc, #372]	; (80042ec <USB_ActivateEndpoint+0x2e0>)
 8004178:	4323      	orrs	r3, r4
 800417a:	b29b      	uxth	r3, r3
 800417c:	8013      	strh	r3, [r2, #0]
 800417e:	e22b      	b.n	80045d8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004196:	b29c      	uxth	r4, r3
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	4b52      	ldr	r3, [pc, #328]	; (80042ec <USB_ActivateEndpoint+0x2e0>)
 80041a4:	4323      	orrs	r3, r4
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	8013      	strh	r3, [r2, #0]
 80041aa:	e215      	b.n	80045d8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041ac:	687c      	ldr	r4, [r7, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	441c      	add	r4, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	4423      	add	r3, r4
 80041c0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041c4:	461c      	mov	r4, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	88db      	ldrh	r3, [r3, #6]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80041d4:	687c      	ldr	r4, [r7, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041dc:	b29b      	uxth	r3, r3
 80041de:	441c      	add	r4, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	4423      	add	r3, r4
 80041e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041ec:	461c      	mov	r4, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10e      	bne.n	8004214 <USB_ActivateEndpoint+0x208>
 80041f6:	8823      	ldrh	r3, [r4, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041fe:	b29b      	uxth	r3, r3
 8004200:	8023      	strh	r3, [r4, #0]
 8004202:	8823      	ldrh	r3, [r4, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800420a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420e:	b29b      	uxth	r3, r3
 8004210:	8023      	strh	r3, [r4, #0]
 8004212:	e02d      	b.n	8004270 <USB_ActivateEndpoint+0x264>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b3e      	cmp	r3, #62	; 0x3e
 800421a:	d812      	bhi.n	8004242 <USB_ActivateEndpoint+0x236>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <USB_ActivateEndpoint+0x22a>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	3301      	adds	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	b29b      	uxth	r3, r3
 800423a:	029b      	lsls	r3, r3, #10
 800423c:	b29b      	uxth	r3, r3
 800423e:	8023      	strh	r3, [r4, #0]
 8004240:	e016      	b.n	8004270 <USB_ActivateEndpoint+0x264>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <USB_ActivateEndpoint+0x250>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3b01      	subs	r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	b29b      	uxth	r3, r3
 8004260:	029b      	lsls	r3, r3, #10
 8004262:	b29b      	uxth	r3, r3
 8004264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426c:	b29b      	uxth	r3, r3
 800426e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29c      	uxth	r4, r3
 800427e:	4623      	mov	r3, r4
 8004280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d014      	beq.n	80042b2 <USB_ActivateEndpoint+0x2a6>
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	b29c      	uxth	r4, r3
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <USB_ActivateEndpoint+0x2e8>)
 80042ac:	4323      	orrs	r3, r4
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c8:	b29c      	uxth	r4, r3
 80042ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80042ce:	b29c      	uxth	r4, r3
 80042d0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80042d4:	b29c      	uxth	r4, r3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	441a      	add	r2, r3
 80042e0:	4b02      	ldr	r3, [pc, #8]	; (80042ec <USB_ActivateEndpoint+0x2e0>)
 80042e2:	4323      	orrs	r3, r4
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
 80042e8:	e176      	b.n	80045d8 <USB_ActivateEndpoint+0x5cc>
 80042ea:	bf00      	nop
 80042ec:	ffff8080 	.word	0xffff8080
 80042f0:	ffff80c0 	.word	0xffff80c0
 80042f4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	b29c      	uxth	r4, r3
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	4b96      	ldr	r3, [pc, #600]	; (8004574 <USB_ActivateEndpoint+0x568>)
 800431c:	4323      	orrs	r3, r4
 800431e:	b29b      	uxth	r3, r3
 8004320:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004322:	687c      	ldr	r4, [r7, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	441c      	add	r4, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4423      	add	r3, r4
 8004336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433a:	461c      	mov	r4, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	891b      	ldrh	r3, [r3, #8]
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	b29b      	uxth	r3, r3
 8004348:	8023      	strh	r3, [r4, #0]
 800434a:	687c      	ldr	r4, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004352:	b29b      	uxth	r3, r3
 8004354:	441c      	add	r4, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	4423      	add	r3, r4
 800435e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004362:	461c      	mov	r4, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	895b      	ldrh	r3, [r3, #10]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f040 8088 	bne.w	800448c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29c      	uxth	r4, r3
 800438a:	4623      	mov	r3, r4
 800438c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d014      	beq.n	80043be <USB_ActivateEndpoint+0x3b2>
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	b29c      	uxth	r4, r3
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	4b70      	ldr	r3, [pc, #448]	; (8004578 <USB_ActivateEndpoint+0x56c>)
 80043b8:	4323      	orrs	r3, r4
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29c      	uxth	r4, r3
 80043cc:	4623      	mov	r3, r4
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d014      	beq.n	8004400 <USB_ActivateEndpoint+0x3f4>
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	b29c      	uxth	r4, r3
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	441a      	add	r2, r3
 80043f8:	4b60      	ldr	r3, [pc, #384]	; (800457c <USB_ActivateEndpoint+0x570>)
 80043fa:	4323      	orrs	r3, r4
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	b29c      	uxth	r4, r3
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	441a      	add	r2, r3
 8004422:	4b56      	ldr	r3, [pc, #344]	; (800457c <USB_ActivateEndpoint+0x570>)
 8004424:	4323      	orrs	r3, r4
 8004426:	b29b      	uxth	r3, r3
 8004428:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004440:	b29c      	uxth	r4, r3
 8004442:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004446:	b29c      	uxth	r4, r3
 8004448:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800444c:	b29c      	uxth	r4, r3
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	4b49      	ldr	r3, [pc, #292]	; (8004580 <USB_ActivateEndpoint+0x574>)
 800445a:	4323      	orrs	r3, r4
 800445c:	b29b      	uxth	r3, r3
 800445e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004476:	b29c      	uxth	r4, r3
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	441a      	add	r2, r3
 8004482:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <USB_ActivateEndpoint+0x574>)
 8004484:	4323      	orrs	r3, r4
 8004486:	b29b      	uxth	r3, r3
 8004488:	8013      	strh	r3, [r2, #0]
 800448a:	e0a5      	b.n	80045d8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29c      	uxth	r4, r3
 800449a:	4623      	mov	r3, r4
 800449c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d014      	beq.n	80044ce <USB_ActivateEndpoint+0x4c2>
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	b29c      	uxth	r4, r3
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <USB_ActivateEndpoint+0x56c>)
 80044c8:	4323      	orrs	r3, r4
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29c      	uxth	r4, r3
 80044dc:	4623      	mov	r3, r4
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d014      	beq.n	8004510 <USB_ActivateEndpoint+0x504>
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	b29c      	uxth	r4, r3
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	4b1c      	ldr	r3, [pc, #112]	; (800457c <USB_ActivateEndpoint+0x570>)
 800450a:	4323      	orrs	r3, r4
 800450c:	b29b      	uxth	r3, r3
 800450e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	b29c      	uxth	r4, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <USB_ActivateEndpoint+0x56c>)
 8004534:	4323      	orrs	r3, r4
 8004536:	b29b      	uxth	r3, r3
 8004538:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	78db      	ldrb	r3, [r3, #3]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d020      	beq.n	8004584 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004558:	b29c      	uxth	r4, r3
 800455a:	f084 0320 	eor.w	r3, r4, #32
 800455e:	b29c      	uxth	r4, r3
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <USB_ActivateEndpoint+0x574>)
 800456c:	4323      	orrs	r3, r4
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
 8004572:	e01c      	b.n	80045ae <USB_ActivateEndpoint+0x5a2>
 8004574:	ffff8180 	.word	0xffff8180
 8004578:	ffffc080 	.word	0xffffc080
 800457c:	ffff80c0 	.word	0xffff80c0
 8004580:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459a:	b29c      	uxth	r4, r3
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	441a      	add	r2, r3
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <USB_ActivateEndpoint+0x5d8>)
 80045a8:	4323      	orrs	r3, r4
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c4:	b29c      	uxth	r4, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	441a      	add	r2, r3
 80045d0:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <USB_ActivateEndpoint+0x5d8>)
 80045d2:	4323      	orrs	r3, r4
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc90      	pop	{r4, r7}
 80045e2:	4770      	bx	lr
 80045e4:	ffff8080 	.word	0xffff8080

080045e8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045e8:	b490      	push	{r4, r7}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	7b1b      	ldrb	r3, [r3, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d171      	bne.n	80046de <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d036      	beq.n	8004670 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29c      	uxth	r4, r3
 8004610:	4623      	mov	r3, r4
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d014      	beq.n	8004644 <USB_DeactivateEndpoint+0x5c>
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	b29c      	uxth	r4, r3
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	4b6b      	ldr	r3, [pc, #428]	; (80047ec <USB_DeactivateEndpoint+0x204>)
 800463e:	4323      	orrs	r3, r4
 8004640:	b29b      	uxth	r3, r3
 8004642:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465a:	b29c      	uxth	r4, r3
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	4b62      	ldr	r3, [pc, #392]	; (80047f0 <USB_DeactivateEndpoint+0x208>)
 8004668:	4323      	orrs	r3, r4
 800466a:	b29b      	uxth	r3, r3
 800466c:	8013      	strh	r3, [r2, #0]
 800466e:	e144      	b.n	80048fa <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29c      	uxth	r4, r3
 800467e:	4623      	mov	r3, r4
 8004680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d014      	beq.n	80046b2 <USB_DeactivateEndpoint+0xca>
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	b29c      	uxth	r4, r3
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	4b52      	ldr	r3, [pc, #328]	; (80047f4 <USB_DeactivateEndpoint+0x20c>)
 80046ac:	4323      	orrs	r3, r4
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	b29c      	uxth	r4, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	441a      	add	r2, r3
 80046d4:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <USB_DeactivateEndpoint+0x208>)
 80046d6:	4323      	orrs	r3, r4
 80046d8:	b29b      	uxth	r3, r3
 80046da:	8013      	strh	r3, [r2, #0]
 80046dc:	e10d      	b.n	80048fa <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 8088 	bne.w	80047f8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29c      	uxth	r4, r3
 80046f6:	4623      	mov	r3, r4
 80046f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d014      	beq.n	800472a <USB_DeactivateEndpoint+0x142>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	b29c      	uxth	r4, r3
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <USB_DeactivateEndpoint+0x20c>)
 8004724:	4323      	orrs	r3, r4
 8004726:	b29b      	uxth	r3, r3
 8004728:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	b29c      	uxth	r4, r3
 8004738:	4623      	mov	r3, r4
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d014      	beq.n	800476c <USB_DeactivateEndpoint+0x184>
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004758:	b29c      	uxth	r4, r3
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <USB_DeactivateEndpoint+0x204>)
 8004766:	4323      	orrs	r3, r4
 8004768:	b29b      	uxth	r3, r3
 800476a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	b29c      	uxth	r4, r3
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <USB_DeactivateEndpoint+0x204>)
 8004790:	4323      	orrs	r3, r4
 8004792:	b29b      	uxth	r3, r3
 8004794:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ac:	b29c      	uxth	r4, r3
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <USB_DeactivateEndpoint+0x208>)
 80047ba:	4323      	orrs	r3, r4
 80047bc:	b29b      	uxth	r3, r3
 80047be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d6:	b29c      	uxth	r4, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <USB_DeactivateEndpoint+0x208>)
 80047e4:	4323      	orrs	r3, r4
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	8013      	strh	r3, [r2, #0]
 80047ea:	e086      	b.n	80048fa <USB_DeactivateEndpoint+0x312>
 80047ec:	ffff80c0 	.word	0xffff80c0
 80047f0:	ffff8080 	.word	0xffff8080
 80047f4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29c      	uxth	r4, r3
 8004806:	4623      	mov	r3, r4
 8004808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d014      	beq.n	800483a <USB_DeactivateEndpoint+0x252>
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	b29c      	uxth	r4, r3
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	4b35      	ldr	r3, [pc, #212]	; (8004908 <USB_DeactivateEndpoint+0x320>)
 8004834:	4323      	orrs	r3, r4
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29c      	uxth	r4, r3
 8004848:	4623      	mov	r3, r4
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d014      	beq.n	800487c <USB_DeactivateEndpoint+0x294>
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004868:	b29c      	uxth	r4, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	441a      	add	r2, r3
 8004874:	4b25      	ldr	r3, [pc, #148]	; (800490c <USB_DeactivateEndpoint+0x324>)
 8004876:	4323      	orrs	r3, r4
 8004878:	b29b      	uxth	r3, r3
 800487a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	b29c      	uxth	r4, r3
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	441a      	add	r2, r3
 800489e:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <USB_DeactivateEndpoint+0x320>)
 80048a0:	4323      	orrs	r3, r4
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048bc:	b29c      	uxth	r4, r3
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <USB_DeactivateEndpoint+0x328>)
 80048ca:	4323      	orrs	r3, r4
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	b29c      	uxth	r4, r3
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	441a      	add	r2, r3
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <USB_DeactivateEndpoint+0x328>)
 80048f4:	4323      	orrs	r3, r4
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bc90      	pop	{r4, r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	ffffc080 	.word	0xffffc080
 800490c:	ffff80c0 	.word	0xffff80c0
 8004910:	ffff8080 	.word	0xffff8080

08004914 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b08d      	sub	sp, #52	; 0x34
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	2b01      	cmp	r3, #1
 8004924:	f040 8160 	bne.w	8004be8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699a      	ldr	r2, [r3, #24]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	429a      	cmp	r2, r3
 8004932:	d909      	bls.n	8004948 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	619a      	str	r2, [r3, #24]
 8004946:	e005      	b.n	8004954 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	7b1b      	ldrb	r3, [r3, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d119      	bne.n	8004990 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6959      	ldr	r1, [r3, #20]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	88da      	ldrh	r2, [r3, #6]
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	b29b      	uxth	r3, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fba2 	bl	80050b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800496e:	687c      	ldr	r4, [r7, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004976:	b29b      	uxth	r3, r3
 8004978:	441c      	add	r4, r3
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	4423      	add	r3, r4
 8004982:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004986:	461c      	mov	r4, r3
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	b29b      	uxth	r3, r3
 800498c:	8023      	strh	r3, [r4, #0]
 800498e:	e10f      	b.n	8004bb0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d065      	beq.n	8004a72 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049a6:	687c      	ldr	r4, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	785b      	ldrb	r3, [r3, #1]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d148      	bne.n	8004a42 <USB_EPStartXfer+0x12e>
 80049b0:	687c      	ldr	r4, [r7, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	441c      	add	r4, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	4423      	add	r3, r4
 80049c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049c8:	461c      	mov	r4, r3
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10e      	bne.n	80049ee <USB_EPStartXfer+0xda>
 80049d0:	8823      	ldrh	r3, [r4, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049d8:	b29b      	uxth	r3, r3
 80049da:	8023      	strh	r3, [r4, #0]
 80049dc:	8823      	ldrh	r3, [r4, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8023      	strh	r3, [r4, #0]
 80049ec:	e03d      	b.n	8004a6a <USB_EPStartXfer+0x156>
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	2b3e      	cmp	r3, #62	; 0x3e
 80049f2:	d810      	bhi.n	8004a16 <USB_EPStartXfer+0x102>
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <USB_EPStartXfer+0xf6>
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	3301      	adds	r3, #1
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	029b      	lsls	r3, r3, #10
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	8023      	strh	r3, [r4, #0]
 8004a14:	e029      	b.n	8004a6a <USB_EPStartXfer+0x156>
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <USB_EPStartXfer+0x118>
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	029b      	lsls	r3, r3, #10
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	8023      	strh	r3, [r4, #0]
 8004a40:	e013      	b.n	8004a6a <USB_EPStartXfer+0x156>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d10f      	bne.n	8004a6a <USB_EPStartXfer+0x156>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	441c      	add	r4, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	4423      	add	r3, r4
 8004a5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	895b      	ldrh	r3, [r3, #10]
 8004a6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a70:	e063      	b.n	8004b3a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d148      	bne.n	8004b0c <USB_EPStartXfer+0x1f8>
 8004a7a:	687c      	ldr	r4, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	441c      	add	r4, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	4423      	add	r3, r4
 8004a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a92:	461c      	mov	r4, r3
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10e      	bne.n	8004ab8 <USB_EPStartXfer+0x1a4>
 8004a9a:	8823      	ldrh	r3, [r4, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8023      	strh	r3, [r4, #0]
 8004aa6:	8823      	ldrh	r3, [r4, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8023      	strh	r3, [r4, #0]
 8004ab6:	e03d      	b.n	8004b34 <USB_EPStartXfer+0x220>
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b3e      	cmp	r3, #62	; 0x3e
 8004abc:	d810      	bhi.n	8004ae0 <USB_EPStartXfer+0x1cc>
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <USB_EPStartXfer+0x1c0>
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	623b      	str	r3, [r7, #32]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8023      	strh	r3, [r4, #0]
 8004ade:	e029      	b.n	8004b34 <USB_EPStartXfer+0x220>
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	623b      	str	r3, [r7, #32]
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <USB_EPStartXfer+0x1e2>
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	029b      	lsls	r3, r3, #10
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8023      	strh	r3, [r4, #0]
 8004b0a:	e013      	b.n	8004b34 <USB_EPStartXfer+0x220>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d10f      	bne.n	8004b34 <USB_EPStartXfer+0x220>
 8004b14:	687c      	ldr	r4, [r7, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	441c      	add	r4, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	4423      	add	r3, r4
 8004b28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b2c:	461c      	mov	r4, r3
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	891b      	ldrh	r3, [r3, #8]
 8004b38:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6959      	ldr	r1, [r3, #20]
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fab4 	bl	80050b2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d115      	bne.n	8004b7e <USB_EPStartXfer+0x26a>
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	b29c      	uxth	r4, r3
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	4b9a      	ldr	r3, [pc, #616]	; (8004de0 <USB_EPStartXfer+0x4cc>)
 8004b76:	4323      	orrs	r3, r4
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	8013      	strh	r3, [r2, #0]
 8004b7c:	e018      	b.n	8004bb0 <USB_EPStartXfer+0x29c>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d114      	bne.n	8004bb0 <USB_EPStartXfer+0x29c>
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	b29c      	uxth	r4, r3
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	4b8e      	ldr	r3, [pc, #568]	; (8004de4 <USB_EPStartXfer+0x4d0>)
 8004baa:	4323      	orrs	r3, r4
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc6:	b29c      	uxth	r4, r3
 8004bc8:	f084 0310 	eor.w	r3, r4, #16
 8004bcc:	b29c      	uxth	r4, r3
 8004bce:	f084 0320 	eor.w	r3, r4, #32
 8004bd2:	b29c      	uxth	r4, r3
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	4b82      	ldr	r3, [pc, #520]	; (8004de8 <USB_EPStartXfer+0x4d4>)
 8004be0:	4323      	orrs	r3, r4
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]
 8004be6:	e146      	b.n	8004e76 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d909      	bls.n	8004c08 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	1ad2      	subs	r2, r2, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	619a      	str	r2, [r3, #24]
 8004c06:	e005      	b.n	8004c14 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	7b1b      	ldrb	r3, [r3, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d148      	bne.n	8004cae <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c1c:	687c      	ldr	r4, [r7, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	441c      	add	r4, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	4423      	add	r3, r4
 8004c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c34:	461c      	mov	r4, r3
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10e      	bne.n	8004c5a <USB_EPStartXfer+0x346>
 8004c3c:	8823      	ldrh	r3, [r4, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	8023      	strh	r3, [r4, #0]
 8004c48:	8823      	ldrh	r3, [r4, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	8023      	strh	r3, [r4, #0]
 8004c58:	e0f2      	b.n	8004e40 <USB_EPStartXfer+0x52c>
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c5e:	d810      	bhi.n	8004c82 <USB_EPStartXfer+0x36e>
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <USB_EPStartXfer+0x362>
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3301      	adds	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	029b      	lsls	r3, r3, #10
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8023      	strh	r3, [r4, #0]
 8004c80:	e0de      	b.n	8004e40 <USB_EPStartXfer+0x52c>
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <USB_EPStartXfer+0x384>
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	029b      	lsls	r3, r3, #10
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8023      	strh	r3, [r4, #0]
 8004cac:	e0c8      	b.n	8004e40 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	785b      	ldrb	r3, [r3, #1]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d148      	bne.n	8004d48 <USB_EPStartXfer+0x434>
 8004cb6:	687c      	ldr	r4, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	441c      	add	r4, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	4423      	add	r3, r4
 8004cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cce:	461c      	mov	r4, r3
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10e      	bne.n	8004cf4 <USB_EPStartXfer+0x3e0>
 8004cd6:	8823      	ldrh	r3, [r4, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8023      	strh	r3, [r4, #0]
 8004ce2:	8823      	ldrh	r3, [r4, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8023      	strh	r3, [r4, #0]
 8004cf2:	e03d      	b.n	8004d70 <USB_EPStartXfer+0x45c>
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf8:	d810      	bhi.n	8004d1c <USB_EPStartXfer+0x408>
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <USB_EPStartXfer+0x3fc>
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8023      	strh	r3, [r4, #0]
 8004d1a:	e029      	b.n	8004d70 <USB_EPStartXfer+0x45c>
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <USB_EPStartXfer+0x41e>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8023      	strh	r3, [r4, #0]
 8004d46:	e013      	b.n	8004d70 <USB_EPStartXfer+0x45c>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d10f      	bne.n	8004d70 <USB_EPStartXfer+0x45c>
 8004d50:	687c      	ldr	r4, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	441c      	add	r4, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	4423      	add	r3, r4
 8004d64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d68:	461c      	mov	r4, r3
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8023      	strh	r3, [r4, #0]
 8004d70:	687c      	ldr	r4, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d14e      	bne.n	8004e18 <USB_EPStartXfer+0x504>
 8004d7a:	687c      	ldr	r4, [r7, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	441c      	add	r4, r3
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4423      	add	r3, r4
 8004d8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d92:	461c      	mov	r4, r3
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10e      	bne.n	8004db8 <USB_EPStartXfer+0x4a4>
 8004d9a:	8823      	ldrh	r3, [r4, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8023      	strh	r3, [r4, #0]
 8004da6:	8823      	ldrh	r3, [r4, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	8023      	strh	r3, [r4, #0]
 8004db6:	e043      	b.n	8004e40 <USB_EPStartXfer+0x52c>
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	2b3e      	cmp	r3, #62	; 0x3e
 8004dbc:	d816      	bhi.n	8004dec <USB_EPStartXfer+0x4d8>
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <USB_EPStartXfer+0x4c0>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	029b      	lsls	r3, r3, #10
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8023      	strh	r3, [r4, #0]
 8004dde:	e02f      	b.n	8004e40 <USB_EPStartXfer+0x52c>
 8004de0:	ffff80c0 	.word	0xffff80c0
 8004de4:	ffffc080 	.word	0xffffc080
 8004de8:	ffff8080 	.word	0xffff8080
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <USB_EPStartXfer+0x4ee>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	029b      	lsls	r3, r3, #10
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	8023      	strh	r3, [r4, #0]
 8004e16:	e013      	b.n	8004e40 <USB_EPStartXfer+0x52c>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10f      	bne.n	8004e40 <USB_EPStartXfer+0x52c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	441c      	add	r4, r3
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	4423      	add	r3, r4
 8004e32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	b29c      	uxth	r4, r3
 8004e58:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e5c:	b29c      	uxth	r4, r3
 8004e5e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004e62:	b29c      	uxth	r4, r3
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <USB_EPStartXfer+0x56c>)
 8004e70:	4323      	orrs	r3, r4
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3734      	adds	r7, #52	; 0x34
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	ffff8080 	.word	0xffff8080

08004e84 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e84:	b490      	push	{r4, r7}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eac:	b29c      	uxth	r4, r3
 8004eae:	f084 0310 	eor.w	r3, r4, #16
 8004eb2:	b29c      	uxth	r4, r3
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	441a      	add	r2, r3
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <USB_EPSetStall+0x80>)
 8004ec0:	4323      	orrs	r3, r4
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]
 8004ec6:	e017      	b.n	8004ef8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	b29c      	uxth	r4, r3
 8004ee0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ee4:	b29c      	uxth	r4, r3
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <USB_EPSetStall+0x80>)
 8004ef2:	4323      	orrs	r3, r4
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc90      	pop	{r4, r7}
 8004f02:	4770      	bx	lr
 8004f04:	ffff8080 	.word	0xffff8080

08004f08 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f08:	b490      	push	{r4, r7}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	7b1b      	ldrb	r3, [r3, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d17d      	bne.n	8005016 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03d      	beq.n	8004f9e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29c      	uxth	r4, r3
 8004f30:	4623      	mov	r3, r4
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d014      	beq.n	8004f64 <USB_EPClearStall+0x5c>
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	b29c      	uxth	r4, r3
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	4b31      	ldr	r3, [pc, #196]	; (8005024 <USB_EPClearStall+0x11c>)
 8004f5e:	4323      	orrs	r3, r4
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	78db      	ldrb	r3, [r3, #3]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d054      	beq.n	8005016 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f82:	b29c      	uxth	r4, r3
 8004f84:	f084 0320 	eor.w	r3, r4, #32
 8004f88:	b29c      	uxth	r4, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <USB_EPClearStall+0x120>)
 8004f96:	4323      	orrs	r3, r4
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	8013      	strh	r3, [r2, #0]
 8004f9c:	e03b      	b.n	8005016 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29c      	uxth	r4, r3
 8004fac:	4623      	mov	r3, r4
 8004fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d014      	beq.n	8004fe0 <USB_EPClearStall+0xd8>
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fcc:	b29c      	uxth	r4, r3
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	441a      	add	r2, r3
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <USB_EPClearStall+0x124>)
 8004fda:	4323      	orrs	r3, r4
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	b29c      	uxth	r4, r3
 8004ff8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ffc:	b29c      	uxth	r4, r3
 8004ffe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005002:	b29c      	uxth	r4, r3
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <USB_EPClearStall+0x120>)
 8005010:	4323      	orrs	r3, r4
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bc90      	pop	{r4, r7}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	ffff80c0 	.word	0xffff80c0
 8005028:	ffff8080 	.word	0xffff8080
 800502c:	ffffc080 	.word	0xffffc080

08005030 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2280      	movs	r2, #128	; 0x80
 8005046:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800508c:	b29b      	uxth	r3, r3
 800508e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b08d      	sub	sp, #52	; 0x34
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	4611      	mov	r1, r2
 80050be:	461a      	mov	r2, r3
 80050c0:	460b      	mov	r3, r1
 80050c2:	80fb      	strh	r3, [r7, #6]
 80050c4:	4613      	mov	r3, r2
 80050c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80050c8:	88bb      	ldrh	r3, [r7, #4]
 80050ca:	3301      	adds	r3, #1
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	005a      	lsls	r2, r3, #1
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ea:	e01e      	b.n	800512a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	3301      	adds	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	b29b      	uxth	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	b29a      	uxth	r2, r3
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	3302      	adds	r3, #2
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	3302      	adds	r3, #2
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	3301      	adds	r3, #1
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	3b01      	subs	r3, #1
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1dd      	bne.n	80050ec <USB_WritePMA+0x3a>
  }
}
 8005130:	bf00      	nop
 8005132:	3734      	adds	r7, #52	; 0x34
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800513a:	b480      	push	{r7}
 800513c:	b08b      	sub	sp, #44	; 0x2c
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	4611      	mov	r1, r2
 8005146:	461a      	mov	r2, r3
 8005148:	460b      	mov	r3, r1
 800514a:	80fb      	strh	r3, [r7, #6]
 800514c:	4613      	mov	r3, r2
 800514e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005150:	88bb      	ldrh	r3, [r7, #4]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	b29b      	uxth	r3, r3
 8005156:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	005a      	lsls	r2, r3, #1
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	e01b      	b.n	80051ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	3302      	adds	r3, #2
 8005180:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3301      	adds	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	b2da      	uxtb	r2, r3
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3301      	adds	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	3302      	adds	r3, #2
 80051a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	3b01      	subs	r3, #1
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e0      	bne.n	8005174 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80051b2:	88bb      	ldrh	r3, [r7, #4]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	701a      	strb	r2, [r3, #0]
  }
}
 80051ce:	bf00      	nop
 80051d0:	372c      	adds	r7, #44	; 0x2c
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	7c1b      	ldrb	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d115      	bne.n	800521c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80051f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f4:	2202      	movs	r2, #2
 80051f6:	2181      	movs	r1, #129	; 0x81
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fe72 	bl	8006ee2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005208:	2202      	movs	r2, #2
 800520a:	2101      	movs	r1, #1
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fe68 	bl	8006ee2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800521a:	e012      	b.n	8005242 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800521c:	2340      	movs	r3, #64	; 0x40
 800521e:	2202      	movs	r2, #2
 8005220:	2181      	movs	r1, #129	; 0x81
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f001 fe5d 	bl	8006ee2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800522e:	2340      	movs	r3, #64	; 0x40
 8005230:	2202      	movs	r2, #2
 8005232:	2101      	movs	r1, #1
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f001 fe54 	bl	8006ee2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005242:	2308      	movs	r3, #8
 8005244:	2203      	movs	r2, #3
 8005246:	2182      	movs	r1, #130	; 0x82
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 fe4a 	bl	8006ee2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005254:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005258:	f001 ff64 	bl	8007124 <USBD_static_malloc>
 800525c:	4602      	mov	r2, r0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800526e:	2301      	movs	r3, #1
 8005270:	73fb      	strb	r3, [r7, #15]
 8005272:	e026      	b.n	80052c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2200      	movs	r2, #0
 800528a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2200      	movs	r2, #0
 8005292:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	7c1b      	ldrb	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a8:	2101      	movs	r1, #1
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 ff03 	bl	80070b6 <USBD_LL_PrepareReceive>
 80052b0:	e007      	b.n	80052c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	2101      	movs	r1, #1
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fefa 	bl	80070b6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052dc:	2181      	movs	r1, #129	; 0x81
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fe25 	bl	8006f2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80052ea:	2101      	movs	r1, #1
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 fe1e 	bl	8006f2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80052fa:	2182      	movs	r1, #130	; 0x82
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 fe16 	bl	8006f2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005322:	4618      	mov	r0, r3
 8005324:	f001 ff0a 	bl	800713c <USBD_static_free>
    pdev->pClassData = NULL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005360:	2b00      	cmp	r3, #0
 8005362:	d039      	beq.n	80053d8 <USBD_CDC_Setup+0x9e>
 8005364:	2b20      	cmp	r3, #32
 8005366:	d17c      	bne.n	8005462 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	88db      	ldrh	r3, [r3, #6]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d029      	beq.n	80053c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	b25b      	sxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	da11      	bge.n	800539e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005386:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	88d2      	ldrh	r2, [r2, #6]
 800538c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800538e:	6939      	ldr	r1, [r7, #16]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	88db      	ldrh	r3, [r3, #6]
 8005394:	461a      	mov	r2, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f001 f9f6 	bl	8006788 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800539c:	e068      	b.n	8005470 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	785a      	ldrb	r2, [r3, #1]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	88db      	ldrh	r3, [r3, #6]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80053b4:	6939      	ldr	r1, [r7, #16]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	88db      	ldrh	r3, [r3, #6]
 80053ba:	461a      	mov	r2, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 fa11 	bl	80067e4 <USBD_CtlPrepareRx>
      break;
 80053c2:	e055      	b.n	8005470 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	7850      	ldrb	r0, [r2, #1]
 80053d0:	2200      	movs	r2, #0
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	4798      	blx	r3
      break;
 80053d6:	e04b      	b.n	8005470 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b0a      	cmp	r3, #10
 80053de:	d017      	beq.n	8005410 <USBD_CDC_Setup+0xd6>
 80053e0:	2b0b      	cmp	r3, #11
 80053e2:	d029      	beq.n	8005438 <USBD_CDC_Setup+0xfe>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d133      	bne.n	8005450 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d107      	bne.n	8005402 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80053f2:	f107 030c 	add.w	r3, r7, #12
 80053f6:	2202      	movs	r2, #2
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 f9c4 	bl	8006788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005400:	e02e      	b.n	8005460 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 f955 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800540a:	2302      	movs	r3, #2
 800540c:	75fb      	strb	r3, [r7, #23]
          break;
 800540e:	e027      	b.n	8005460 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005416:	2b03      	cmp	r3, #3
 8005418:	d107      	bne.n	800542a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800541a:	f107 030f 	add.w	r3, r7, #15
 800541e:	2201      	movs	r2, #1
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 f9b0 	bl	8006788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005428:	e01a      	b.n	8005460 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 f941 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005432:	2302      	movs	r3, #2
 8005434:	75fb      	strb	r3, [r7, #23]
          break;
 8005436:	e013      	b.n	8005460 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543e:	2b03      	cmp	r3, #3
 8005440:	d00d      	beq.n	800545e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 f935 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800544a:	2302      	movs	r3, #2
 800544c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800544e:	e006      	b.n	800545e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 f92e 	bl	80066b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005458:	2302      	movs	r3, #2
 800545a:	75fb      	strb	r3, [r7, #23]
          break;
 800545c:	e000      	b.n	8005460 <USBD_CDC_Setup+0x126>
          break;
 800545e:	bf00      	nop
      }
      break;
 8005460:	e006      	b.n	8005470 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 f925 	bl	80066b4 <USBD_CtlError>
      ret = USBD_FAIL;
 800546a:	2302      	movs	r3, #2
 800546c:	75fb      	strb	r3, [r7, #23]
      break;
 800546e:	bf00      	nop
  }

  return ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005494:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d037      	beq.n	8005510 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80054a0:	78fa      	ldrb	r2, [r7, #3]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	331c      	adds	r3, #28
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d026      	beq.n	8005504 <USBD_CDC_DataIn+0x8a>
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	331c      	adds	r3, #28
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	0152      	lsls	r2, r2, #5
 80054ce:	440a      	add	r2, r1
 80054d0:	3238      	adds	r2, #56	; 0x38
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80054d8:	fb02 f201 	mul.w	r2, r2, r1
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d110      	bne.n	8005504 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	331c      	adds	r3, #28
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054f6:	78f9      	ldrb	r1, [r7, #3]
 80054f8:	2300      	movs	r3, #0
 80054fa:	2200      	movs	r2, #0
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f001 fdb7 	bl	8007070 <USBD_LL_Transmit>
 8005502:	e003      	b.n	800550c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f001 fde2 	bl	80070fc <USBD_LL_GetRxDataSize>
 8005538:	4602      	mov	r2, r0
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00d      	beq.n	8005566 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800555e:	4611      	mov	r1, r2
 8005560:	4798      	blx	r3

    return USBD_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e000      	b.n	8005568 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005566:	2302      	movs	r3, #2
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005586:	2b00      	cmp	r3, #0
 8005588:	d015      	beq.n	80055b6 <USBD_CDC_EP0_RxReady+0x46>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005590:	2bff      	cmp	r3, #255	; 0xff
 8005592:	d010      	beq.n	80055b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80055a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80055aa:	b292      	uxth	r2, r2
 80055ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	22ff      	movs	r2, #255	; 0xff
 80055b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2243      	movs	r2, #67	; 0x43
 80055cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80055ce:	4b03      	ldr	r3, [pc, #12]	; (80055dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000098 	.word	0x20000098

080055e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2243      	movs	r2, #67	; 0x43
 80055ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80055ee:	4b03      	ldr	r3, [pc, #12]	; (80055fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000054 	.word	0x20000054

08005600 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2243      	movs	r2, #67	; 0x43
 800560c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800560e:	4b03      	ldr	r3, [pc, #12]	; (800561c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	200000dc 	.word	0x200000dc

08005620 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	220a      	movs	r2, #10
 800562c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800562e:	4b03      	ldr	r3, [pc, #12]	; (800563c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000010 	.word	0x20000010

08005640 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800564a:	2302      	movs	r3, #2
 800564c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005680:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800568a:	88fa      	ldrh	r2, [r7, #6]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01c      	beq.n	8005718 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d115      	bne.n	8005714 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005706:	b29b      	uxth	r3, r3
 8005708:	2181      	movs	r1, #129	; 0x81
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fcb0 	bl	8007070 <USBD_LL_Transmit>

      return USBD_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e002      	b.n	800571a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005718:	2302      	movs	r3, #2
  }
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005730:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d017      	beq.n	800576c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	7c1b      	ldrb	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800574a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800574e:	2101      	movs	r1, #1
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 fcb0 	bl	80070b6 <USBD_LL_PrepareReceive>
 8005756:	e007      	b.n	8005768 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800575e:	2340      	movs	r3, #64	; 0x40
 8005760:	2101      	movs	r1, #1
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fca7 	bl	80070b6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	4613      	mov	r3, r2
 8005782:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800578a:	2302      	movs	r3, #2
 800578c:	e01a      	b.n	80057c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	79fa      	ldrb	r2, [r7, #7]
 80057ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f001 fb1b 	bl	8006df8 <USBD_LL_Init>

  return USBD_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e001      	b.n	80057f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057ee:	2302      	movs	r3, #2
 80057f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr

080057fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fb50 	bl	8006eac <USBD_LL_Start>

  return USBD_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005836:	2302      	movs	r3, #2
 8005838:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	4611      	mov	r1, r2
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	4798      	blx	r3
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	4611      	mov	r1, r2
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	4798      	blx	r3

  return USBD_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fecb 	bl	800663c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80058b4:	461a      	mov	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d00c      	beq.n	80058e4 <USBD_LL_SetupStage+0x56>
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d302      	bcc.n	80058d4 <USBD_LL_SetupStage+0x46>
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d010      	beq.n	80058f4 <USBD_LL_SetupStage+0x66>
 80058d2:	e017      	b.n	8005904 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f9cb 	bl	8005c78 <USBD_StdDevReq>
      break;
 80058e2:	e01a      	b.n	800591a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fa2d 	bl	8005d4c <USBD_StdItfReq>
      break;
 80058f2:	e012      	b.n	800591a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fa6b 	bl	8005dd8 <USBD_StdEPReq>
      break;
 8005902:	e00a      	b.n	800591a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800590a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800590e:	b2db      	uxtb	r3, r3
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 fb2a 	bl	8006f6c <USBD_LL_StallEP>
      break;
 8005918:	bf00      	nop
  }

  return USBD_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	460b      	mov	r3, r1
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005932:	7afb      	ldrb	r3, [r7, #11]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d14b      	bne.n	80059d0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800593e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005946:	2b03      	cmp	r3, #3
 8005948:	d134      	bne.n	80059b4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	429a      	cmp	r2, r3
 8005954:	d919      	bls.n	800598a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800596c:	429a      	cmp	r2, r3
 800596e:	d203      	bcs.n	8005978 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005974:	b29b      	uxth	r3, r3
 8005976:	e002      	b.n	800597e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 ff4c 	bl	8006820 <USBD_CtlContinueRx>
 8005988:	e038      	b.n	80059fc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800599c:	2b03      	cmp	r3, #3
 800599e:	d105      	bne.n	80059ac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 ff49 	bl	8006844 <USBD_CtlSendStatus>
 80059b2:	e023      	b.n	80059fc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d11e      	bne.n	80059fc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80059c6:	2100      	movs	r1, #0
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f001 facf 	bl	8006f6c <USBD_LL_StallEP>
 80059ce:	e015      	b.n	80059fc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00d      	beq.n	80059f8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d108      	bne.n	80059f8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	7afa      	ldrb	r2, [r7, #11]
 80059f0:	4611      	mov	r1, r2
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	4798      	blx	r3
 80059f6:	e001      	b.n	80059fc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80059f8:	2302      	movs	r3, #2
 80059fa:	e000      	b.n	80059fe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b086      	sub	sp, #24
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d17f      	bne.n	8005b1a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d15c      	bne.n	8005ae4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d915      	bls.n	8005a62 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 feb6 	bl	80067c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a54:	2300      	movs	r3, #0
 8005a56:	2200      	movs	r2, #0
 8005a58:	2100      	movs	r1, #0
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f001 fb2b 	bl	80070b6 <USBD_LL_PrepareReceive>
 8005a60:	e04e      	b.n	8005b00 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	6912      	ldr	r2, [r2, #16]
 8005a6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a6e:	fb02 f201 	mul.w	r2, r2, r1
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11c      	bne.n	8005ab2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d316      	bcc.n	8005ab2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d20f      	bcs.n	8005ab2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fe92 	bl	80067c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f001 fb03 	bl	80070b6 <USBD_LL_PrepareReceive>
 8005ab0:	e026      	b.n	8005b00 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d105      	bne.n	8005ad4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005ad4:	2180      	movs	r1, #128	; 0x80
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f001 fa48 	bl	8006f6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fec4 	bl	800686a <USBD_CtlReceiveStatus>
 8005ae2:	e00d      	b.n	8005b00 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d004      	beq.n	8005af8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f001 fa36 	bl	8006f6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d11d      	bne.n	8005b46 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7ff fe83 	bl	8005816 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b18:	e015      	b.n	8005b46 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d108      	bne.n	8005b42 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	7afa      	ldrb	r2, [r7, #11]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	4798      	blx	r3
 8005b40:	e001      	b.n	8005b46 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b42:	2302      	movs	r3, #2
 8005b44:	e000      	b.n	8005b48 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b58:	2340      	movs	r3, #64	; 0x40
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 f9bf 	bl	8006ee2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2240      	movs	r2, #64	; 0x40
 8005b70:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	2200      	movs	r2, #0
 8005b78:	2180      	movs	r1, #128	; 0x80
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 f9b1 	bl	8006ee2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2240      	movs	r2, #64	; 0x40
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6852      	ldr	r2, [r2, #4]
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	4798      	blx	r3
  }

  return USBD_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2204      	movs	r2, #4
 8005c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d105      	bne.n	8005c36 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d10b      	bne.n	8005c6c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d004      	beq.n	8005c9c <USBD_StdDevReq+0x24>
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d002      	beq.n	8005c9c <USBD_StdDevReq+0x24>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <USBD_StdDevReq+0x34>
 8005c9a:	e04c      	b.n	8005d36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
      break;
 8005caa:	e049      	b.n	8005d40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d83a      	bhi.n	8005d2a <USBD_StdDevReq+0xb2>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <USBD_StdDevReq+0x44>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005d0d 	.word	0x08005d0d
 8005cc0:	08005d21 	.word	0x08005d21
 8005cc4:	08005d2b 	.word	0x08005d2b
 8005cc8:	08005d17 	.word	0x08005d17
 8005ccc:	08005d2b 	.word	0x08005d2b
 8005cd0:	08005cef 	.word	0x08005cef
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005d2b 	.word	0x08005d2b
 8005cdc:	08005d03 	.word	0x08005d03
 8005ce0:	08005cf9 	.word	0x08005cf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9d4 	bl	8006094 <USBD_GetDescriptor>
          break;
 8005cec:	e022      	b.n	8005d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fb37 	bl	8006364 <USBD_SetAddress>
          break;
 8005cf6:	e01d      	b.n	8005d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fb74 	bl	80063e8 <USBD_SetConfig>
          break;
 8005d00:	e018      	b.n	8005d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fbfd 	bl	8006504 <USBD_GetConfig>
          break;
 8005d0a:	e013      	b.n	8005d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fc2c 	bl	800656c <USBD_GetStatus>
          break;
 8005d14:	e00e      	b.n	8005d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fc5a 	bl	80065d2 <USBD_SetFeature>
          break;
 8005d1e:	e009      	b.n	8005d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fc69 	bl	80065fa <USBD_ClrFeature>
          break;
 8005d28:	e004      	b.n	8005d34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fcc1 	bl	80066b4 <USBD_CtlError>
          break;
 8005d32:	bf00      	nop
      }
      break;
 8005d34:	e004      	b.n	8005d40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fcbb 	bl	80066b4 <USBD_CtlError>
      break;
 8005d3e:	bf00      	nop
  }

  return ret;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop

08005d4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d003      	beq.n	8005d6e <USBD_StdItfReq+0x22>
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d001      	beq.n	8005d6e <USBD_StdItfReq+0x22>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d12a      	bne.n	8005dc4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d74:	3b01      	subs	r3, #1
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d81d      	bhi.n	8005db6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	889b      	ldrh	r3, [r3, #4]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d813      	bhi.n	8005dac <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	88db      	ldrh	r3, [r3, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d110      	bne.n	8005dc0 <USBD_StdItfReq+0x74>
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10d      	bne.n	8005dc0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fd4d 	bl	8006844 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005daa:	e009      	b.n	8005dc0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fc80 	bl	80066b4 <USBD_CtlError>
          break;
 8005db4:	e004      	b.n	8005dc0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fc7b 	bl	80066b4 <USBD_CtlError>
          break;
 8005dbe:	e000      	b.n	8005dc2 <USBD_StdItfReq+0x76>
          break;
 8005dc0:	bf00      	nop
      }
      break;
 8005dc2:	e004      	b.n	8005dce <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fc74 	bl	80066b4 <USBD_CtlError>
      break;
 8005dcc:	bf00      	nop
  }

  return USBD_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	889b      	ldrh	r3, [r3, #4]
 8005dea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d004      	beq.n	8005e02 <USBD_StdEPReq+0x2a>
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d002      	beq.n	8005e02 <USBD_StdEPReq+0x2a>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <USBD_StdEPReq+0x3a>
 8005e00:	e13d      	b.n	800607e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
      break;
 8005e10:	e13a      	b.n	8006088 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d10a      	bne.n	8005e34 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	4798      	blx	r3
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	e12a      	b.n	800608a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d03e      	beq.n	8005eba <USBD_StdEPReq+0xe2>
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d002      	beq.n	8005e46 <USBD_StdEPReq+0x6e>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d070      	beq.n	8005f26 <USBD_StdEPReq+0x14e>
 8005e44:	e115      	b.n	8006072 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d002      	beq.n	8005e56 <USBD_StdEPReq+0x7e>
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d015      	beq.n	8005e80 <USBD_StdEPReq+0xa8>
 8005e54:	e02b      	b.n	8005eae <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00c      	beq.n	8005e76 <USBD_StdEPReq+0x9e>
 8005e5c:	7bbb      	ldrb	r3, [r7, #14]
 8005e5e:	2b80      	cmp	r3, #128	; 0x80
 8005e60:	d009      	beq.n	8005e76 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 f880 	bl	8006f6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e6c:	2180      	movs	r1, #128	; 0x80
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 f87c 	bl	8006f6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e74:	e020      	b.n	8005eb8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fc1b 	bl	80066b4 <USBD_CtlError>
              break;
 8005e7e:	e01b      	b.n	8005eb8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	885b      	ldrh	r3, [r3, #2]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10e      	bne.n	8005ea6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <USBD_StdEPReq+0xce>
 8005e8e:	7bbb      	ldrb	r3, [r7, #14]
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d008      	beq.n	8005ea6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	88db      	ldrh	r3, [r3, #6]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 f863 	bl	8006f6c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fccc 	bl	8006844 <USBD_CtlSendStatus>

              break;
 8005eac:	e004      	b.n	8005eb8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fbff 	bl	80066b4 <USBD_CtlError>
              break;
 8005eb6:	bf00      	nop
          }
          break;
 8005eb8:	e0e0      	b.n	800607c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d002      	beq.n	8005eca <USBD_StdEPReq+0xf2>
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d015      	beq.n	8005ef4 <USBD_StdEPReq+0x11c>
 8005ec8:	e026      	b.n	8005f18 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eca:	7bbb      	ldrb	r3, [r7, #14]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00c      	beq.n	8005eea <USBD_StdEPReq+0x112>
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d009      	beq.n	8005eea <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 f846 	bl	8006f6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ee0:	2180      	movs	r1, #128	; 0x80
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 f842 	bl	8006f6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ee8:	e01c      	b.n	8005f24 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fbe1 	bl	80066b4 <USBD_CtlError>
              break;
 8005ef2:	e017      	b.n	8005f24 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	885b      	ldrh	r3, [r3, #2]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d112      	bne.n	8005f22 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d004      	beq.n	8005f10 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 f84d 	bl	8006faa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fc97 	bl	8006844 <USBD_CtlSendStatus>
              }
              break;
 8005f16:	e004      	b.n	8005f22 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fbca 	bl	80066b4 <USBD_CtlError>
              break;
 8005f20:	e000      	b.n	8005f24 <USBD_StdEPReq+0x14c>
              break;
 8005f22:	bf00      	nop
          }
          break;
 8005f24:	e0aa      	b.n	800607c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d002      	beq.n	8005f36 <USBD_StdEPReq+0x15e>
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d032      	beq.n	8005f9a <USBD_StdEPReq+0x1c2>
 8005f34:	e097      	b.n	8006066 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <USBD_StdEPReq+0x174>
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	2b80      	cmp	r3, #128	; 0x80
 8005f40:	d004      	beq.n	8005f4c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fbb5 	bl	80066b4 <USBD_CtlError>
                break;
 8005f4a:	e091      	b.n	8006070 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da0b      	bge.n	8005f6c <USBD_StdEPReq+0x194>
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	3310      	adds	r3, #16
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	3304      	adds	r3, #4
 8005f6a:	e00b      	b.n	8005f84 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	3304      	adds	r3, #4
 8005f84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fbf8 	bl	8006788 <USBD_CtlSendData>
              break;
 8005f98:	e06a      	b.n	8006070 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	da11      	bge.n	8005fc6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3318      	adds	r3, #24
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d117      	bne.n	8005fec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fb78 	bl	80066b4 <USBD_CtlError>
                  break;
 8005fc4:	e054      	b.n	8006070 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	f003 020f 	and.w	r2, r3, #15
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb65 	bl	80066b4 <USBD_CtlError>
                  break;
 8005fea:	e041      	b.n	8006070 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da0b      	bge.n	800600c <USBD_StdEPReq+0x234>
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	3310      	adds	r3, #16
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	3304      	adds	r3, #4
 800600a:	e00b      	b.n	8006024 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800600c:	7bbb      	ldrb	r3, [r7, #14]
 800600e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	4413      	add	r3, r2
 8006022:	3304      	adds	r3, #4
 8006024:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006026:	7bbb      	ldrb	r3, [r7, #14]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <USBD_StdEPReq+0x25a>
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d103      	bne.n	800603a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e00e      	b.n	8006058 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 ffd2 	bl	8006fe8 <USBD_LL_IsStallEP>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	e002      	b.n	8006058 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2202      	movs	r2, #2
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fb92 	bl	8006788 <USBD_CtlSendData>
              break;
 8006064:	e004      	b.n	8006070 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fb23 	bl	80066b4 <USBD_CtlError>
              break;
 800606e:	bf00      	nop
          }
          break;
 8006070:	e004      	b.n	800607c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fb1d 	bl	80066b4 <USBD_CtlError>
          break;
 800607a:	bf00      	nop
      }
      break;
 800607c:	e004      	b.n	8006088 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb17 	bl	80066b4 <USBD_CtlError>
      break;
 8006086:	bf00      	nop
  }

  return ret;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	885b      	ldrh	r3, [r3, #2]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	2b06      	cmp	r3, #6
 80060b6:	f200 8128 	bhi.w	800630a <USBD_GetDescriptor+0x276>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <USBD_GetDescriptor+0x2c>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060dd 	.word	0x080060dd
 80060c4:	080060f5 	.word	0x080060f5
 80060c8:	08006135 	.word	0x08006135
 80060cc:	0800630b 	.word	0x0800630b
 80060d0:	0800630b 	.word	0x0800630b
 80060d4:	080062ab 	.word	0x080062ab
 80060d8:	080062d7 	.word	0x080062d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	7c12      	ldrb	r2, [r2, #16]
 80060e8:	f107 0108 	add.w	r1, r7, #8
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
 80060f0:	60f8      	str	r0, [r7, #12]
      break;
 80060f2:	e112      	b.n	800631a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7c1b      	ldrb	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10d      	bne.n	8006118 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	f107 0208 	add.w	r2, r7, #8
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
 800610c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3301      	adds	r3, #1
 8006112:	2202      	movs	r2, #2
 8006114:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006116:	e100      	b.n	800631a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	f107 0208 	add.w	r2, r7, #8
 8006124:	4610      	mov	r0, r2
 8006126:	4798      	blx	r3
 8006128:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3301      	adds	r3, #1
 800612e:	2202      	movs	r2, #2
 8006130:	701a      	strb	r2, [r3, #0]
      break;
 8006132:	e0f2      	b.n	800631a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b05      	cmp	r3, #5
 800613c:	f200 80ac 	bhi.w	8006298 <USBD_GetDescriptor+0x204>
 8006140:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <USBD_GetDescriptor+0xb4>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	08006161 	.word	0x08006161
 800614c:	08006195 	.word	0x08006195
 8006150:	080061c9 	.word	0x080061c9
 8006154:	080061fd 	.word	0x080061fd
 8006158:	08006231 	.word	0x08006231
 800615c:	08006265 	.word	0x08006265
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	7c12      	ldrb	r2, [r2, #16]
 8006178:	f107 0108 	add.w	r1, r7, #8
 800617c:	4610      	mov	r0, r2
 800617e:	4798      	blx	r3
 8006180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006182:	e091      	b.n	80062a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fa94 	bl	80066b4 <USBD_CtlError>
            err++;
 800618c:	7afb      	ldrb	r3, [r7, #11]
 800618e:	3301      	adds	r3, #1
 8006190:	72fb      	strb	r3, [r7, #11]
          break;
 8006192:	e089      	b.n	80062a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	7c12      	ldrb	r2, [r2, #16]
 80061ac:	f107 0108 	add.w	r1, r7, #8
 80061b0:	4610      	mov	r0, r2
 80061b2:	4798      	blx	r3
 80061b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061b6:	e077      	b.n	80062a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa7a 	bl	80066b4 <USBD_CtlError>
            err++;
 80061c0:	7afb      	ldrb	r3, [r7, #11]
 80061c2:	3301      	adds	r3, #1
 80061c4:	72fb      	strb	r3, [r7, #11]
          break;
 80061c6:	e06f      	b.n	80062a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00b      	beq.n	80061ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	7c12      	ldrb	r2, [r2, #16]
 80061e0:	f107 0108 	add.w	r1, r7, #8
 80061e4:	4610      	mov	r0, r2
 80061e6:	4798      	blx	r3
 80061e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ea:	e05d      	b.n	80062a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa60 	bl	80066b4 <USBD_CtlError>
            err++;
 80061f4:	7afb      	ldrb	r3, [r7, #11]
 80061f6:	3301      	adds	r3, #1
 80061f8:	72fb      	strb	r3, [r7, #11]
          break;
 80061fa:	e055      	b.n	80062a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00b      	beq.n	8006220 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	7c12      	ldrb	r2, [r2, #16]
 8006214:	f107 0108 	add.w	r1, r7, #8
 8006218:	4610      	mov	r0, r2
 800621a:	4798      	blx	r3
 800621c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800621e:	e043      	b.n	80062a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fa46 	bl	80066b4 <USBD_CtlError>
            err++;
 8006228:	7afb      	ldrb	r3, [r7, #11]
 800622a:	3301      	adds	r3, #1
 800622c:	72fb      	strb	r3, [r7, #11]
          break;
 800622e:	e03b      	b.n	80062a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	7c12      	ldrb	r2, [r2, #16]
 8006248:	f107 0108 	add.w	r1, r7, #8
 800624c:	4610      	mov	r0, r2
 800624e:	4798      	blx	r3
 8006250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006252:	e029      	b.n	80062a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fa2c 	bl	80066b4 <USBD_CtlError>
            err++;
 800625c:	7afb      	ldrb	r3, [r7, #11]
 800625e:	3301      	adds	r3, #1
 8006260:	72fb      	strb	r3, [r7, #11]
          break;
 8006262:	e021      	b.n	80062a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00b      	beq.n	8006288 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	7c12      	ldrb	r2, [r2, #16]
 800627c:	f107 0108 	add.w	r1, r7, #8
 8006280:	4610      	mov	r0, r2
 8006282:	4798      	blx	r3
 8006284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006286:	e00f      	b.n	80062a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa12 	bl	80066b4 <USBD_CtlError>
            err++;
 8006290:	7afb      	ldrb	r3, [r7, #11]
 8006292:	3301      	adds	r3, #1
 8006294:	72fb      	strb	r3, [r7, #11]
          break;
 8006296:	e007      	b.n	80062a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa0a 	bl	80066b4 <USBD_CtlError>
          err++;
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	3301      	adds	r3, #1
 80062a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80062a6:	e038      	b.n	800631a <USBD_GetDescriptor+0x286>
 80062a8:	e037      	b.n	800631a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	7c1b      	ldrb	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ba:	f107 0208 	add.w	r2, r7, #8
 80062be:	4610      	mov	r0, r2
 80062c0:	4798      	blx	r3
 80062c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062c4:	e029      	b.n	800631a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f9f3 	bl	80066b4 <USBD_CtlError>
        err++;
 80062ce:	7afb      	ldrb	r3, [r7, #11]
 80062d0:	3301      	adds	r3, #1
 80062d2:	72fb      	strb	r3, [r7, #11]
      break;
 80062d4:	e021      	b.n	800631a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7c1b      	ldrb	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10d      	bne.n	80062fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	f107 0208 	add.w	r2, r7, #8
 80062ea:	4610      	mov	r0, r2
 80062ec:	4798      	blx	r3
 80062ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	2207      	movs	r2, #7
 80062f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062f8:	e00f      	b.n	800631a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f9d9 	bl	80066b4 <USBD_CtlError>
        err++;
 8006302:	7afb      	ldrb	r3, [r7, #11]
 8006304:	3301      	adds	r3, #1
 8006306:	72fb      	strb	r3, [r7, #11]
      break;
 8006308:	e007      	b.n	800631a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f9d1 	bl	80066b4 <USBD_CtlError>
      err++;
 8006312:	7afb      	ldrb	r3, [r7, #11]
 8006314:	3301      	adds	r3, #1
 8006316:	72fb      	strb	r3, [r7, #11]
      break;
 8006318:	bf00      	nop
  }

  if (err != 0U)
 800631a:	7afb      	ldrb	r3, [r7, #11]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d11c      	bne.n	800635a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006320:	893b      	ldrh	r3, [r7, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d011      	beq.n	800634a <USBD_GetDescriptor+0x2b6>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	88db      	ldrh	r3, [r3, #6]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00d      	beq.n	800634a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	88da      	ldrh	r2, [r3, #6]
 8006332:	893b      	ldrh	r3, [r7, #8]
 8006334:	4293      	cmp	r3, r2
 8006336:	bf28      	it	cs
 8006338:	4613      	movcs	r3, r2
 800633a:	b29b      	uxth	r3, r3
 800633c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800633e:	893b      	ldrh	r3, [r7, #8]
 8006340:	461a      	mov	r2, r3
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fa1f 	bl	8006788 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	88db      	ldrh	r3, [r3, #6]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa76 	bl	8006844 <USBD_CtlSendStatus>
 8006358:	e000      	b.n	800635c <USBD_GetDescriptor+0x2c8>
    return;
 800635a:	bf00      	nop
    }
  }
}
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	889b      	ldrh	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d130      	bne.n	80063d8 <USBD_SetAddress+0x74>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	88db      	ldrh	r3, [r3, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d12c      	bne.n	80063d8 <USBD_SetAddress+0x74>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	885b      	ldrh	r3, [r3, #2]
 8006382:	2b7f      	cmp	r3, #127	; 0x7f
 8006384:	d828      	bhi.n	80063d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	885b      	ldrh	r3, [r3, #2]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006390:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006398:	2b03      	cmp	r3, #3
 800639a:	d104      	bne.n	80063a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f988 	bl	80066b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a4:	e01c      	b.n	80063e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7bfa      	ldrb	r2, [r7, #15]
 80063aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fe3d 	bl	8007032 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fa43 	bl	8006844 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063cc:	e008      	b.n	80063e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d6:	e003      	b.n	80063e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f96a 	bl	80066b4 <USBD_CtlError>
  }
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	885b      	ldrh	r3, [r3, #2]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	4b41      	ldr	r3, [pc, #260]	; (8006500 <USBD_SetConfig+0x118>)
 80063fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063fc:	4b40      	ldr	r3, [pc, #256]	; (8006500 <USBD_SetConfig+0x118>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d904      	bls.n	800640e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f954 	bl	80066b4 <USBD_CtlError>
 800640c:	e075      	b.n	80064fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006414:	2b02      	cmp	r3, #2
 8006416:	d002      	beq.n	800641e <USBD_SetConfig+0x36>
 8006418:	2b03      	cmp	r3, #3
 800641a:	d023      	beq.n	8006464 <USBD_SetConfig+0x7c>
 800641c:	e062      	b.n	80064e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800641e:	4b38      	ldr	r3, [pc, #224]	; (8006500 <USBD_SetConfig+0x118>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01a      	beq.n	800645c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006426:	4b36      	ldr	r3, [pc, #216]	; (8006500 <USBD_SetConfig+0x118>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2203      	movs	r2, #3
 8006434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006438:	4b31      	ldr	r3, [pc, #196]	; (8006500 <USBD_SetConfig+0x118>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff f9f3 	bl	800582a <USBD_SetClassConfig>
 8006444:	4603      	mov	r3, r0
 8006446:	2b02      	cmp	r3, #2
 8006448:	d104      	bne.n	8006454 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f931 	bl	80066b4 <USBD_CtlError>
            return;
 8006452:	e052      	b.n	80064fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9f5 	bl	8006844 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800645a:	e04e      	b.n	80064fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9f1 	bl	8006844 <USBD_CtlSendStatus>
        break;
 8006462:	e04a      	b.n	80064fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006464:	4b26      	ldr	r3, [pc, #152]	; (8006500 <USBD_SetConfig+0x118>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d112      	bne.n	8006492 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006474:	4b22      	ldr	r3, [pc, #136]	; (8006500 <USBD_SetConfig+0x118>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800647e:	4b20      	ldr	r3, [pc, #128]	; (8006500 <USBD_SetConfig+0x118>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff f9ef 	bl	8005868 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9da 	bl	8006844 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006490:	e033      	b.n	80064fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006492:	4b1b      	ldr	r3, [pc, #108]	; (8006500 <USBD_SetConfig+0x118>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d01d      	beq.n	80064dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff f9dd 	bl	8005868 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80064ae:	4b14      	ldr	r3, [pc, #80]	; (8006500 <USBD_SetConfig+0x118>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064b8:	4b11      	ldr	r3, [pc, #68]	; (8006500 <USBD_SetConfig+0x118>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff f9b3 	bl	800582a <USBD_SetClassConfig>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d104      	bne.n	80064d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f8f1 	bl	80066b4 <USBD_CtlError>
            return;
 80064d2:	e012      	b.n	80064fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f9b5 	bl	8006844 <USBD_CtlSendStatus>
        break;
 80064da:	e00e      	b.n	80064fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9b1 	bl	8006844 <USBD_CtlSendStatus>
        break;
 80064e2:	e00a      	b.n	80064fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f8e4 	bl	80066b4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80064ec:	4b04      	ldr	r3, [pc, #16]	; (8006500 <USBD_SetConfig+0x118>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff f9b8 	bl	8005868 <USBD_ClrClassConfig>
        break;
 80064f8:	bf00      	nop
    }
  }
}
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000378 	.word	0x20000378

08006504 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	88db      	ldrh	r3, [r3, #6]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d004      	beq.n	8006520 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f8cb 	bl	80066b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800651e:	e021      	b.n	8006564 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006526:	2b01      	cmp	r3, #1
 8006528:	db17      	blt.n	800655a <USBD_GetConfig+0x56>
 800652a:	2b02      	cmp	r3, #2
 800652c:	dd02      	ble.n	8006534 <USBD_GetConfig+0x30>
 800652e:	2b03      	cmp	r3, #3
 8006530:	d00b      	beq.n	800654a <USBD_GetConfig+0x46>
 8006532:	e012      	b.n	800655a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3308      	adds	r3, #8
 800653e:	2201      	movs	r2, #1
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f920 	bl	8006788 <USBD_CtlSendData>
        break;
 8006548:	e00c      	b.n	8006564 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3304      	adds	r3, #4
 800654e:	2201      	movs	r2, #1
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f918 	bl	8006788 <USBD_CtlSendData>
        break;
 8006558:	e004      	b.n	8006564 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8a9 	bl	80066b4 <USBD_CtlError>
        break;
 8006562:	bf00      	nop
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657c:	3b01      	subs	r3, #1
 800657e:	2b02      	cmp	r3, #2
 8006580:	d81e      	bhi.n	80065c0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	88db      	ldrh	r3, [r3, #6]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d004      	beq.n	8006594 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f891 	bl	80066b4 <USBD_CtlError>
        break;
 8006592:	e01a      	b.n	80065ca <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f043 0202 	orr.w	r2, r3, #2
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	330c      	adds	r3, #12
 80065b4:	2202      	movs	r2, #2
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f8e5 	bl	8006788 <USBD_CtlSendData>
      break;
 80065be:	e004      	b.n	80065ca <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f876 	bl	80066b4 <USBD_CtlError>
      break;
 80065c8:	bf00      	nop
  }
}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	885b      	ldrh	r3, [r3, #2]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d106      	bne.n	80065f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f929 	bl	8006844 <USBD_CtlSendStatus>
  }
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660a:	3b01      	subs	r3, #1
 800660c:	2b02      	cmp	r3, #2
 800660e:	d80b      	bhi.n	8006628 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d10c      	bne.n	8006632 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f90f 	bl	8006844 <USBD_CtlSendStatus>
      }
      break;
 8006626:	e004      	b.n	8006632 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f842 	bl	80066b4 <USBD_CtlError>
      break;
 8006630:	e000      	b.n	8006634 <USBD_ClrFeature+0x3a>
      break;
 8006632:	bf00      	nop
  }
}
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	785a      	ldrb	r2, [r3, #1]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	3302      	adds	r3, #2
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	b29a      	uxth	r2, r3
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	3303      	adds	r3, #3
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	b29b      	uxth	r3, r3
 800666a:	4413      	add	r3, r2
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	3304      	adds	r3, #4
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	b29a      	uxth	r2, r3
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	3305      	adds	r3, #5
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	b29b      	uxth	r3, r3
 8006686:	4413      	add	r3, r2
 8006688:	b29a      	uxth	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	3306      	adds	r3, #6
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	b29a      	uxth	r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	3307      	adds	r3, #7
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	4413      	add	r3, r2
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	80da      	strh	r2, [r3, #6]

}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc53 	bl	8006f6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80066c6:	2100      	movs	r1, #0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fc4f 	bl	8006f6c <USBD_LL_StallEP>
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d032      	beq.n	8006752 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f834 	bl	800675a <USBD_GetLen>
 80066f2:	4603      	mov	r3, r0
 80066f4:	3301      	adds	r3, #1
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	75fa      	strb	r2, [r7, #23]
 8006706:	461a      	mov	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4413      	add	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	75fa      	strb	r2, [r7, #23]
 8006718:	461a      	mov	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4413      	add	r3, r2
 800671e:	2203      	movs	r2, #3
 8006720:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006722:	e012      	b.n	800674a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	60fa      	str	r2, [r7, #12]
 800672a:	7dfa      	ldrb	r2, [r7, #23]
 800672c:	1c51      	adds	r1, r2, #1
 800672e:	75f9      	strb	r1, [r7, #23]
 8006730:	4611      	mov	r1, r2
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	440a      	add	r2, r1
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	75fa      	strb	r2, [r7, #23]
 8006740:	461a      	mov	r2, r3
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4413      	add	r3, r2
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e8      	bne.n	8006724 <USBD_GetString+0x4e>
    }
  }
}
 8006752:	bf00      	nop
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006766:	e005      	b.n	8006774 <USBD_GetLen+0x1a>
  {
    len++;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	3301      	adds	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3301      	adds	r3, #1
 8006772:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f5      	bne.n	8006768 <USBD_GetLen+0xe>
  }

  return len;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2202      	movs	r2, #2
 800679a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80067a4:	88fa      	ldrh	r2, [r7, #6]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	2100      	movs	r1, #0
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fc5d 	bl	8007070 <USBD_LL_Transmit>

  return USBD_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	2100      	movs	r1, #0
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fc4b 	bl	8007070 <USBD_LL_Transmit>

  return USBD_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2203      	movs	r2, #3
 80067f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80067fa:	88fa      	ldrh	r2, [r7, #6]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	2100      	movs	r1, #0
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fc50 	bl	80070b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	2100      	movs	r1, #0
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fc3e 	bl	80070b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2204      	movs	r2, #4
 8006850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006854:	2300      	movs	r3, #0
 8006856:	2200      	movs	r2, #0
 8006858:	2100      	movs	r1, #0
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fc08 	bl	8007070 <USBD_LL_Transmit>

  return USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2205      	movs	r2, #5
 8006876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800687a:	2300      	movs	r3, #0
 800687c:	2200      	movs	r2, #0
 800687e:	2100      	movs	r1, #0
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fc18 	bl	80070b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006894:	2200      	movs	r2, #0
 8006896:	4912      	ldr	r1, [pc, #72]	; (80068e0 <MX_USB_DEVICE_Init+0x50>)
 8006898:	4812      	ldr	r0, [pc, #72]	; (80068e4 <MX_USB_DEVICE_Init+0x54>)
 800689a:	f7fe ff6c 	bl	8005776 <USBD_Init>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80068a4:	f7fb f822 	bl	80018ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80068a8:	490f      	ldr	r1, [pc, #60]	; (80068e8 <MX_USB_DEVICE_Init+0x58>)
 80068aa:	480e      	ldr	r0, [pc, #56]	; (80068e4 <MX_USB_DEVICE_Init+0x54>)
 80068ac:	f7fe ff8e 	bl	80057cc <USBD_RegisterClass>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80068b6:	f7fb f819 	bl	80018ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80068ba:	490c      	ldr	r1, [pc, #48]	; (80068ec <MX_USB_DEVICE_Init+0x5c>)
 80068bc:	4809      	ldr	r0, [pc, #36]	; (80068e4 <MX_USB_DEVICE_Init+0x54>)
 80068be:	f7fe febf 	bl	8005640 <USBD_CDC_RegisterInterface>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80068c8:	f7fb f810 	bl	80018ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80068cc:	4805      	ldr	r0, [pc, #20]	; (80068e4 <MX_USB_DEVICE_Init+0x54>)
 80068ce:	f7fe ff96 	bl	80057fe <USBD_Start>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80068d8:	f7fb f808 	bl	80018ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068dc:	bf00      	nop
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000130 	.word	0x20000130
 80068e4:	2000068c 	.word	0x2000068c
 80068e8:	2000001c 	.word	0x2000001c
 80068ec:	20000120 	.word	0x20000120

080068f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068f4:	2200      	movs	r2, #0
 80068f6:	4905      	ldr	r1, [pc, #20]	; (800690c <CDC_Init_FS+0x1c>)
 80068f8:	4805      	ldr	r0, [pc, #20]	; (8006910 <CDC_Init_FS+0x20>)
 80068fa:	f7fe feb7 	bl	800566c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80068fe:	4905      	ldr	r1, [pc, #20]	; (8006914 <CDC_Init_FS+0x24>)
 8006900:	4803      	ldr	r0, [pc, #12]	; (8006910 <CDC_Init_FS+0x20>)
 8006902:	f7fe fecc 	bl	800569e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006906:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006908:	4618      	mov	r0, r3
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000b50 	.word	0x20000b50
 8006910:	2000068c 	.word	0x2000068c
 8006914:	20000950 	.word	0x20000950

08006918 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800691c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800691e:	4618      	mov	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
	...

08006928 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	71fb      	strb	r3, [r7, #7]
 8006934:	4613      	mov	r3, r2
 8006936:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	2b23      	cmp	r3, #35	; 0x23
 800693c:	d84a      	bhi.n	80069d4 <CDC_Control_FS+0xac>
 800693e:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <CDC_Control_FS+0x1c>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	080069d5 	.word	0x080069d5
 8006948:	080069d5 	.word	0x080069d5
 800694c:	080069d5 	.word	0x080069d5
 8006950:	080069d5 	.word	0x080069d5
 8006954:	080069d5 	.word	0x080069d5
 8006958:	080069d5 	.word	0x080069d5
 800695c:	080069d5 	.word	0x080069d5
 8006960:	080069d5 	.word	0x080069d5
 8006964:	080069d5 	.word	0x080069d5
 8006968:	080069d5 	.word	0x080069d5
 800696c:	080069d5 	.word	0x080069d5
 8006970:	080069d5 	.word	0x080069d5
 8006974:	080069d5 	.word	0x080069d5
 8006978:	080069d5 	.word	0x080069d5
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069d5 	.word	0x080069d5
 8006984:	080069d5 	.word	0x080069d5
 8006988:	080069d5 	.word	0x080069d5
 800698c:	080069d5 	.word	0x080069d5
 8006990:	080069d5 	.word	0x080069d5
 8006994:	080069d5 	.word	0x080069d5
 8006998:	080069d5 	.word	0x080069d5
 800699c:	080069d5 	.word	0x080069d5
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	080069d5 	.word	0x080069d5
 80069a8:	080069d5 	.word	0x080069d5
 80069ac:	080069d5 	.word	0x080069d5
 80069b0:	080069d5 	.word	0x080069d5
 80069b4:	080069d5 	.word	0x080069d5
 80069b8:	080069d5 	.word	0x080069d5
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	080069d5 	.word	0x080069d5
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	080069d5 	.word	0x080069d5
 80069cc:	080069d5 	.word	0x080069d5
 80069d0:	080069d5 	.word	0x080069d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80069d4:	bf00      	nop
  }

  return (USBD_OK);
 80069d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop

080069e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4808      	ldr	r0, [pc, #32]	; (8006a14 <CDC_Receive_FS+0x30>)
 80069f2:	f7fe fe54 	bl	800569e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80069f6:	4807      	ldr	r0, [pc, #28]	; (8006a14 <CDC_Receive_FS+0x30>)
 80069f8:	f7fe fe93 	bl	8005722 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fa fa18 	bl	8000e38 <CDC_ReceiveCallBack>
  return (USBD_OK);
 8006a08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	2000068c 	.word	0x2000068c

08006a18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a28:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <CDC_Transmit_FS+0x48>)
 8006a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e00b      	b.n	8006a56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a3e:	887b      	ldrh	r3, [r7, #2]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	4806      	ldr	r0, [pc, #24]	; (8006a60 <CDC_Transmit_FS+0x48>)
 8006a46:	f7fe fe11 	bl	800566c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a4a:	4805      	ldr	r0, [pc, #20]	; (8006a60 <CDC_Transmit_FS+0x48>)
 8006a4c:	f7fe fe3a 	bl	80056c4 <USBD_CDC_TransmitPacket>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	2000068c 	.word	0x2000068c

08006a64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	6039      	str	r1, [r7, #0]
 8006a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2212      	movs	r2, #18
 8006a74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a76:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000014c 	.word	0x2000014c

08006a88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	6039      	str	r1, [r7, #0]
 8006a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2204      	movs	r2, #4
 8006a98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a9a:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	20000160 	.word	0x20000160

08006aac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	6039      	str	r1, [r7, #0]
 8006ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	4907      	ldr	r1, [pc, #28]	; (8006ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ac2:	4808      	ldr	r0, [pc, #32]	; (8006ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ac4:	f7ff fe07 	bl	80066d6 <USBD_GetString>
 8006ac8:	e004      	b.n	8006ad4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	4904      	ldr	r1, [pc, #16]	; (8006ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ace:	4805      	ldr	r0, [pc, #20]	; (8006ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ad0:	f7ff fe01 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ad4:	4b02      	ldr	r3, [pc, #8]	; (8006ae0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000d50 	.word	0x20000d50
 8006ae4:	08008c7c 	.word	0x08008c7c

08006ae8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	6039      	str	r1, [r7, #0]
 8006af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	4904      	ldr	r1, [pc, #16]	; (8006b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006af8:	4804      	ldr	r0, [pc, #16]	; (8006b0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006afa:	f7ff fdec 	bl	80066d6 <USBD_GetString>
  return USBD_StrDesc;
 8006afe:	4b02      	ldr	r3, [pc, #8]	; (8006b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000d50 	.word	0x20000d50
 8006b0c:	08008c94 	.word	0x08008c94

08006b10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	6039      	str	r1, [r7, #0]
 8006b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	221a      	movs	r2, #26
 8006b20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b22:	f000 f843 	bl	8006bac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b26:	4b02      	ldr	r3, [pc, #8]	; (8006b30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20000164 	.word	0x20000164

08006b34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6039      	str	r1, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	4907      	ldr	r1, [pc, #28]	; (8006b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b4a:	4808      	ldr	r0, [pc, #32]	; (8006b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b4c:	f7ff fdc3 	bl	80066d6 <USBD_GetString>
 8006b50:	e004      	b.n	8006b5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	4904      	ldr	r1, [pc, #16]	; (8006b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b56:	4805      	ldr	r0, [pc, #20]	; (8006b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b58:	f7ff fdbd 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000d50 	.word	0x20000d50
 8006b6c:	08008ca8 	.word	0x08008ca8

08006b70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	6039      	str	r1, [r7, #0]
 8006b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d105      	bne.n	8006b8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	4907      	ldr	r1, [pc, #28]	; (8006ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b86:	4808      	ldr	r0, [pc, #32]	; (8006ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b88:	f7ff fda5 	bl	80066d6 <USBD_GetString>
 8006b8c:	e004      	b.n	8006b98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	4904      	ldr	r1, [pc, #16]	; (8006ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b92:	4805      	ldr	r0, [pc, #20]	; (8006ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b94:	f7ff fd9f 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b98:	4b02      	ldr	r3, [pc, #8]	; (8006ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000d50 	.word	0x20000d50
 8006ba8:	08008cb4 	.word	0x08008cb4

08006bac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006bb2:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <Get_SerialNum+0x44>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006bb8:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <Get_SerialNum+0x48>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <Get_SerialNum+0x4c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4413      	add	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	4909      	ldr	r1, [pc, #36]	; (8006bfc <Get_SerialNum+0x50>)
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f814 	bl	8006c04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bdc:	2204      	movs	r2, #4
 8006bde:	4908      	ldr	r1, [pc, #32]	; (8006c00 <Get_SerialNum+0x54>)
 8006be0:	68b8      	ldr	r0, [r7, #8]
 8006be2:	f000 f80f 	bl	8006c04 <IntToUnicode>
  }
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	1ffff7e8 	.word	0x1ffff7e8
 8006bf4:	1ffff7ec 	.word	0x1ffff7ec
 8006bf8:	1ffff7f0 	.word	0x1ffff7f0
 8006bfc:	20000166 	.word	0x20000166
 8006c00:	20000176 	.word	0x20000176

08006c04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
 8006c1a:	e027      	b.n	8006c6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	0f1b      	lsrs	r3, r3, #28
 8006c20:	2b09      	cmp	r3, #9
 8006c22:	d80b      	bhi.n	8006c3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	0f1b      	lsrs	r3, r3, #28
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	440b      	add	r3, r1
 8006c34:	3230      	adds	r2, #48	; 0x30
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e00a      	b.n	8006c52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	0f1b      	lsrs	r3, r3, #28
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4619      	mov	r1, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3237      	adds	r2, #55	; 0x37
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4413      	add	r3, r2
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	75fb      	strb	r3, [r7, #23]
 8006c6c:	7dfa      	ldrb	r2, [r7, #23]
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d3d3      	bcc.n	8006c1c <IntToUnicode+0x18>
  }
}
 8006c74:	bf00      	nop
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr
	...

08006c80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a0d      	ldr	r2, [pc, #52]	; (8006cc4 <HAL_PCD_MspInit+0x44>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d113      	bne.n	8006cba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <HAL_PCD_MspInit+0x48>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	4a0c      	ldr	r2, [pc, #48]	; (8006cc8 <HAL_PCD_MspInit+0x48>)
 8006c98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c9c:	61d3      	str	r3, [r2, #28]
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <HAL_PCD_MspInit+0x48>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006caa:	2200      	movs	r2, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	2014      	movs	r0, #20
 8006cb0:	f7fb f875 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006cb4:	2014      	movs	r0, #20
 8006cb6:	f7fb f88e 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40005c00 	.word	0x40005c00
 8006cc8:	40021000 	.word	0x40021000

08006ccc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f7fe fdd3 	bl	800588e <USBD_LL_SetupStage>
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	015b      	lsls	r3, r3, #5
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	4619      	mov	r1, r3
 8006d14:	f7fe fe06 	bl	8005924 <USBD_LL_DataOutStage>
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	015b      	lsls	r3, r3, #5
 8006d38:	4413      	add	r3, r2
 8006d3a:	333c      	adds	r3, #60	; 0x3c
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	4619      	mov	r1, r3
 8006d42:	f7fe fe60 	bl	8005a06 <USBD_LL_DataInStage>
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe ff70 	bl	8005c42 <USBD_LL_SOF>
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d001      	beq.n	8006d82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006d7e:	f7fa fdb5 	bl	80018ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d88:	7bfa      	ldrb	r2, [r7, #15]
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe ff20 	bl	8005bd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fed9 	bl	8005b50 <USBD_LL_Reset>
}
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe ff1a 	bl	8005bf0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <HAL_PCD_SuspendCallback+0x30>)
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	4a03      	ldr	r2, [pc, #12]	; (8006dd8 <HAL_PCD_SuspendCallback+0x30>)
 8006dca:	f043 0306 	orr.w	r3, r3, #6
 8006dce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	e000ed00 	.word	0xe000ed00

08006ddc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fe ff14 	bl	8005c18 <USBD_LL_Resume>
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006e00:	4a28      	ldr	r2, [pc, #160]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006e10:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e12:	4a25      	ldr	r2, [pc, #148]	; (8006ea8 <USBD_LL_Init+0xb0>)
 8006e14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006e16:	4b23      	ldr	r3, [pc, #140]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e18:	2208      	movs	r2, #8
 8006e1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006e1c:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e1e:	2202      	movs	r2, #2
 8006e20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006e22:	4b20      	ldr	r3, [pc, #128]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006e28:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006e2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006e34:	481b      	ldr	r0, [pc, #108]	; (8006ea4 <USBD_LL_Init+0xac>)
 8006e36:	f7fb f973 	bl	8002120 <HAL_PCD_Init>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006e40:	f7fa fd54 	bl	80018ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e4a:	2318      	movs	r3, #24
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	f7fc f80c 	bl	8002e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e5a:	2358      	movs	r3, #88	; 0x58
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2180      	movs	r1, #128	; 0x80
 8006e60:	f7fc f804 	bl	8002e6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e6a:	23c0      	movs	r3, #192	; 0xc0
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2181      	movs	r1, #129	; 0x81
 8006e70:	f7fb fffc 	bl	8002e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2101      	movs	r1, #1
 8006e82:	f7fb fff3 	bl	8002e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e90:	2200      	movs	r2, #0
 8006e92:	2182      	movs	r1, #130	; 0x82
 8006e94:	f7fb ffea 	bl	8002e6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000f50 	.word	0x20000f50
 8006ea8:	40005c00 	.word	0x40005c00

08006eac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fb fa0d 	bl	80022e2 <HAL_PCD_Start>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f948 	bl	8007164 <USBD_Get_USB_Status>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	461a      	mov	r2, r3
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	70fb      	strb	r3, [r7, #3]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70bb      	strb	r3, [r7, #2]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f0a:	78bb      	ldrb	r3, [r7, #2]
 8006f0c:	883a      	ldrh	r2, [r7, #0]
 8006f0e:	78f9      	ldrb	r1, [r7, #3]
 8006f10:	f7fb fb40 	bl	8002594 <HAL_PCD_EP_Open>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f922 	bl	8007164 <USBD_Get_USB_Status>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f48:	78fa      	ldrb	r2, [r7, #3]
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fb fb81 	bl	8002654 <HAL_PCD_EP_Close>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 f903 	bl	8007164 <USBD_Get_USB_Status>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fb fc2b 	bl	80027e6 <HAL_PCD_EP_SetStall>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f8e4 	bl	8007164 <USBD_Get_USB_Status>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc4:	78fa      	ldrb	r2, [r7, #3]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fb fc66 	bl	800289a <HAL_PCD_EP_ClrStall>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 f8c5 	bl	8007164 <USBD_Get_USB_Status>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ffa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007000:	2b00      	cmp	r3, #0
 8007002:	da08      	bge.n	8007016 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	015b      	lsls	r3, r3, #5
 800700e:	4413      	add	r3, r2
 8007010:	332a      	adds	r3, #42	; 0x2a
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	e008      	b.n	8007028 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	015b      	lsls	r3, r3, #5
 8007020:	4413      	add	r3, r2
 8007022:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f7fb fa7a 	bl	800254a <HAL_PCD_SetAddress>
 8007056:	4603      	mov	r3, r0
 8007058:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	4618      	mov	r0, r3
 800705e:	f000 f881 	bl	8007164 <USBD_Get_USB_Status>
 8007062:	4603      	mov	r3, r0
 8007064:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007066:	7bbb      	ldrb	r3, [r7, #14]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	461a      	mov	r2, r3
 800707c:	460b      	mov	r3, r1
 800707e:	72fb      	strb	r3, [r7, #11]
 8007080:	4613      	mov	r3, r2
 8007082:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007092:	893b      	ldrh	r3, [r7, #8]
 8007094:	7af9      	ldrb	r1, [r7, #11]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	f7fb fb6c 	bl	8002774 <HAL_PCD_EP_Transmit>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f85e 	bl	8007164 <USBD_Get_USB_Status>
 80070a8:	4603      	mov	r3, r0
 80070aa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80070ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b086      	sub	sp, #24
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	461a      	mov	r2, r3
 80070c2:	460b      	mov	r3, r1
 80070c4:	72fb      	strb	r3, [r7, #11]
 80070c6:	4613      	mov	r3, r2
 80070c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80070d8:	893b      	ldrh	r3, [r7, #8]
 80070da:	7af9      	ldrb	r1, [r7, #11]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	f7fb fafb 	bl	80026d8 <HAL_PCD_EP_Receive>
 80070e2:	4603      	mov	r3, r0
 80070e4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 f83b 	bl	8007164 <USBD_Get_USB_Status>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80070f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800710e:	78fa      	ldrb	r2, [r7, #3]
 8007110:	4611      	mov	r1, r2
 8007112:	4618      	mov	r0, r3
 8007114:	f7fb fb1a 	bl	800274c <HAL_PCD_EP_GetRxCount>
 8007118:	4603      	mov	r3, r0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <USBD_static_malloc+0x14>)
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr
 8007138:	2000037c 	.word	0x2000037c

0800713c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]

}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr

0800714e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	2b03      	cmp	r3, #3
 8007176:	d817      	bhi.n	80071a8 <USBD_Get_USB_Status+0x44>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <USBD_Get_USB_Status+0x1c>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	08007191 	.word	0x08007191
 8007184:	08007197 	.word	0x08007197
 8007188:	0800719d 	.word	0x0800719d
 800718c:	080071a3 	.word	0x080071a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]
    break;
 8007194:	e00b      	b.n	80071ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007196:	2302      	movs	r3, #2
 8007198:	73fb      	strb	r3, [r7, #15]
    break;
 800719a:	e008      	b.n	80071ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800719c:	2301      	movs	r3, #1
 800719e:	73fb      	strb	r3, [r7, #15]
    break;
 80071a0:	e005      	b.n	80071ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071a2:	2302      	movs	r3, #2
 80071a4:	73fb      	strb	r3, [r7, #15]
    break;
 80071a6:	e002      	b.n	80071ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80071a8:	2302      	movs	r3, #2
 80071aa:	73fb      	strb	r3, [r7, #15]
    break;
 80071ac:	bf00      	nop
  }
  return usb_status;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop

080071bc <__errno>:
 80071bc:	4b01      	ldr	r3, [pc, #4]	; (80071c4 <__errno+0x8>)
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20000180 	.word	0x20000180

080071c8 <__libc_init_array>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	2500      	movs	r5, #0
 80071cc:	4e0c      	ldr	r6, [pc, #48]	; (8007200 <__libc_init_array+0x38>)
 80071ce:	4c0d      	ldr	r4, [pc, #52]	; (8007204 <__libc_init_array+0x3c>)
 80071d0:	1ba4      	subs	r4, r4, r6
 80071d2:	10a4      	asrs	r4, r4, #2
 80071d4:	42a5      	cmp	r5, r4
 80071d6:	d109      	bne.n	80071ec <__libc_init_array+0x24>
 80071d8:	f001 fd3a 	bl	8008c50 <_init>
 80071dc:	2500      	movs	r5, #0
 80071de:	4e0a      	ldr	r6, [pc, #40]	; (8007208 <__libc_init_array+0x40>)
 80071e0:	4c0a      	ldr	r4, [pc, #40]	; (800720c <__libc_init_array+0x44>)
 80071e2:	1ba4      	subs	r4, r4, r6
 80071e4:	10a4      	asrs	r4, r4, #2
 80071e6:	42a5      	cmp	r5, r4
 80071e8:	d105      	bne.n	80071f6 <__libc_init_array+0x2e>
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071f0:	4798      	blx	r3
 80071f2:	3501      	adds	r5, #1
 80071f4:	e7ee      	b.n	80071d4 <__libc_init_array+0xc>
 80071f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071fa:	4798      	blx	r3
 80071fc:	3501      	adds	r5, #1
 80071fe:	e7f2      	b.n	80071e6 <__libc_init_array+0x1e>
 8007200:	08008f00 	.word	0x08008f00
 8007204:	08008f00 	.word	0x08008f00
 8007208:	08008f00 	.word	0x08008f00
 800720c:	08008f04 	.word	0x08008f04

08007210 <memset>:
 8007210:	4603      	mov	r3, r0
 8007212:	4402      	add	r2, r0
 8007214:	4293      	cmp	r3, r2
 8007216:	d100      	bne.n	800721a <memset+0xa>
 8007218:	4770      	bx	lr
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f9      	b.n	8007214 <memset+0x4>

08007220 <__cvt>:
 8007220:	2b00      	cmp	r3, #0
 8007222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007226:	461e      	mov	r6, r3
 8007228:	bfbb      	ittet	lt
 800722a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800722e:	461e      	movlt	r6, r3
 8007230:	2300      	movge	r3, #0
 8007232:	232d      	movlt	r3, #45	; 0x2d
 8007234:	b088      	sub	sp, #32
 8007236:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007238:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800723c:	f027 0720 	bic.w	r7, r7, #32
 8007240:	2f46      	cmp	r7, #70	; 0x46
 8007242:	4614      	mov	r4, r2
 8007244:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007246:	700b      	strb	r3, [r1, #0]
 8007248:	d004      	beq.n	8007254 <__cvt+0x34>
 800724a:	2f45      	cmp	r7, #69	; 0x45
 800724c:	d100      	bne.n	8007250 <__cvt+0x30>
 800724e:	3501      	adds	r5, #1
 8007250:	2302      	movs	r3, #2
 8007252:	e000      	b.n	8007256 <__cvt+0x36>
 8007254:	2303      	movs	r3, #3
 8007256:	aa07      	add	r2, sp, #28
 8007258:	9204      	str	r2, [sp, #16]
 800725a:	aa06      	add	r2, sp, #24
 800725c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007260:	e9cd 3500 	strd	r3, r5, [sp]
 8007264:	4622      	mov	r2, r4
 8007266:	4633      	mov	r3, r6
 8007268:	f000 fba6 	bl	80079b8 <_dtoa_r>
 800726c:	2f47      	cmp	r7, #71	; 0x47
 800726e:	4680      	mov	r8, r0
 8007270:	d102      	bne.n	8007278 <__cvt+0x58>
 8007272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007274:	07db      	lsls	r3, r3, #31
 8007276:	d526      	bpl.n	80072c6 <__cvt+0xa6>
 8007278:	2f46      	cmp	r7, #70	; 0x46
 800727a:	eb08 0905 	add.w	r9, r8, r5
 800727e:	d111      	bne.n	80072a4 <__cvt+0x84>
 8007280:	f898 3000 	ldrb.w	r3, [r8]
 8007284:	2b30      	cmp	r3, #48	; 0x30
 8007286:	d10a      	bne.n	800729e <__cvt+0x7e>
 8007288:	2200      	movs	r2, #0
 800728a:	2300      	movs	r3, #0
 800728c:	4620      	mov	r0, r4
 800728e:	4631      	mov	r1, r6
 8007290:	f7f9 fb8a 	bl	80009a8 <__aeabi_dcmpeq>
 8007294:	b918      	cbnz	r0, 800729e <__cvt+0x7e>
 8007296:	f1c5 0501 	rsb	r5, r5, #1
 800729a:	f8ca 5000 	str.w	r5, [sl]
 800729e:	f8da 3000 	ldr.w	r3, [sl]
 80072a2:	4499      	add	r9, r3
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	4620      	mov	r0, r4
 80072aa:	4631      	mov	r1, r6
 80072ac:	f7f9 fb7c 	bl	80009a8 <__aeabi_dcmpeq>
 80072b0:	b938      	cbnz	r0, 80072c2 <__cvt+0xa2>
 80072b2:	2230      	movs	r2, #48	; 0x30
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	454b      	cmp	r3, r9
 80072b8:	d205      	bcs.n	80072c6 <__cvt+0xa6>
 80072ba:	1c59      	adds	r1, r3, #1
 80072bc:	9107      	str	r1, [sp, #28]
 80072be:	701a      	strb	r2, [r3, #0]
 80072c0:	e7f8      	b.n	80072b4 <__cvt+0x94>
 80072c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80072c6:	4640      	mov	r0, r8
 80072c8:	9b07      	ldr	r3, [sp, #28]
 80072ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072cc:	eba3 0308 	sub.w	r3, r3, r8
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	b008      	add	sp, #32
 80072d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080072d8 <__exponent>:
 80072d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072da:	2900      	cmp	r1, #0
 80072dc:	bfb4      	ite	lt
 80072de:	232d      	movlt	r3, #45	; 0x2d
 80072e0:	232b      	movge	r3, #43	; 0x2b
 80072e2:	4604      	mov	r4, r0
 80072e4:	bfb8      	it	lt
 80072e6:	4249      	neglt	r1, r1
 80072e8:	2909      	cmp	r1, #9
 80072ea:	f804 2b02 	strb.w	r2, [r4], #2
 80072ee:	7043      	strb	r3, [r0, #1]
 80072f0:	dd21      	ble.n	8007336 <__exponent+0x5e>
 80072f2:	f10d 0307 	add.w	r3, sp, #7
 80072f6:	461f      	mov	r7, r3
 80072f8:	260a      	movs	r6, #10
 80072fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80072fe:	fb06 1115 	mls	r1, r6, r5, r1
 8007302:	2d09      	cmp	r5, #9
 8007304:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007308:	f803 1c01 	strb.w	r1, [r3, #-1]
 800730c:	f103 32ff 	add.w	r2, r3, #4294967295
 8007310:	4629      	mov	r1, r5
 8007312:	dc09      	bgt.n	8007328 <__exponent+0x50>
 8007314:	3130      	adds	r1, #48	; 0x30
 8007316:	3b02      	subs	r3, #2
 8007318:	f802 1c01 	strb.w	r1, [r2, #-1]
 800731c:	42bb      	cmp	r3, r7
 800731e:	4622      	mov	r2, r4
 8007320:	d304      	bcc.n	800732c <__exponent+0x54>
 8007322:	1a10      	subs	r0, r2, r0
 8007324:	b003      	add	sp, #12
 8007326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007328:	4613      	mov	r3, r2
 800732a:	e7e6      	b.n	80072fa <__exponent+0x22>
 800732c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007330:	f804 2b01 	strb.w	r2, [r4], #1
 8007334:	e7f2      	b.n	800731c <__exponent+0x44>
 8007336:	2330      	movs	r3, #48	; 0x30
 8007338:	4419      	add	r1, r3
 800733a:	7083      	strb	r3, [r0, #2]
 800733c:	1d02      	adds	r2, r0, #4
 800733e:	70c1      	strb	r1, [r0, #3]
 8007340:	e7ef      	b.n	8007322 <__exponent+0x4a>
	...

08007344 <_printf_float>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	b091      	sub	sp, #68	; 0x44
 800734a:	460c      	mov	r4, r1
 800734c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800734e:	4693      	mov	fp, r2
 8007350:	461e      	mov	r6, r3
 8007352:	4605      	mov	r5, r0
 8007354:	f001 f8e4 	bl	8008520 <_localeconv_r>
 8007358:	6803      	ldr	r3, [r0, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	9309      	str	r3, [sp, #36]	; 0x24
 800735e:	f7f8 fef7 	bl	8000150 <strlen>
 8007362:	2300      	movs	r3, #0
 8007364:	930e      	str	r3, [sp, #56]	; 0x38
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	900a      	str	r0, [sp, #40]	; 0x28
 800736a:	3307      	adds	r3, #7
 800736c:	f023 0307 	bic.w	r3, r3, #7
 8007370:	f103 0208 	add.w	r2, r3, #8
 8007374:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007378:	f8d4 a000 	ldr.w	sl, [r4]
 800737c:	603a      	str	r2, [r7, #0]
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007386:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800738a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800738e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007390:	f04f 32ff 	mov.w	r2, #4294967295
 8007394:	4ba6      	ldr	r3, [pc, #664]	; (8007630 <_printf_float+0x2ec>)
 8007396:	4638      	mov	r0, r7
 8007398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800739a:	f7f9 fb37 	bl	8000a0c <__aeabi_dcmpun>
 800739e:	bb68      	cbnz	r0, 80073fc <_printf_float+0xb8>
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	4ba2      	ldr	r3, [pc, #648]	; (8007630 <_printf_float+0x2ec>)
 80073a6:	4638      	mov	r0, r7
 80073a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073aa:	f7f9 fb11 	bl	80009d0 <__aeabi_dcmple>
 80073ae:	bb28      	cbnz	r0, 80073fc <_printf_float+0xb8>
 80073b0:	2200      	movs	r2, #0
 80073b2:	2300      	movs	r3, #0
 80073b4:	4638      	mov	r0, r7
 80073b6:	4649      	mov	r1, r9
 80073b8:	f7f9 fb00 	bl	80009bc <__aeabi_dcmplt>
 80073bc:	b110      	cbz	r0, 80073c4 <_printf_float+0x80>
 80073be:	232d      	movs	r3, #45	; 0x2d
 80073c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c4:	4f9b      	ldr	r7, [pc, #620]	; (8007634 <_printf_float+0x2f0>)
 80073c6:	4b9c      	ldr	r3, [pc, #624]	; (8007638 <_printf_float+0x2f4>)
 80073c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073cc:	bf98      	it	ls
 80073ce:	461f      	movls	r7, r3
 80073d0:	2303      	movs	r3, #3
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	6123      	str	r3, [r4, #16]
 80073d8:	f02a 0304 	bic.w	r3, sl, #4
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	9600      	str	r6, [sp, #0]
 80073e0:	465b      	mov	r3, fp
 80073e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80073e4:	4621      	mov	r1, r4
 80073e6:	4628      	mov	r0, r5
 80073e8:	f000 f9e2 	bl	80077b0 <_printf_common>
 80073ec:	3001      	adds	r0, #1
 80073ee:	f040 8090 	bne.w	8007512 <_printf_float+0x1ce>
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	b011      	add	sp, #68	; 0x44
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	463a      	mov	r2, r7
 80073fe:	464b      	mov	r3, r9
 8007400:	4638      	mov	r0, r7
 8007402:	4649      	mov	r1, r9
 8007404:	f7f9 fb02 	bl	8000a0c <__aeabi_dcmpun>
 8007408:	b110      	cbz	r0, 8007410 <_printf_float+0xcc>
 800740a:	4f8c      	ldr	r7, [pc, #560]	; (800763c <_printf_float+0x2f8>)
 800740c:	4b8c      	ldr	r3, [pc, #560]	; (8007640 <_printf_float+0x2fc>)
 800740e:	e7db      	b.n	80073c8 <_printf_float+0x84>
 8007410:	6863      	ldr	r3, [r4, #4]
 8007412:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007416:	1c59      	adds	r1, r3, #1
 8007418:	a80d      	add	r0, sp, #52	; 0x34
 800741a:	a90e      	add	r1, sp, #56	; 0x38
 800741c:	d140      	bne.n	80074a0 <_printf_float+0x15c>
 800741e:	2306      	movs	r3, #6
 8007420:	6063      	str	r3, [r4, #4]
 8007422:	f04f 0c00 	mov.w	ip, #0
 8007426:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800742a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800742e:	6863      	ldr	r3, [r4, #4]
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	463a      	mov	r2, r7
 800743a:	464b      	mov	r3, r9
 800743c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007440:	4628      	mov	r0, r5
 8007442:	f7ff feed 	bl	8007220 <__cvt>
 8007446:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800744a:	2b47      	cmp	r3, #71	; 0x47
 800744c:	4607      	mov	r7, r0
 800744e:	d109      	bne.n	8007464 <_printf_float+0x120>
 8007450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007452:	1cd8      	adds	r0, r3, #3
 8007454:	db02      	blt.n	800745c <_printf_float+0x118>
 8007456:	6862      	ldr	r2, [r4, #4]
 8007458:	4293      	cmp	r3, r2
 800745a:	dd47      	ble.n	80074ec <_printf_float+0x1a8>
 800745c:	f1a8 0802 	sub.w	r8, r8, #2
 8007460:	fa5f f888 	uxtb.w	r8, r8
 8007464:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007468:	990d      	ldr	r1, [sp, #52]	; 0x34
 800746a:	d824      	bhi.n	80074b6 <_printf_float+0x172>
 800746c:	3901      	subs	r1, #1
 800746e:	4642      	mov	r2, r8
 8007470:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007474:	910d      	str	r1, [sp, #52]	; 0x34
 8007476:	f7ff ff2f 	bl	80072d8 <__exponent>
 800747a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800747c:	4681      	mov	r9, r0
 800747e:	1813      	adds	r3, r2, r0
 8007480:	2a01      	cmp	r2, #1
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	dc02      	bgt.n	800748c <_printf_float+0x148>
 8007486:	6822      	ldr	r2, [r4, #0]
 8007488:	07d1      	lsls	r1, r2, #31
 800748a:	d501      	bpl.n	8007490 <_printf_float+0x14c>
 800748c:	3301      	adds	r3, #1
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0a2      	beq.n	80073de <_printf_float+0x9a>
 8007498:	232d      	movs	r3, #45	; 0x2d
 800749a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800749e:	e79e      	b.n	80073de <_printf_float+0x9a>
 80074a0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80074a4:	f000 816e 	beq.w	8007784 <_printf_float+0x440>
 80074a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074ac:	d1b9      	bne.n	8007422 <_printf_float+0xde>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1b7      	bne.n	8007422 <_printf_float+0xde>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e7b4      	b.n	8007420 <_printf_float+0xdc>
 80074b6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80074ba:	d119      	bne.n	80074f0 <_printf_float+0x1ac>
 80074bc:	2900      	cmp	r1, #0
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	dd0c      	ble.n	80074dc <_printf_float+0x198>
 80074c2:	6121      	str	r1, [r4, #16]
 80074c4:	b913      	cbnz	r3, 80074cc <_printf_float+0x188>
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	07d2      	lsls	r2, r2, #31
 80074ca:	d502      	bpl.n	80074d2 <_printf_float+0x18e>
 80074cc:	3301      	adds	r3, #1
 80074ce:	440b      	add	r3, r1
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074d4:	f04f 0900 	mov.w	r9, #0
 80074d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80074da:	e7d9      	b.n	8007490 <_printf_float+0x14c>
 80074dc:	b913      	cbnz	r3, 80074e4 <_printf_float+0x1a0>
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	07d0      	lsls	r0, r2, #31
 80074e2:	d501      	bpl.n	80074e8 <_printf_float+0x1a4>
 80074e4:	3302      	adds	r3, #2
 80074e6:	e7f3      	b.n	80074d0 <_printf_float+0x18c>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e7f1      	b.n	80074d0 <_printf_float+0x18c>
 80074ec:	f04f 0867 	mov.w	r8, #103	; 0x67
 80074f0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80074f4:	4293      	cmp	r3, r2
 80074f6:	db05      	blt.n	8007504 <_printf_float+0x1c0>
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	07d1      	lsls	r1, r2, #31
 80074fe:	d5e8      	bpl.n	80074d2 <_printf_float+0x18e>
 8007500:	3301      	adds	r3, #1
 8007502:	e7e5      	b.n	80074d0 <_printf_float+0x18c>
 8007504:	2b00      	cmp	r3, #0
 8007506:	bfcc      	ite	gt
 8007508:	2301      	movgt	r3, #1
 800750a:	f1c3 0302 	rsble	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	e7de      	b.n	80074d0 <_printf_float+0x18c>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	055a      	lsls	r2, r3, #21
 8007516:	d407      	bmi.n	8007528 <_printf_float+0x1e4>
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	463a      	mov	r2, r7
 800751c:	4659      	mov	r1, fp
 800751e:	4628      	mov	r0, r5
 8007520:	47b0      	blx	r6
 8007522:	3001      	adds	r0, #1
 8007524:	d129      	bne.n	800757a <_printf_float+0x236>
 8007526:	e764      	b.n	80073f2 <_printf_float+0xae>
 8007528:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800752c:	f240 80d7 	bls.w	80076de <_printf_float+0x39a>
 8007530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007534:	2200      	movs	r2, #0
 8007536:	2300      	movs	r3, #0
 8007538:	f7f9 fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800753c:	b388      	cbz	r0, 80075a2 <_printf_float+0x25e>
 800753e:	2301      	movs	r3, #1
 8007540:	4a40      	ldr	r2, [pc, #256]	; (8007644 <_printf_float+0x300>)
 8007542:	4659      	mov	r1, fp
 8007544:	4628      	mov	r0, r5
 8007546:	47b0      	blx	r6
 8007548:	3001      	adds	r0, #1
 800754a:	f43f af52 	beq.w	80073f2 <_printf_float+0xae>
 800754e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007552:	429a      	cmp	r2, r3
 8007554:	db02      	blt.n	800755c <_printf_float+0x218>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	07d8      	lsls	r0, r3, #31
 800755a:	d50e      	bpl.n	800757a <_printf_float+0x236>
 800755c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007560:	4659      	mov	r1, fp
 8007562:	4628      	mov	r0, r5
 8007564:	47b0      	blx	r6
 8007566:	3001      	adds	r0, #1
 8007568:	f43f af43 	beq.w	80073f2 <_printf_float+0xae>
 800756c:	2700      	movs	r7, #0
 800756e:	f104 081a 	add.w	r8, r4, #26
 8007572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007574:	3b01      	subs	r3, #1
 8007576:	42bb      	cmp	r3, r7
 8007578:	dc09      	bgt.n	800758e <_printf_float+0x24a>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	079f      	lsls	r7, r3, #30
 800757e:	f100 80fd 	bmi.w	800777c <_printf_float+0x438>
 8007582:	68e0      	ldr	r0, [r4, #12]
 8007584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007586:	4298      	cmp	r0, r3
 8007588:	bfb8      	it	lt
 800758a:	4618      	movlt	r0, r3
 800758c:	e733      	b.n	80073f6 <_printf_float+0xb2>
 800758e:	2301      	movs	r3, #1
 8007590:	4642      	mov	r2, r8
 8007592:	4659      	mov	r1, fp
 8007594:	4628      	mov	r0, r5
 8007596:	47b0      	blx	r6
 8007598:	3001      	adds	r0, #1
 800759a:	f43f af2a 	beq.w	80073f2 <_printf_float+0xae>
 800759e:	3701      	adds	r7, #1
 80075a0:	e7e7      	b.n	8007572 <_printf_float+0x22e>
 80075a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dc2b      	bgt.n	8007600 <_printf_float+0x2bc>
 80075a8:	2301      	movs	r3, #1
 80075aa:	4a26      	ldr	r2, [pc, #152]	; (8007644 <_printf_float+0x300>)
 80075ac:	4659      	mov	r1, fp
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b0      	blx	r6
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f af1d 	beq.w	80073f2 <_printf_float+0xae>
 80075b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ba:	b923      	cbnz	r3, 80075c6 <_printf_float+0x282>
 80075bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075be:	b913      	cbnz	r3, 80075c6 <_printf_float+0x282>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	07d9      	lsls	r1, r3, #31
 80075c4:	d5d9      	bpl.n	800757a <_printf_float+0x236>
 80075c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ca:	4659      	mov	r1, fp
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b0      	blx	r6
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f af0e 	beq.w	80073f2 <_printf_float+0xae>
 80075d6:	f04f 0800 	mov.w	r8, #0
 80075da:	f104 091a 	add.w	r9, r4, #26
 80075de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e0:	425b      	negs	r3, r3
 80075e2:	4543      	cmp	r3, r8
 80075e4:	dc01      	bgt.n	80075ea <_printf_float+0x2a6>
 80075e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e8:	e797      	b.n	800751a <_printf_float+0x1d6>
 80075ea:	2301      	movs	r3, #1
 80075ec:	464a      	mov	r2, r9
 80075ee:	4659      	mov	r1, fp
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b0      	blx	r6
 80075f4:	3001      	adds	r0, #1
 80075f6:	f43f aefc 	beq.w	80073f2 <_printf_float+0xae>
 80075fa:	f108 0801 	add.w	r8, r8, #1
 80075fe:	e7ee      	b.n	80075de <_printf_float+0x29a>
 8007600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007602:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007604:	429a      	cmp	r2, r3
 8007606:	bfa8      	it	ge
 8007608:	461a      	movge	r2, r3
 800760a:	2a00      	cmp	r2, #0
 800760c:	4690      	mov	r8, r2
 800760e:	dd07      	ble.n	8007620 <_printf_float+0x2dc>
 8007610:	4613      	mov	r3, r2
 8007612:	4659      	mov	r1, fp
 8007614:	463a      	mov	r2, r7
 8007616:	4628      	mov	r0, r5
 8007618:	47b0      	blx	r6
 800761a:	3001      	adds	r0, #1
 800761c:	f43f aee9 	beq.w	80073f2 <_printf_float+0xae>
 8007620:	f104 031a 	add.w	r3, r4, #26
 8007624:	f04f 0a00 	mov.w	sl, #0
 8007628:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800762c:	930b      	str	r3, [sp, #44]	; 0x2c
 800762e:	e015      	b.n	800765c <_printf_float+0x318>
 8007630:	7fefffff 	.word	0x7fefffff
 8007634:	08008cd8 	.word	0x08008cd8
 8007638:	08008cd4 	.word	0x08008cd4
 800763c:	08008ce0 	.word	0x08008ce0
 8007640:	08008cdc 	.word	0x08008cdc
 8007644:	08008ce4 	.word	0x08008ce4
 8007648:	2301      	movs	r3, #1
 800764a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800764c:	4659      	mov	r1, fp
 800764e:	4628      	mov	r0, r5
 8007650:	47b0      	blx	r6
 8007652:	3001      	adds	r0, #1
 8007654:	f43f aecd 	beq.w	80073f2 <_printf_float+0xae>
 8007658:	f10a 0a01 	add.w	sl, sl, #1
 800765c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007660:	eba9 0308 	sub.w	r3, r9, r8
 8007664:	4553      	cmp	r3, sl
 8007666:	dcef      	bgt.n	8007648 <_printf_float+0x304>
 8007668:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800766c:	429a      	cmp	r2, r3
 800766e:	444f      	add	r7, r9
 8007670:	db14      	blt.n	800769c <_printf_float+0x358>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	07da      	lsls	r2, r3, #31
 8007676:	d411      	bmi.n	800769c <_printf_float+0x358>
 8007678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800767a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800767c:	eba3 0209 	sub.w	r2, r3, r9
 8007680:	eba3 0901 	sub.w	r9, r3, r1
 8007684:	4591      	cmp	r9, r2
 8007686:	bfa8      	it	ge
 8007688:	4691      	movge	r9, r2
 800768a:	f1b9 0f00 	cmp.w	r9, #0
 800768e:	dc0d      	bgt.n	80076ac <_printf_float+0x368>
 8007690:	2700      	movs	r7, #0
 8007692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007696:	f104 081a 	add.w	r8, r4, #26
 800769a:	e018      	b.n	80076ce <_printf_float+0x38a>
 800769c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076a0:	4659      	mov	r1, fp
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b0      	blx	r6
 80076a6:	3001      	adds	r0, #1
 80076a8:	d1e6      	bne.n	8007678 <_printf_float+0x334>
 80076aa:	e6a2      	b.n	80073f2 <_printf_float+0xae>
 80076ac:	464b      	mov	r3, r9
 80076ae:	463a      	mov	r2, r7
 80076b0:	4659      	mov	r1, fp
 80076b2:	4628      	mov	r0, r5
 80076b4:	47b0      	blx	r6
 80076b6:	3001      	adds	r0, #1
 80076b8:	d1ea      	bne.n	8007690 <_printf_float+0x34c>
 80076ba:	e69a      	b.n	80073f2 <_printf_float+0xae>
 80076bc:	2301      	movs	r3, #1
 80076be:	4642      	mov	r2, r8
 80076c0:	4659      	mov	r1, fp
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b0      	blx	r6
 80076c6:	3001      	adds	r0, #1
 80076c8:	f43f ae93 	beq.w	80073f2 <_printf_float+0xae>
 80076cc:	3701      	adds	r7, #1
 80076ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	eba3 0309 	sub.w	r3, r3, r9
 80076d8:	42bb      	cmp	r3, r7
 80076da:	dcef      	bgt.n	80076bc <_printf_float+0x378>
 80076dc:	e74d      	b.n	800757a <_printf_float+0x236>
 80076de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076e0:	2a01      	cmp	r2, #1
 80076e2:	dc01      	bgt.n	80076e8 <_printf_float+0x3a4>
 80076e4:	07db      	lsls	r3, r3, #31
 80076e6:	d538      	bpl.n	800775a <_printf_float+0x416>
 80076e8:	2301      	movs	r3, #1
 80076ea:	463a      	mov	r2, r7
 80076ec:	4659      	mov	r1, fp
 80076ee:	4628      	mov	r0, r5
 80076f0:	47b0      	blx	r6
 80076f2:	3001      	adds	r0, #1
 80076f4:	f43f ae7d 	beq.w	80073f2 <_printf_float+0xae>
 80076f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076fc:	4659      	mov	r1, fp
 80076fe:	4628      	mov	r0, r5
 8007700:	47b0      	blx	r6
 8007702:	3001      	adds	r0, #1
 8007704:	f107 0701 	add.w	r7, r7, #1
 8007708:	f43f ae73 	beq.w	80073f2 <_printf_float+0xae>
 800770c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007712:	2200      	movs	r2, #0
 8007714:	f103 38ff 	add.w	r8, r3, #4294967295
 8007718:	2300      	movs	r3, #0
 800771a:	f7f9 f945 	bl	80009a8 <__aeabi_dcmpeq>
 800771e:	b9c0      	cbnz	r0, 8007752 <_printf_float+0x40e>
 8007720:	4643      	mov	r3, r8
 8007722:	463a      	mov	r2, r7
 8007724:	4659      	mov	r1, fp
 8007726:	4628      	mov	r0, r5
 8007728:	47b0      	blx	r6
 800772a:	3001      	adds	r0, #1
 800772c:	d10d      	bne.n	800774a <_printf_float+0x406>
 800772e:	e660      	b.n	80073f2 <_printf_float+0xae>
 8007730:	2301      	movs	r3, #1
 8007732:	4642      	mov	r2, r8
 8007734:	4659      	mov	r1, fp
 8007736:	4628      	mov	r0, r5
 8007738:	47b0      	blx	r6
 800773a:	3001      	adds	r0, #1
 800773c:	f43f ae59 	beq.w	80073f2 <_printf_float+0xae>
 8007740:	3701      	adds	r7, #1
 8007742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007744:	3b01      	subs	r3, #1
 8007746:	42bb      	cmp	r3, r7
 8007748:	dcf2      	bgt.n	8007730 <_printf_float+0x3ec>
 800774a:	464b      	mov	r3, r9
 800774c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007750:	e6e4      	b.n	800751c <_printf_float+0x1d8>
 8007752:	2700      	movs	r7, #0
 8007754:	f104 081a 	add.w	r8, r4, #26
 8007758:	e7f3      	b.n	8007742 <_printf_float+0x3fe>
 800775a:	2301      	movs	r3, #1
 800775c:	e7e1      	b.n	8007722 <_printf_float+0x3de>
 800775e:	2301      	movs	r3, #1
 8007760:	4642      	mov	r2, r8
 8007762:	4659      	mov	r1, fp
 8007764:	4628      	mov	r0, r5
 8007766:	47b0      	blx	r6
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae42 	beq.w	80073f2 <_printf_float+0xae>
 800776e:	3701      	adds	r7, #1
 8007770:	68e3      	ldr	r3, [r4, #12]
 8007772:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	42bb      	cmp	r3, r7
 8007778:	dcf1      	bgt.n	800775e <_printf_float+0x41a>
 800777a:	e702      	b.n	8007582 <_printf_float+0x23e>
 800777c:	2700      	movs	r7, #0
 800777e:	f104 0819 	add.w	r8, r4, #25
 8007782:	e7f5      	b.n	8007770 <_printf_float+0x42c>
 8007784:	2b00      	cmp	r3, #0
 8007786:	f43f ae94 	beq.w	80074b2 <_printf_float+0x16e>
 800778a:	f04f 0c00 	mov.w	ip, #0
 800778e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007792:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007796:	6022      	str	r2, [r4, #0]
 8007798:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800779c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	463a      	mov	r2, r7
 80077a4:	464b      	mov	r3, r9
 80077a6:	4628      	mov	r0, r5
 80077a8:	f7ff fd3a 	bl	8007220 <__cvt>
 80077ac:	4607      	mov	r7, r0
 80077ae:	e64f      	b.n	8007450 <_printf_float+0x10c>

080077b0 <_printf_common>:
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	4691      	mov	r9, r2
 80077b6:	461f      	mov	r7, r3
 80077b8:	688a      	ldr	r2, [r1, #8]
 80077ba:	690b      	ldr	r3, [r1, #16]
 80077bc:	4606      	mov	r6, r0
 80077be:	4293      	cmp	r3, r2
 80077c0:	bfb8      	it	lt
 80077c2:	4613      	movlt	r3, r2
 80077c4:	f8c9 3000 	str.w	r3, [r9]
 80077c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077cc:	460c      	mov	r4, r1
 80077ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077d2:	b112      	cbz	r2, 80077da <_printf_common+0x2a>
 80077d4:	3301      	adds	r3, #1
 80077d6:	f8c9 3000 	str.w	r3, [r9]
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	0699      	lsls	r1, r3, #26
 80077de:	bf42      	ittt	mi
 80077e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80077e4:	3302      	addmi	r3, #2
 80077e6:	f8c9 3000 	strmi.w	r3, [r9]
 80077ea:	6825      	ldr	r5, [r4, #0]
 80077ec:	f015 0506 	ands.w	r5, r5, #6
 80077f0:	d107      	bne.n	8007802 <_printf_common+0x52>
 80077f2:	f104 0a19 	add.w	sl, r4, #25
 80077f6:	68e3      	ldr	r3, [r4, #12]
 80077f8:	f8d9 2000 	ldr.w	r2, [r9]
 80077fc:	1a9b      	subs	r3, r3, r2
 80077fe:	42ab      	cmp	r3, r5
 8007800:	dc29      	bgt.n	8007856 <_printf_common+0xa6>
 8007802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	3300      	adds	r3, #0
 800780a:	bf18      	it	ne
 800780c:	2301      	movne	r3, #1
 800780e:	0692      	lsls	r2, r2, #26
 8007810:	d42e      	bmi.n	8007870 <_printf_common+0xc0>
 8007812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007816:	4639      	mov	r1, r7
 8007818:	4630      	mov	r0, r6
 800781a:	47c0      	blx	r8
 800781c:	3001      	adds	r0, #1
 800781e:	d021      	beq.n	8007864 <_printf_common+0xb4>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	68e5      	ldr	r5, [r4, #12]
 8007824:	f003 0306 	and.w	r3, r3, #6
 8007828:	2b04      	cmp	r3, #4
 800782a:	bf18      	it	ne
 800782c:	2500      	movne	r5, #0
 800782e:	f8d9 2000 	ldr.w	r2, [r9]
 8007832:	f04f 0900 	mov.w	r9, #0
 8007836:	bf08      	it	eq
 8007838:	1aad      	subeq	r5, r5, r2
 800783a:	68a3      	ldr	r3, [r4, #8]
 800783c:	6922      	ldr	r2, [r4, #16]
 800783e:	bf08      	it	eq
 8007840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007844:	4293      	cmp	r3, r2
 8007846:	bfc4      	itt	gt
 8007848:	1a9b      	subgt	r3, r3, r2
 800784a:	18ed      	addgt	r5, r5, r3
 800784c:	341a      	adds	r4, #26
 800784e:	454d      	cmp	r5, r9
 8007850:	d11a      	bne.n	8007888 <_printf_common+0xd8>
 8007852:	2000      	movs	r0, #0
 8007854:	e008      	b.n	8007868 <_printf_common+0xb8>
 8007856:	2301      	movs	r3, #1
 8007858:	4652      	mov	r2, sl
 800785a:	4639      	mov	r1, r7
 800785c:	4630      	mov	r0, r6
 800785e:	47c0      	blx	r8
 8007860:	3001      	adds	r0, #1
 8007862:	d103      	bne.n	800786c <_printf_common+0xbc>
 8007864:	f04f 30ff 	mov.w	r0, #4294967295
 8007868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786c:	3501      	adds	r5, #1
 800786e:	e7c2      	b.n	80077f6 <_printf_common+0x46>
 8007870:	2030      	movs	r0, #48	; 0x30
 8007872:	18e1      	adds	r1, r4, r3
 8007874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800787e:	4422      	add	r2, r4
 8007880:	3302      	adds	r3, #2
 8007882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007886:	e7c4      	b.n	8007812 <_printf_common+0x62>
 8007888:	2301      	movs	r3, #1
 800788a:	4622      	mov	r2, r4
 800788c:	4639      	mov	r1, r7
 800788e:	4630      	mov	r0, r6
 8007890:	47c0      	blx	r8
 8007892:	3001      	adds	r0, #1
 8007894:	d0e6      	beq.n	8007864 <_printf_common+0xb4>
 8007896:	f109 0901 	add.w	r9, r9, #1
 800789a:	e7d8      	b.n	800784e <_printf_common+0x9e>

0800789c <quorem>:
 800789c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a0:	6903      	ldr	r3, [r0, #16]
 80078a2:	690c      	ldr	r4, [r1, #16]
 80078a4:	4680      	mov	r8, r0
 80078a6:	42a3      	cmp	r3, r4
 80078a8:	f2c0 8084 	blt.w	80079b4 <quorem+0x118>
 80078ac:	3c01      	subs	r4, #1
 80078ae:	f101 0714 	add.w	r7, r1, #20
 80078b2:	f100 0614 	add.w	r6, r0, #20
 80078b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80078ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80078be:	3501      	adds	r5, #1
 80078c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80078c4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80078c8:	eb06 030c 	add.w	r3, r6, ip
 80078cc:	eb07 090c 	add.w	r9, r7, ip
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	b39d      	cbz	r5, 800793c <quorem+0xa0>
 80078d4:	f04f 0a00 	mov.w	sl, #0
 80078d8:	4638      	mov	r0, r7
 80078da:	46b6      	mov	lr, r6
 80078dc:	46d3      	mov	fp, sl
 80078de:	f850 2b04 	ldr.w	r2, [r0], #4
 80078e2:	b293      	uxth	r3, r2
 80078e4:	fb05 a303 	mla	r3, r5, r3, sl
 80078e8:	0c12      	lsrs	r2, r2, #16
 80078ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078ee:	fb05 a202 	mla	r2, r5, r2, sl
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	ebab 0303 	sub.w	r3, fp, r3
 80078f8:	f8de b000 	ldr.w	fp, [lr]
 80078fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007900:	fa1f fb8b 	uxth.w	fp, fp
 8007904:	445b      	add	r3, fp
 8007906:	fa1f fb82 	uxth.w	fp, r2
 800790a:	f8de 2000 	ldr.w	r2, [lr]
 800790e:	4581      	cmp	r9, r0
 8007910:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007918:	b29b      	uxth	r3, r3
 800791a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800791e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007922:	f84e 3b04 	str.w	r3, [lr], #4
 8007926:	d2da      	bcs.n	80078de <quorem+0x42>
 8007928:	f856 300c 	ldr.w	r3, [r6, ip]
 800792c:	b933      	cbnz	r3, 800793c <quorem+0xa0>
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	3b04      	subs	r3, #4
 8007932:	429e      	cmp	r6, r3
 8007934:	461a      	mov	r2, r3
 8007936:	d331      	bcc.n	800799c <quorem+0x100>
 8007938:	f8c8 4010 	str.w	r4, [r8, #16]
 800793c:	4640      	mov	r0, r8
 800793e:	f001 f825 	bl	800898c <__mcmp>
 8007942:	2800      	cmp	r0, #0
 8007944:	db26      	blt.n	8007994 <quorem+0xf8>
 8007946:	4630      	mov	r0, r6
 8007948:	f04f 0c00 	mov.w	ip, #0
 800794c:	3501      	adds	r5, #1
 800794e:	f857 1b04 	ldr.w	r1, [r7], #4
 8007952:	f8d0 e000 	ldr.w	lr, [r0]
 8007956:	b28b      	uxth	r3, r1
 8007958:	ebac 0303 	sub.w	r3, ip, r3
 800795c:	fa1f f28e 	uxth.w	r2, lr
 8007960:	4413      	add	r3, r2
 8007962:	0c0a      	lsrs	r2, r1, #16
 8007964:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800796c:	b29b      	uxth	r3, r3
 800796e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007972:	45b9      	cmp	r9, r7
 8007974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007978:	f840 3b04 	str.w	r3, [r0], #4
 800797c:	d2e7      	bcs.n	800794e <quorem+0xb2>
 800797e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007982:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007986:	b92a      	cbnz	r2, 8007994 <quorem+0xf8>
 8007988:	3b04      	subs	r3, #4
 800798a:	429e      	cmp	r6, r3
 800798c:	461a      	mov	r2, r3
 800798e:	d30b      	bcc.n	80079a8 <quorem+0x10c>
 8007990:	f8c8 4010 	str.w	r4, [r8, #16]
 8007994:	4628      	mov	r0, r5
 8007996:	b003      	add	sp, #12
 8007998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799c:	6812      	ldr	r2, [r2, #0]
 800799e:	3b04      	subs	r3, #4
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	d1c9      	bne.n	8007938 <quorem+0x9c>
 80079a4:	3c01      	subs	r4, #1
 80079a6:	e7c4      	b.n	8007932 <quorem+0x96>
 80079a8:	6812      	ldr	r2, [r2, #0]
 80079aa:	3b04      	subs	r3, #4
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	d1ef      	bne.n	8007990 <quorem+0xf4>
 80079b0:	3c01      	subs	r4, #1
 80079b2:	e7ea      	b.n	800798a <quorem+0xee>
 80079b4:	2000      	movs	r0, #0
 80079b6:	e7ee      	b.n	8007996 <quorem+0xfa>

080079b8 <_dtoa_r>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	4616      	mov	r6, r2
 80079be:	461f      	mov	r7, r3
 80079c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80079c2:	b095      	sub	sp, #84	; 0x54
 80079c4:	4604      	mov	r4, r0
 80079c6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80079ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80079ce:	b93d      	cbnz	r5, 80079e0 <_dtoa_r+0x28>
 80079d0:	2010      	movs	r0, #16
 80079d2:	f000 fdb3 	bl	800853c <malloc>
 80079d6:	6260      	str	r0, [r4, #36]	; 0x24
 80079d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079dc:	6005      	str	r5, [r0, #0]
 80079de:	60c5      	str	r5, [r0, #12]
 80079e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	b151      	cbz	r1, 80079fc <_dtoa_r+0x44>
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	2301      	movs	r3, #1
 80079ea:	4093      	lsls	r3, r2
 80079ec:	604a      	str	r2, [r1, #4]
 80079ee:	608b      	str	r3, [r1, #8]
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 fdea 	bl	80085ca <_Bfree>
 80079f6:	2200      	movs	r2, #0
 80079f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	1e3b      	subs	r3, r7, #0
 80079fe:	bfaf      	iteee	ge
 8007a00:	2300      	movge	r3, #0
 8007a02:	2201      	movlt	r2, #1
 8007a04:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a08:	9303      	strlt	r3, [sp, #12]
 8007a0a:	bfac      	ite	ge
 8007a0c:	f8c8 3000 	strge.w	r3, [r8]
 8007a10:	f8c8 2000 	strlt.w	r2, [r8]
 8007a14:	4bae      	ldr	r3, [pc, #696]	; (8007cd0 <_dtoa_r+0x318>)
 8007a16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a1a:	ea33 0308 	bics.w	r3, r3, r8
 8007a1e:	d11b      	bne.n	8007a58 <_dtoa_r+0xa0>
 8007a20:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	9b02      	ldr	r3, [sp, #8]
 8007a2a:	b923      	cbnz	r3, 8007a36 <_dtoa_r+0x7e>
 8007a2c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f000 8545 	beq.w	80084c0 <_dtoa_r+0xb08>
 8007a36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a38:	b953      	cbnz	r3, 8007a50 <_dtoa_r+0x98>
 8007a3a:	4ba6      	ldr	r3, [pc, #664]	; (8007cd4 <_dtoa_r+0x31c>)
 8007a3c:	e021      	b.n	8007a82 <_dtoa_r+0xca>
 8007a3e:	4ba6      	ldr	r3, [pc, #664]	; (8007cd8 <_dtoa_r+0x320>)
 8007a40:	9306      	str	r3, [sp, #24]
 8007a42:	3308      	adds	r3, #8
 8007a44:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	9806      	ldr	r0, [sp, #24]
 8007a4a:	b015      	add	sp, #84	; 0x54
 8007a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a50:	4ba0      	ldr	r3, [pc, #640]	; (8007cd4 <_dtoa_r+0x31c>)
 8007a52:	9306      	str	r3, [sp, #24]
 8007a54:	3303      	adds	r3, #3
 8007a56:	e7f5      	b.n	8007a44 <_dtoa_r+0x8c>
 8007a58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 ffa0 	bl	80009a8 <__aeabi_dcmpeq>
 8007a68:	4682      	mov	sl, r0
 8007a6a:	b160      	cbz	r0, 8007a86 <_dtoa_r+0xce>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8520 	beq.w	80084ba <_dtoa_r+0xb02>
 8007a7a:	4b98      	ldr	r3, [pc, #608]	; (8007cdc <_dtoa_r+0x324>)
 8007a7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	9306      	str	r3, [sp, #24]
 8007a84:	e7e0      	b.n	8007a48 <_dtoa_r+0x90>
 8007a86:	ab12      	add	r3, sp, #72	; 0x48
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	ab13      	add	r3, sp, #76	; 0x4c
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4632      	mov	r2, r6
 8007a90:	463b      	mov	r3, r7
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 fff2 	bl	8008a7c <__d2b>
 8007a98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007a9c:	4683      	mov	fp, r0
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	d07d      	beq.n	8007b9e <_dtoa_r+0x1e6>
 8007aa2:	46b0      	mov	r8, r6
 8007aa4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007aa8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007aac:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007ab0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ab4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007ab8:	2200      	movs	r2, #0
 8007aba:	4b89      	ldr	r3, [pc, #548]	; (8007ce0 <_dtoa_r+0x328>)
 8007abc:	4640      	mov	r0, r8
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7f8 fb52 	bl	8000168 <__aeabi_dsub>
 8007ac4:	a37c      	add	r3, pc, #496	; (adr r3, 8007cb8 <_dtoa_r+0x300>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f7f8 fd05 	bl	80004d8 <__aeabi_dmul>
 8007ace:	a37c      	add	r3, pc, #496	; (adr r3, 8007cc0 <_dtoa_r+0x308>)
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f7f8 fb4a 	bl	800016c <__adddf3>
 8007ad8:	4606      	mov	r6, r0
 8007ada:	4628      	mov	r0, r5
 8007adc:	460f      	mov	r7, r1
 8007ade:	f7f8 fc91 	bl	8000404 <__aeabi_i2d>
 8007ae2:	a379      	add	r3, pc, #484	; (adr r3, 8007cc8 <_dtoa_r+0x310>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f7f8 fcf6 	bl	80004d8 <__aeabi_dmul>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f8 fb3a 	bl	800016c <__adddf3>
 8007af8:	4606      	mov	r6, r0
 8007afa:	460f      	mov	r7, r1
 8007afc:	f7f8 ff9c 	bl	8000a38 <__aeabi_d2iz>
 8007b00:	2200      	movs	r2, #0
 8007b02:	4682      	mov	sl, r0
 8007b04:	2300      	movs	r3, #0
 8007b06:	4630      	mov	r0, r6
 8007b08:	4639      	mov	r1, r7
 8007b0a:	f7f8 ff57 	bl	80009bc <__aeabi_dcmplt>
 8007b0e:	b148      	cbz	r0, 8007b24 <_dtoa_r+0x16c>
 8007b10:	4650      	mov	r0, sl
 8007b12:	f7f8 fc77 	bl	8000404 <__aeabi_i2d>
 8007b16:	4632      	mov	r2, r6
 8007b18:	463b      	mov	r3, r7
 8007b1a:	f7f8 ff45 	bl	80009a8 <__aeabi_dcmpeq>
 8007b1e:	b908      	cbnz	r0, 8007b24 <_dtoa_r+0x16c>
 8007b20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b24:	f1ba 0f16 	cmp.w	sl, #22
 8007b28:	d85a      	bhi.n	8007be0 <_dtoa_r+0x228>
 8007b2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b2e:	496d      	ldr	r1, [pc, #436]	; (8007ce4 <_dtoa_r+0x32c>)
 8007b30:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b38:	f7f8 ff5e 	bl	80009f8 <__aeabi_dcmpgt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d051      	beq.n	8007be4 <_dtoa_r+0x22c>
 8007b40:	2300      	movs	r3, #0
 8007b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b46:	930d      	str	r3, [sp, #52]	; 0x34
 8007b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b4a:	1b5d      	subs	r5, r3, r5
 8007b4c:	1e6b      	subs	r3, r5, #1
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	bf43      	ittte	mi
 8007b52:	2300      	movmi	r3, #0
 8007b54:	f1c5 0901 	rsbmi	r9, r5, #1
 8007b58:	9307      	strmi	r3, [sp, #28]
 8007b5a:	f04f 0900 	movpl.w	r9, #0
 8007b5e:	f1ba 0f00 	cmp.w	sl, #0
 8007b62:	db41      	blt.n	8007be8 <_dtoa_r+0x230>
 8007b64:	9b07      	ldr	r3, [sp, #28]
 8007b66:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007b6a:	4453      	add	r3, sl
 8007b6c:	9307      	str	r3, [sp, #28]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	9308      	str	r3, [sp, #32]
 8007b72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	f200 808f 	bhi.w	8007c98 <_dtoa_r+0x2e0>
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	bfc4      	itt	gt
 8007b7e:	3b04      	subgt	r3, #4
 8007b80:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007b82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b84:	bfc8      	it	gt
 8007b86:	2500      	movgt	r5, #0
 8007b88:	f1a3 0302 	sub.w	r3, r3, #2
 8007b8c:	bfd8      	it	le
 8007b8e:	2501      	movle	r5, #1
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	f200 808d 	bhi.w	8007cb0 <_dtoa_r+0x2f8>
 8007b96:	e8df f003 	tbb	[pc, r3]
 8007b9a:	7d7b      	.short	0x7d7b
 8007b9c:	6f2f      	.short	0x6f2f
 8007b9e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007ba2:	441d      	add	r5, r3
 8007ba4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007ba8:	2820      	cmp	r0, #32
 8007baa:	dd13      	ble.n	8007bd4 <_dtoa_r+0x21c>
 8007bac:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	fa08 f800 	lsl.w	r8, r8, r0
 8007bb6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007bba:	fa23 f000 	lsr.w	r0, r3, r0
 8007bbe:	ea48 0000 	orr.w	r0, r8, r0
 8007bc2:	f7f8 fc0f 	bl	80003e4 <__aeabi_ui2d>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4680      	mov	r8, r0
 8007bca:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007bce:	3d01      	subs	r5, #1
 8007bd0:	9310      	str	r3, [sp, #64]	; 0x40
 8007bd2:	e771      	b.n	8007ab8 <_dtoa_r+0x100>
 8007bd4:	9b02      	ldr	r3, [sp, #8]
 8007bd6:	f1c0 0020 	rsb	r0, r0, #32
 8007bda:	fa03 f000 	lsl.w	r0, r3, r0
 8007bde:	e7f0      	b.n	8007bc2 <_dtoa_r+0x20a>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e7b0      	b.n	8007b46 <_dtoa_r+0x18e>
 8007be4:	900d      	str	r0, [sp, #52]	; 0x34
 8007be6:	e7af      	b.n	8007b48 <_dtoa_r+0x190>
 8007be8:	f1ca 0300 	rsb	r3, sl, #0
 8007bec:	9308      	str	r3, [sp, #32]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	eba9 090a 	sub.w	r9, r9, sl
 8007bf4:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf6:	e7bc      	b.n	8007b72 <_dtoa_r+0x1ba>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	dd74      	ble.n	8007cec <_dtoa_r+0x334>
 8007c02:	4698      	mov	r8, r3
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	2200      	movs	r2, #0
 8007c08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c0a:	6072      	str	r2, [r6, #4]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	f102 0014 	add.w	r0, r2, #20
 8007c12:	4298      	cmp	r0, r3
 8007c14:	6871      	ldr	r1, [r6, #4]
 8007c16:	d96e      	bls.n	8007cf6 <_dtoa_r+0x33e>
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 fca2 	bl	8008562 <_Balloc>
 8007c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c20:	6030      	str	r0, [r6, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f1b8 0f0e 	cmp.w	r8, #14
 8007c28:	9306      	str	r3, [sp, #24]
 8007c2a:	f200 80ed 	bhi.w	8007e08 <_dtoa_r+0x450>
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	f000 80ea 	beq.w	8007e08 <_dtoa_r+0x450>
 8007c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c38:	f1ba 0f00 	cmp.w	sl, #0
 8007c3c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007c40:	dd77      	ble.n	8007d32 <_dtoa_r+0x37a>
 8007c42:	4a28      	ldr	r2, [pc, #160]	; (8007ce4 <_dtoa_r+0x32c>)
 8007c44:	f00a 030f 	and.w	r3, sl, #15
 8007c48:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007c4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c50:	06f0      	lsls	r0, r6, #27
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c5a:	d568      	bpl.n	8007d2e <_dtoa_r+0x376>
 8007c5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c60:	4b21      	ldr	r3, [pc, #132]	; (8007ce8 <_dtoa_r+0x330>)
 8007c62:	2503      	movs	r5, #3
 8007c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c68:	f7f8 fd60 	bl	800072c <__aeabi_ddiv>
 8007c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c70:	f006 060f 	and.w	r6, r6, #15
 8007c74:	4f1c      	ldr	r7, [pc, #112]	; (8007ce8 <_dtoa_r+0x330>)
 8007c76:	e04f      	b.n	8007d18 <_dtoa_r+0x360>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c7e:	4453      	add	r3, sl
 8007c80:	f103 0801 	add.w	r8, r3, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	4643      	mov	r3, r8
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	bfb8      	it	lt
 8007c8c:	2301      	movlt	r3, #1
 8007c8e:	e7ba      	b.n	8007c06 <_dtoa_r+0x24e>
 8007c90:	2300      	movs	r3, #0
 8007c92:	e7b2      	b.n	8007bfa <_dtoa_r+0x242>
 8007c94:	2300      	movs	r3, #0
 8007c96:	e7f0      	b.n	8007c7a <_dtoa_r+0x2c2>
 8007c98:	2501      	movs	r5, #1
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9509      	str	r5, [sp, #36]	; 0x24
 8007c9e:	931e      	str	r3, [sp, #120]	; 0x78
 8007ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	4698      	mov	r8, r3
 8007caa:	2312      	movs	r3, #18
 8007cac:	921f      	str	r2, [sp, #124]	; 0x7c
 8007cae:	e7aa      	b.n	8007c06 <_dtoa_r+0x24e>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb4:	e7f4      	b.n	8007ca0 <_dtoa_r+0x2e8>
 8007cb6:	bf00      	nop
 8007cb8:	636f4361 	.word	0x636f4361
 8007cbc:	3fd287a7 	.word	0x3fd287a7
 8007cc0:	8b60c8b3 	.word	0x8b60c8b3
 8007cc4:	3fc68a28 	.word	0x3fc68a28
 8007cc8:	509f79fb 	.word	0x509f79fb
 8007ccc:	3fd34413 	.word	0x3fd34413
 8007cd0:	7ff00000 	.word	0x7ff00000
 8007cd4:	08008cef 	.word	0x08008cef
 8007cd8:	08008ce6 	.word	0x08008ce6
 8007cdc:	08008ce5 	.word	0x08008ce5
 8007ce0:	3ff80000 	.word	0x3ff80000
 8007ce4:	08008d20 	.word	0x08008d20
 8007ce8:	08008cf8 	.word	0x08008cf8
 8007cec:	2301      	movs	r3, #1
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	4698      	mov	r8, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	e7da      	b.n	8007cac <_dtoa_r+0x2f4>
 8007cf6:	3101      	adds	r1, #1
 8007cf8:	6071      	str	r1, [r6, #4]
 8007cfa:	0052      	lsls	r2, r2, #1
 8007cfc:	e787      	b.n	8007c0e <_dtoa_r+0x256>
 8007cfe:	07f1      	lsls	r1, r6, #31
 8007d00:	d508      	bpl.n	8007d14 <_dtoa_r+0x35c>
 8007d02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d0a:	f7f8 fbe5 	bl	80004d8 <__aeabi_dmul>
 8007d0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d12:	3501      	adds	r5, #1
 8007d14:	1076      	asrs	r6, r6, #1
 8007d16:	3708      	adds	r7, #8
 8007d18:	2e00      	cmp	r6, #0
 8007d1a:	d1f0      	bne.n	8007cfe <_dtoa_r+0x346>
 8007d1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d24:	f7f8 fd02 	bl	800072c <__aeabi_ddiv>
 8007d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d2c:	e01b      	b.n	8007d66 <_dtoa_r+0x3ae>
 8007d2e:	2502      	movs	r5, #2
 8007d30:	e7a0      	b.n	8007c74 <_dtoa_r+0x2bc>
 8007d32:	f000 80a4 	beq.w	8007e7e <_dtoa_r+0x4c6>
 8007d36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d3a:	f1ca 0600 	rsb	r6, sl, #0
 8007d3e:	4ba0      	ldr	r3, [pc, #640]	; (8007fc0 <_dtoa_r+0x608>)
 8007d40:	f006 020f 	and.w	r2, r6, #15
 8007d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fbc4 	bl	80004d8 <__aeabi_dmul>
 8007d50:	2502      	movs	r5, #2
 8007d52:	2300      	movs	r3, #0
 8007d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d58:	4f9a      	ldr	r7, [pc, #616]	; (8007fc4 <_dtoa_r+0x60c>)
 8007d5a:	1136      	asrs	r6, r6, #4
 8007d5c:	2e00      	cmp	r6, #0
 8007d5e:	f040 8083 	bne.w	8007e68 <_dtoa_r+0x4b0>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e0      	bne.n	8007d28 <_dtoa_r+0x370>
 8007d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 808a 	beq.w	8007e82 <_dtoa_r+0x4ca>
 8007d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4b92      	ldr	r3, [pc, #584]	; (8007fc8 <_dtoa_r+0x610>)
 8007d7e:	f7f8 fe1d 	bl	80009bc <__aeabi_dcmplt>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d07d      	beq.n	8007e82 <_dtoa_r+0x4ca>
 8007d86:	f1b8 0f00 	cmp.w	r8, #0
 8007d8a:	d07a      	beq.n	8007e82 <_dtoa_r+0x4ca>
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dd36      	ble.n	8007e00 <_dtoa_r+0x448>
 8007d92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d96:	2200      	movs	r2, #0
 8007d98:	4b8c      	ldr	r3, [pc, #560]	; (8007fcc <_dtoa_r+0x614>)
 8007d9a:	f7f8 fb9d 	bl	80004d8 <__aeabi_dmul>
 8007d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da2:	9e04      	ldr	r6, [sp, #16]
 8007da4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007da8:	3501      	adds	r5, #1
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7f8 fb2a 	bl	8000404 <__aeabi_i2d>
 8007db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007db4:	f7f8 fb90 	bl	80004d8 <__aeabi_dmul>
 8007db8:	2200      	movs	r2, #0
 8007dba:	4b85      	ldr	r3, [pc, #532]	; (8007fd0 <_dtoa_r+0x618>)
 8007dbc:	f7f8 f9d6 	bl	800016c <__adddf3>
 8007dc0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007dc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007dc8:	950b      	str	r5, [sp, #44]	; 0x2c
 8007dca:	2e00      	cmp	r6, #0
 8007dcc:	d15c      	bne.n	8007e88 <_dtoa_r+0x4d0>
 8007dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	4b7f      	ldr	r3, [pc, #508]	; (8007fd4 <_dtoa_r+0x61c>)
 8007dd6:	f7f8 f9c7 	bl	8000168 <__aeabi_dsub>
 8007dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ddc:	462b      	mov	r3, r5
 8007dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de2:	f7f8 fe09 	bl	80009f8 <__aeabi_dcmpgt>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f040 8281 	bne.w	80082ee <_dtoa_r+0x936>
 8007dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007df2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007df6:	f7f8 fde1 	bl	80009bc <__aeabi_dcmplt>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	f040 8275 	bne.w	80082ea <_dtoa_r+0x932>
 8007e00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f2c0 814b 	blt.w	80080a6 <_dtoa_r+0x6ee>
 8007e10:	f1ba 0f0e 	cmp.w	sl, #14
 8007e14:	f300 8147 	bgt.w	80080a6 <_dtoa_r+0x6ee>
 8007e18:	4b69      	ldr	r3, [pc, #420]	; (8007fc0 <_dtoa_r+0x608>)
 8007e1a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f280 80d7 	bge.w	8007fdc <_dtoa_r+0x624>
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	f300 80d3 	bgt.w	8007fdc <_dtoa_r+0x624>
 8007e36:	f040 8257 	bne.w	80082e8 <_dtoa_r+0x930>
 8007e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4b64      	ldr	r3, [pc, #400]	; (8007fd4 <_dtoa_r+0x61c>)
 8007e42:	f7f8 fb49 	bl	80004d8 <__aeabi_dmul>
 8007e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e4a:	f7f8 fdcb 	bl	80009e4 <__aeabi_dcmpge>
 8007e4e:	4646      	mov	r6, r8
 8007e50:	4647      	mov	r7, r8
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f040 822d 	bne.w	80082b2 <_dtoa_r+0x8fa>
 8007e58:	9b06      	ldr	r3, [sp, #24]
 8007e5a:	9a06      	ldr	r2, [sp, #24]
 8007e5c:	1c5d      	adds	r5, r3, #1
 8007e5e:	2331      	movs	r3, #49	; 0x31
 8007e60:	f10a 0a01 	add.w	sl, sl, #1
 8007e64:	7013      	strb	r3, [r2, #0]
 8007e66:	e228      	b.n	80082ba <_dtoa_r+0x902>
 8007e68:	07f2      	lsls	r2, r6, #31
 8007e6a:	d505      	bpl.n	8007e78 <_dtoa_r+0x4c0>
 8007e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e70:	f7f8 fb32 	bl	80004d8 <__aeabi_dmul>
 8007e74:	2301      	movs	r3, #1
 8007e76:	3501      	adds	r5, #1
 8007e78:	1076      	asrs	r6, r6, #1
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	e76e      	b.n	8007d5c <_dtoa_r+0x3a4>
 8007e7e:	2502      	movs	r5, #2
 8007e80:	e771      	b.n	8007d66 <_dtoa_r+0x3ae>
 8007e82:	4657      	mov	r7, sl
 8007e84:	4646      	mov	r6, r8
 8007e86:	e790      	b.n	8007daa <_dtoa_r+0x3f2>
 8007e88:	4b4d      	ldr	r3, [pc, #308]	; (8007fc0 <_dtoa_r+0x608>)
 8007e8a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e8e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d048      	beq.n	8007f2a <_dtoa_r+0x572>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	494e      	ldr	r1, [pc, #312]	; (8007fd8 <_dtoa_r+0x620>)
 8007ea0:	f7f8 fc44 	bl	800072c <__aeabi_ddiv>
 8007ea4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ea8:	f7f8 f95e 	bl	8000168 <__aeabi_dsub>
 8007eac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007eb0:	9d06      	ldr	r5, [sp, #24]
 8007eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb6:	f7f8 fdbf 	bl	8000a38 <__aeabi_d2iz>
 8007eba:	9011      	str	r0, [sp, #68]	; 0x44
 8007ebc:	f7f8 faa2 	bl	8000404 <__aeabi_i2d>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec8:	f7f8 f94e 	bl	8000168 <__aeabi_dsub>
 8007ecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed2:	3330      	adds	r3, #48	; 0x30
 8007ed4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ed8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007edc:	f7f8 fd6e 	bl	80009bc <__aeabi_dcmplt>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d163      	bne.n	8007fac <_dtoa_r+0x5f4>
 8007ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ee8:	2000      	movs	r0, #0
 8007eea:	4937      	ldr	r1, [pc, #220]	; (8007fc8 <_dtoa_r+0x610>)
 8007eec:	f7f8 f93c 	bl	8000168 <__aeabi_dsub>
 8007ef0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ef4:	f7f8 fd62 	bl	80009bc <__aeabi_dcmplt>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f040 80b5 	bne.w	8008068 <_dtoa_r+0x6b0>
 8007efe:	9b06      	ldr	r3, [sp, #24]
 8007f00:	1aeb      	subs	r3, r5, r3
 8007f02:	429e      	cmp	r6, r3
 8007f04:	f77f af7c 	ble.w	8007e00 <_dtoa_r+0x448>
 8007f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4b2f      	ldr	r3, [pc, #188]	; (8007fcc <_dtoa_r+0x614>)
 8007f10:	f7f8 fae2 	bl	80004d8 <__aeabi_dmul>
 8007f14:	2200      	movs	r2, #0
 8007f16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f1e:	4b2b      	ldr	r3, [pc, #172]	; (8007fcc <_dtoa_r+0x614>)
 8007f20:	f7f8 fada 	bl	80004d8 <__aeabi_dmul>
 8007f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f28:	e7c3      	b.n	8007eb2 <_dtoa_r+0x4fa>
 8007f2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f2e:	f7f8 fad3 	bl	80004d8 <__aeabi_dmul>
 8007f32:	9b06      	ldr	r3, [sp, #24]
 8007f34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f38:	199d      	adds	r5, r3, r6
 8007f3a:	461e      	mov	r6, r3
 8007f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f40:	f7f8 fd7a 	bl	8000a38 <__aeabi_d2iz>
 8007f44:	9011      	str	r0, [sp, #68]	; 0x44
 8007f46:	f7f8 fa5d 	bl	8000404 <__aeabi_i2d>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f52:	f7f8 f909 	bl	8000168 <__aeabi_dsub>
 8007f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f5c:	3330      	adds	r3, #48	; 0x30
 8007f5e:	f806 3b01 	strb.w	r3, [r6], #1
 8007f62:	42ae      	cmp	r6, r5
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	d124      	bne.n	8007fb4 <_dtoa_r+0x5fc>
 8007f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <_dtoa_r+0x620>)
 8007f70:	f7f8 f8fc 	bl	800016c <__adddf3>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f7c:	f7f8 fd3c 	bl	80009f8 <__aeabi_dcmpgt>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d171      	bne.n	8008068 <_dtoa_r+0x6b0>
 8007f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f88:	2000      	movs	r0, #0
 8007f8a:	4913      	ldr	r1, [pc, #76]	; (8007fd8 <_dtoa_r+0x620>)
 8007f8c:	f7f8 f8ec 	bl	8000168 <__aeabi_dsub>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f98:	f7f8 fd10 	bl	80009bc <__aeabi_dcmplt>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f43f af2f 	beq.w	8007e00 <_dtoa_r+0x448>
 8007fa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fa6:	1e6a      	subs	r2, r5, #1
 8007fa8:	2b30      	cmp	r3, #48	; 0x30
 8007faa:	d001      	beq.n	8007fb0 <_dtoa_r+0x5f8>
 8007fac:	46ba      	mov	sl, r7
 8007fae:	e04a      	b.n	8008046 <_dtoa_r+0x68e>
 8007fb0:	4615      	mov	r5, r2
 8007fb2:	e7f6      	b.n	8007fa2 <_dtoa_r+0x5ea>
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <_dtoa_r+0x614>)
 8007fb6:	f7f8 fa8f 	bl	80004d8 <__aeabi_dmul>
 8007fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fbe:	e7bd      	b.n	8007f3c <_dtoa_r+0x584>
 8007fc0:	08008d20 	.word	0x08008d20
 8007fc4:	08008cf8 	.word	0x08008cf8
 8007fc8:	3ff00000 	.word	0x3ff00000
 8007fcc:	40240000 	.word	0x40240000
 8007fd0:	401c0000 	.word	0x401c0000
 8007fd4:	40140000 	.word	0x40140000
 8007fd8:	3fe00000 	.word	0x3fe00000
 8007fdc:	9d06      	ldr	r5, [sp, #24]
 8007fde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 fb9f 	bl	800072c <__aeabi_ddiv>
 8007fee:	f7f8 fd23 	bl	8000a38 <__aeabi_d2iz>
 8007ff2:	4681      	mov	r9, r0
 8007ff4:	f7f8 fa06 	bl	8000404 <__aeabi_i2d>
 8007ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ffc:	f7f8 fa6c 	bl	80004d8 <__aeabi_dmul>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4630      	mov	r0, r6
 8008006:	4639      	mov	r1, r7
 8008008:	f7f8 f8ae 	bl	8000168 <__aeabi_dsub>
 800800c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008010:	f805 6b01 	strb.w	r6, [r5], #1
 8008014:	9e06      	ldr	r6, [sp, #24]
 8008016:	4602      	mov	r2, r0
 8008018:	1bae      	subs	r6, r5, r6
 800801a:	45b0      	cmp	r8, r6
 800801c:	460b      	mov	r3, r1
 800801e:	d135      	bne.n	800808c <_dtoa_r+0x6d4>
 8008020:	f7f8 f8a4 	bl	800016c <__adddf3>
 8008024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008028:	4606      	mov	r6, r0
 800802a:	460f      	mov	r7, r1
 800802c:	f7f8 fce4 	bl	80009f8 <__aeabi_dcmpgt>
 8008030:	b9c8      	cbnz	r0, 8008066 <_dtoa_r+0x6ae>
 8008032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008036:	4630      	mov	r0, r6
 8008038:	4639      	mov	r1, r7
 800803a:	f7f8 fcb5 	bl	80009a8 <__aeabi_dcmpeq>
 800803e:	b110      	cbz	r0, 8008046 <_dtoa_r+0x68e>
 8008040:	f019 0f01 	tst.w	r9, #1
 8008044:	d10f      	bne.n	8008066 <_dtoa_r+0x6ae>
 8008046:	4659      	mov	r1, fp
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fabe 	bl	80085ca <_Bfree>
 800804e:	2300      	movs	r3, #0
 8008050:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008052:	702b      	strb	r3, [r5, #0]
 8008054:	f10a 0301 	add.w	r3, sl, #1
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800805c:	2b00      	cmp	r3, #0
 800805e:	f43f acf3 	beq.w	8007a48 <_dtoa_r+0x90>
 8008062:	601d      	str	r5, [r3, #0]
 8008064:	e4f0      	b.n	8007a48 <_dtoa_r+0x90>
 8008066:	4657      	mov	r7, sl
 8008068:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800806c:	1e6b      	subs	r3, r5, #1
 800806e:	2a39      	cmp	r2, #57	; 0x39
 8008070:	d106      	bne.n	8008080 <_dtoa_r+0x6c8>
 8008072:	9a06      	ldr	r2, [sp, #24]
 8008074:	429a      	cmp	r2, r3
 8008076:	d107      	bne.n	8008088 <_dtoa_r+0x6d0>
 8008078:	2330      	movs	r3, #48	; 0x30
 800807a:	7013      	strb	r3, [r2, #0]
 800807c:	4613      	mov	r3, r2
 800807e:	3701      	adds	r7, #1
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	3201      	adds	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	e791      	b.n	8007fac <_dtoa_r+0x5f4>
 8008088:	461d      	mov	r5, r3
 800808a:	e7ed      	b.n	8008068 <_dtoa_r+0x6b0>
 800808c:	2200      	movs	r2, #0
 800808e:	4b99      	ldr	r3, [pc, #612]	; (80082f4 <_dtoa_r+0x93c>)
 8008090:	f7f8 fa22 	bl	80004d8 <__aeabi_dmul>
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	4606      	mov	r6, r0
 800809a:	460f      	mov	r7, r1
 800809c:	f7f8 fc84 	bl	80009a8 <__aeabi_dcmpeq>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d09e      	beq.n	8007fe2 <_dtoa_r+0x62a>
 80080a4:	e7cf      	b.n	8008046 <_dtoa_r+0x68e>
 80080a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a8:	2a00      	cmp	r2, #0
 80080aa:	f000 8088 	beq.w	80081be <_dtoa_r+0x806>
 80080ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80080b0:	2a01      	cmp	r2, #1
 80080b2:	dc6d      	bgt.n	8008190 <_dtoa_r+0x7d8>
 80080b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d066      	beq.n	8008188 <_dtoa_r+0x7d0>
 80080ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080be:	464d      	mov	r5, r9
 80080c0:	9e08      	ldr	r6, [sp, #32]
 80080c2:	9a07      	ldr	r2, [sp, #28]
 80080c4:	2101      	movs	r1, #1
 80080c6:	441a      	add	r2, r3
 80080c8:	4620      	mov	r0, r4
 80080ca:	4499      	add	r9, r3
 80080cc:	9207      	str	r2, [sp, #28]
 80080ce:	f000 fb1c 	bl	800870a <__i2b>
 80080d2:	4607      	mov	r7, r0
 80080d4:	2d00      	cmp	r5, #0
 80080d6:	dd0b      	ble.n	80080f0 <_dtoa_r+0x738>
 80080d8:	9b07      	ldr	r3, [sp, #28]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dd08      	ble.n	80080f0 <_dtoa_r+0x738>
 80080de:	42ab      	cmp	r3, r5
 80080e0:	bfa8      	it	ge
 80080e2:	462b      	movge	r3, r5
 80080e4:	9a07      	ldr	r2, [sp, #28]
 80080e6:	eba9 0903 	sub.w	r9, r9, r3
 80080ea:	1aed      	subs	r5, r5, r3
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	9b08      	ldr	r3, [sp, #32]
 80080f2:	b1eb      	cbz	r3, 8008130 <_dtoa_r+0x778>
 80080f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d065      	beq.n	80081c6 <_dtoa_r+0x80e>
 80080fa:	b18e      	cbz	r6, 8008120 <_dtoa_r+0x768>
 80080fc:	4639      	mov	r1, r7
 80080fe:	4632      	mov	r2, r6
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fba1 	bl	8008848 <__pow5mult>
 8008106:	465a      	mov	r2, fp
 8008108:	4601      	mov	r1, r0
 800810a:	4607      	mov	r7, r0
 800810c:	4620      	mov	r0, r4
 800810e:	f000 fb05 	bl	800871c <__multiply>
 8008112:	4659      	mov	r1, fp
 8008114:	900a      	str	r0, [sp, #40]	; 0x28
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fa57 	bl	80085ca <_Bfree>
 800811c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811e:	469b      	mov	fp, r3
 8008120:	9b08      	ldr	r3, [sp, #32]
 8008122:	1b9a      	subs	r2, r3, r6
 8008124:	d004      	beq.n	8008130 <_dtoa_r+0x778>
 8008126:	4659      	mov	r1, fp
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fb8d 	bl	8008848 <__pow5mult>
 800812e:	4683      	mov	fp, r0
 8008130:	2101      	movs	r1, #1
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fae9 	bl	800870a <__i2b>
 8008138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800813a:	4606      	mov	r6, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 81c6 	beq.w	80084ce <_dtoa_r+0xb16>
 8008142:	461a      	mov	r2, r3
 8008144:	4601      	mov	r1, r0
 8008146:	4620      	mov	r0, r4
 8008148:	f000 fb7e 	bl	8008848 <__pow5mult>
 800814c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800814e:	4606      	mov	r6, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	dc3e      	bgt.n	80081d2 <_dtoa_r+0x81a>
 8008154:	9b02      	ldr	r3, [sp, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d137      	bne.n	80081ca <_dtoa_r+0x812>
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008160:	2b00      	cmp	r3, #0
 8008162:	d134      	bne.n	80081ce <_dtoa_r+0x816>
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800816a:	0d1b      	lsrs	r3, r3, #20
 800816c:	051b      	lsls	r3, r3, #20
 800816e:	b12b      	cbz	r3, 800817c <_dtoa_r+0x7c4>
 8008170:	9b07      	ldr	r3, [sp, #28]
 8008172:	f109 0901 	add.w	r9, r9, #1
 8008176:	3301      	adds	r3, #1
 8008178:	9307      	str	r3, [sp, #28]
 800817a:	2301      	movs	r3, #1
 800817c:	9308      	str	r3, [sp, #32]
 800817e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008180:	2b00      	cmp	r3, #0
 8008182:	d128      	bne.n	80081d6 <_dtoa_r+0x81e>
 8008184:	2001      	movs	r0, #1
 8008186:	e02e      	b.n	80081e6 <_dtoa_r+0x82e>
 8008188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800818a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800818e:	e796      	b.n	80080be <_dtoa_r+0x706>
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	f108 36ff 	add.w	r6, r8, #4294967295
 8008196:	42b3      	cmp	r3, r6
 8008198:	bfb7      	itett	lt
 800819a:	9b08      	ldrlt	r3, [sp, #32]
 800819c:	1b9e      	subge	r6, r3, r6
 800819e:	1af2      	sublt	r2, r6, r3
 80081a0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80081a2:	bfbf      	itttt	lt
 80081a4:	9608      	strlt	r6, [sp, #32]
 80081a6:	189b      	addlt	r3, r3, r2
 80081a8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80081aa:	2600      	movlt	r6, #0
 80081ac:	f1b8 0f00 	cmp.w	r8, #0
 80081b0:	bfb9      	ittee	lt
 80081b2:	eba9 0508 	sublt.w	r5, r9, r8
 80081b6:	2300      	movlt	r3, #0
 80081b8:	464d      	movge	r5, r9
 80081ba:	4643      	movge	r3, r8
 80081bc:	e781      	b.n	80080c2 <_dtoa_r+0x70a>
 80081be:	9e08      	ldr	r6, [sp, #32]
 80081c0:	464d      	mov	r5, r9
 80081c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80081c4:	e786      	b.n	80080d4 <_dtoa_r+0x71c>
 80081c6:	9a08      	ldr	r2, [sp, #32]
 80081c8:	e7ad      	b.n	8008126 <_dtoa_r+0x76e>
 80081ca:	2300      	movs	r3, #0
 80081cc:	e7d6      	b.n	800817c <_dtoa_r+0x7c4>
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	e7d4      	b.n	800817c <_dtoa_r+0x7c4>
 80081d2:	2300      	movs	r3, #0
 80081d4:	9308      	str	r3, [sp, #32]
 80081d6:	6933      	ldr	r3, [r6, #16]
 80081d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081dc:	6918      	ldr	r0, [r3, #16]
 80081de:	f000 fa46 	bl	800866e <__hi0bits>
 80081e2:	f1c0 0020 	rsb	r0, r0, #32
 80081e6:	9b07      	ldr	r3, [sp, #28]
 80081e8:	4418      	add	r0, r3
 80081ea:	f010 001f 	ands.w	r0, r0, #31
 80081ee:	d047      	beq.n	8008280 <_dtoa_r+0x8c8>
 80081f0:	f1c0 0320 	rsb	r3, r0, #32
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	dd3b      	ble.n	8008270 <_dtoa_r+0x8b8>
 80081f8:	9b07      	ldr	r3, [sp, #28]
 80081fa:	f1c0 001c 	rsb	r0, r0, #28
 80081fe:	4481      	add	r9, r0
 8008200:	4405      	add	r5, r0
 8008202:	4403      	add	r3, r0
 8008204:	9307      	str	r3, [sp, #28]
 8008206:	f1b9 0f00 	cmp.w	r9, #0
 800820a:	dd05      	ble.n	8008218 <_dtoa_r+0x860>
 800820c:	4659      	mov	r1, fp
 800820e:	464a      	mov	r2, r9
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fb67 	bl	80088e4 <__lshift>
 8008216:	4683      	mov	fp, r0
 8008218:	9b07      	ldr	r3, [sp, #28]
 800821a:	2b00      	cmp	r3, #0
 800821c:	dd05      	ble.n	800822a <_dtoa_r+0x872>
 800821e:	4631      	mov	r1, r6
 8008220:	461a      	mov	r2, r3
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fb5e 	bl	80088e4 <__lshift>
 8008228:	4606      	mov	r6, r0
 800822a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800822c:	b353      	cbz	r3, 8008284 <_dtoa_r+0x8cc>
 800822e:	4631      	mov	r1, r6
 8008230:	4658      	mov	r0, fp
 8008232:	f000 fbab 	bl	800898c <__mcmp>
 8008236:	2800      	cmp	r0, #0
 8008238:	da24      	bge.n	8008284 <_dtoa_r+0x8cc>
 800823a:	2300      	movs	r3, #0
 800823c:	4659      	mov	r1, fp
 800823e:	220a      	movs	r2, #10
 8008240:	4620      	mov	r0, r4
 8008242:	f000 f9d9 	bl	80085f8 <__multadd>
 8008246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008248:	f10a 3aff 	add.w	sl, sl, #4294967295
 800824c:	4683      	mov	fp, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 8144 	beq.w	80084dc <_dtoa_r+0xb24>
 8008254:	2300      	movs	r3, #0
 8008256:	4639      	mov	r1, r7
 8008258:	220a      	movs	r2, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f9cc 	bl	80085f8 <__multadd>
 8008260:	9b04      	ldr	r3, [sp, #16]
 8008262:	4607      	mov	r7, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	dc4d      	bgt.n	8008304 <_dtoa_r+0x94c>
 8008268:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800826a:	2b02      	cmp	r3, #2
 800826c:	dd4a      	ble.n	8008304 <_dtoa_r+0x94c>
 800826e:	e011      	b.n	8008294 <_dtoa_r+0x8dc>
 8008270:	d0c9      	beq.n	8008206 <_dtoa_r+0x84e>
 8008272:	9a07      	ldr	r2, [sp, #28]
 8008274:	331c      	adds	r3, #28
 8008276:	441a      	add	r2, r3
 8008278:	4499      	add	r9, r3
 800827a:	441d      	add	r5, r3
 800827c:	4613      	mov	r3, r2
 800827e:	e7c1      	b.n	8008204 <_dtoa_r+0x84c>
 8008280:	4603      	mov	r3, r0
 8008282:	e7f6      	b.n	8008272 <_dtoa_r+0x8ba>
 8008284:	f1b8 0f00 	cmp.w	r8, #0
 8008288:	dc36      	bgt.n	80082f8 <_dtoa_r+0x940>
 800828a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800828c:	2b02      	cmp	r3, #2
 800828e:	dd33      	ble.n	80082f8 <_dtoa_r+0x940>
 8008290:	f8cd 8010 	str.w	r8, [sp, #16]
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	b963      	cbnz	r3, 80082b2 <_dtoa_r+0x8fa>
 8008298:	4631      	mov	r1, r6
 800829a:	2205      	movs	r2, #5
 800829c:	4620      	mov	r0, r4
 800829e:	f000 f9ab 	bl	80085f8 <__multadd>
 80082a2:	4601      	mov	r1, r0
 80082a4:	4606      	mov	r6, r0
 80082a6:	4658      	mov	r0, fp
 80082a8:	f000 fb70 	bl	800898c <__mcmp>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f73f add3 	bgt.w	8007e58 <_dtoa_r+0x4a0>
 80082b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082b4:	9d06      	ldr	r5, [sp, #24]
 80082b6:	ea6f 0a03 	mvn.w	sl, r3
 80082ba:	f04f 0900 	mov.w	r9, #0
 80082be:	4631      	mov	r1, r6
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 f982 	bl	80085ca <_Bfree>
 80082c6:	2f00      	cmp	r7, #0
 80082c8:	f43f aebd 	beq.w	8008046 <_dtoa_r+0x68e>
 80082cc:	f1b9 0f00 	cmp.w	r9, #0
 80082d0:	d005      	beq.n	80082de <_dtoa_r+0x926>
 80082d2:	45b9      	cmp	r9, r7
 80082d4:	d003      	beq.n	80082de <_dtoa_r+0x926>
 80082d6:	4649      	mov	r1, r9
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 f976 	bl	80085ca <_Bfree>
 80082de:	4639      	mov	r1, r7
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 f972 	bl	80085ca <_Bfree>
 80082e6:	e6ae      	b.n	8008046 <_dtoa_r+0x68e>
 80082e8:	2600      	movs	r6, #0
 80082ea:	4637      	mov	r7, r6
 80082ec:	e7e1      	b.n	80082b2 <_dtoa_r+0x8fa>
 80082ee:	46ba      	mov	sl, r7
 80082f0:	4637      	mov	r7, r6
 80082f2:	e5b1      	b.n	8007e58 <_dtoa_r+0x4a0>
 80082f4:	40240000 	.word	0x40240000
 80082f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 80f3 	beq.w	80084ea <_dtoa_r+0xb32>
 8008304:	2d00      	cmp	r5, #0
 8008306:	dd05      	ble.n	8008314 <_dtoa_r+0x95c>
 8008308:	4639      	mov	r1, r7
 800830a:	462a      	mov	r2, r5
 800830c:	4620      	mov	r0, r4
 800830e:	f000 fae9 	bl	80088e4 <__lshift>
 8008312:	4607      	mov	r7, r0
 8008314:	9b08      	ldr	r3, [sp, #32]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d04c      	beq.n	80083b4 <_dtoa_r+0x9fc>
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4620      	mov	r0, r4
 800831e:	f000 f920 	bl	8008562 <_Balloc>
 8008322:	4605      	mov	r5, r0
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	f107 010c 	add.w	r1, r7, #12
 800832a:	3202      	adds	r2, #2
 800832c:	0092      	lsls	r2, r2, #2
 800832e:	300c      	adds	r0, #12
 8008330:	f000 f90c 	bl	800854c <memcpy>
 8008334:	2201      	movs	r2, #1
 8008336:	4629      	mov	r1, r5
 8008338:	4620      	mov	r0, r4
 800833a:	f000 fad3 	bl	80088e4 <__lshift>
 800833e:	46b9      	mov	r9, r7
 8008340:	4607      	mov	r7, r0
 8008342:	9b06      	ldr	r3, [sp, #24]
 8008344:	9307      	str	r3, [sp, #28]
 8008346:	9b02      	ldr	r3, [sp, #8]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	9308      	str	r3, [sp, #32]
 800834e:	4631      	mov	r1, r6
 8008350:	4658      	mov	r0, fp
 8008352:	f7ff faa3 	bl	800789c <quorem>
 8008356:	4649      	mov	r1, r9
 8008358:	4605      	mov	r5, r0
 800835a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800835e:	4658      	mov	r0, fp
 8008360:	f000 fb14 	bl	800898c <__mcmp>
 8008364:	463a      	mov	r2, r7
 8008366:	9002      	str	r0, [sp, #8]
 8008368:	4631      	mov	r1, r6
 800836a:	4620      	mov	r0, r4
 800836c:	f000 fb28 	bl	80089c0 <__mdiff>
 8008370:	68c3      	ldr	r3, [r0, #12]
 8008372:	4602      	mov	r2, r0
 8008374:	bb03      	cbnz	r3, 80083b8 <_dtoa_r+0xa00>
 8008376:	4601      	mov	r1, r0
 8008378:	9009      	str	r0, [sp, #36]	; 0x24
 800837a:	4658      	mov	r0, fp
 800837c:	f000 fb06 	bl	800898c <__mcmp>
 8008380:	4603      	mov	r3, r0
 8008382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008384:	4611      	mov	r1, r2
 8008386:	4620      	mov	r0, r4
 8008388:	9309      	str	r3, [sp, #36]	; 0x24
 800838a:	f000 f91e 	bl	80085ca <_Bfree>
 800838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008390:	b9a3      	cbnz	r3, 80083bc <_dtoa_r+0xa04>
 8008392:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008394:	b992      	cbnz	r2, 80083bc <_dtoa_r+0xa04>
 8008396:	9a08      	ldr	r2, [sp, #32]
 8008398:	b982      	cbnz	r2, 80083bc <_dtoa_r+0xa04>
 800839a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800839e:	d029      	beq.n	80083f4 <_dtoa_r+0xa3c>
 80083a0:	9b02      	ldr	r3, [sp, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dd01      	ble.n	80083aa <_dtoa_r+0x9f2>
 80083a6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80083aa:	9b07      	ldr	r3, [sp, #28]
 80083ac:	1c5d      	adds	r5, r3, #1
 80083ae:	f883 8000 	strb.w	r8, [r3]
 80083b2:	e784      	b.n	80082be <_dtoa_r+0x906>
 80083b4:	4638      	mov	r0, r7
 80083b6:	e7c2      	b.n	800833e <_dtoa_r+0x986>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7e3      	b.n	8008384 <_dtoa_r+0x9cc>
 80083bc:	9a02      	ldr	r2, [sp, #8]
 80083be:	2a00      	cmp	r2, #0
 80083c0:	db04      	blt.n	80083cc <_dtoa_r+0xa14>
 80083c2:	d123      	bne.n	800840c <_dtoa_r+0xa54>
 80083c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80083c6:	bb0a      	cbnz	r2, 800840c <_dtoa_r+0xa54>
 80083c8:	9a08      	ldr	r2, [sp, #32]
 80083ca:	b9fa      	cbnz	r2, 800840c <_dtoa_r+0xa54>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	ddec      	ble.n	80083aa <_dtoa_r+0x9f2>
 80083d0:	4659      	mov	r1, fp
 80083d2:	2201      	movs	r2, #1
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 fa85 	bl	80088e4 <__lshift>
 80083da:	4631      	mov	r1, r6
 80083dc:	4683      	mov	fp, r0
 80083de:	f000 fad5 	bl	800898c <__mcmp>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	dc03      	bgt.n	80083ee <_dtoa_r+0xa36>
 80083e6:	d1e0      	bne.n	80083aa <_dtoa_r+0x9f2>
 80083e8:	f018 0f01 	tst.w	r8, #1
 80083ec:	d0dd      	beq.n	80083aa <_dtoa_r+0x9f2>
 80083ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80083f2:	d1d8      	bne.n	80083a6 <_dtoa_r+0x9ee>
 80083f4:	9b07      	ldr	r3, [sp, #28]
 80083f6:	9a07      	ldr	r2, [sp, #28]
 80083f8:	1c5d      	adds	r5, r3, #1
 80083fa:	2339      	movs	r3, #57	; 0x39
 80083fc:	7013      	strb	r3, [r2, #0]
 80083fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008402:	1e6a      	subs	r2, r5, #1
 8008404:	2b39      	cmp	r3, #57	; 0x39
 8008406:	d04d      	beq.n	80084a4 <_dtoa_r+0xaec>
 8008408:	3301      	adds	r3, #1
 800840a:	e052      	b.n	80084b2 <_dtoa_r+0xafa>
 800840c:	9a07      	ldr	r2, [sp, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f102 0501 	add.w	r5, r2, #1
 8008414:	dd06      	ble.n	8008424 <_dtoa_r+0xa6c>
 8008416:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800841a:	d0eb      	beq.n	80083f4 <_dtoa_r+0xa3c>
 800841c:	f108 0801 	add.w	r8, r8, #1
 8008420:	9b07      	ldr	r3, [sp, #28]
 8008422:	e7c4      	b.n	80083ae <_dtoa_r+0x9f6>
 8008424:	9b06      	ldr	r3, [sp, #24]
 8008426:	9a04      	ldr	r2, [sp, #16]
 8008428:	1aeb      	subs	r3, r5, r3
 800842a:	4293      	cmp	r3, r2
 800842c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008430:	d021      	beq.n	8008476 <_dtoa_r+0xabe>
 8008432:	4659      	mov	r1, fp
 8008434:	2300      	movs	r3, #0
 8008436:	220a      	movs	r2, #10
 8008438:	4620      	mov	r0, r4
 800843a:	f000 f8dd 	bl	80085f8 <__multadd>
 800843e:	45b9      	cmp	r9, r7
 8008440:	4683      	mov	fp, r0
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	f04f 020a 	mov.w	r2, #10
 800844a:	4649      	mov	r1, r9
 800844c:	4620      	mov	r0, r4
 800844e:	d105      	bne.n	800845c <_dtoa_r+0xaa4>
 8008450:	f000 f8d2 	bl	80085f8 <__multadd>
 8008454:	4681      	mov	r9, r0
 8008456:	4607      	mov	r7, r0
 8008458:	9507      	str	r5, [sp, #28]
 800845a:	e778      	b.n	800834e <_dtoa_r+0x996>
 800845c:	f000 f8cc 	bl	80085f8 <__multadd>
 8008460:	4639      	mov	r1, r7
 8008462:	4681      	mov	r9, r0
 8008464:	2300      	movs	r3, #0
 8008466:	220a      	movs	r2, #10
 8008468:	4620      	mov	r0, r4
 800846a:	f000 f8c5 	bl	80085f8 <__multadd>
 800846e:	4607      	mov	r7, r0
 8008470:	e7f2      	b.n	8008458 <_dtoa_r+0xaa0>
 8008472:	f04f 0900 	mov.w	r9, #0
 8008476:	4659      	mov	r1, fp
 8008478:	2201      	movs	r2, #1
 800847a:	4620      	mov	r0, r4
 800847c:	f000 fa32 	bl	80088e4 <__lshift>
 8008480:	4631      	mov	r1, r6
 8008482:	4683      	mov	fp, r0
 8008484:	f000 fa82 	bl	800898c <__mcmp>
 8008488:	2800      	cmp	r0, #0
 800848a:	dcb8      	bgt.n	80083fe <_dtoa_r+0xa46>
 800848c:	d102      	bne.n	8008494 <_dtoa_r+0xadc>
 800848e:	f018 0f01 	tst.w	r8, #1
 8008492:	d1b4      	bne.n	80083fe <_dtoa_r+0xa46>
 8008494:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008498:	1e6a      	subs	r2, r5, #1
 800849a:	2b30      	cmp	r3, #48	; 0x30
 800849c:	f47f af0f 	bne.w	80082be <_dtoa_r+0x906>
 80084a0:	4615      	mov	r5, r2
 80084a2:	e7f7      	b.n	8008494 <_dtoa_r+0xadc>
 80084a4:	9b06      	ldr	r3, [sp, #24]
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d105      	bne.n	80084b6 <_dtoa_r+0xafe>
 80084aa:	2331      	movs	r3, #49	; 0x31
 80084ac:	9a06      	ldr	r2, [sp, #24]
 80084ae:	f10a 0a01 	add.w	sl, sl, #1
 80084b2:	7013      	strb	r3, [r2, #0]
 80084b4:	e703      	b.n	80082be <_dtoa_r+0x906>
 80084b6:	4615      	mov	r5, r2
 80084b8:	e7a1      	b.n	80083fe <_dtoa_r+0xa46>
 80084ba:	4b17      	ldr	r3, [pc, #92]	; (8008518 <_dtoa_r+0xb60>)
 80084bc:	f7ff bae1 	b.w	8007a82 <_dtoa_r+0xca>
 80084c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f47f aabb 	bne.w	8007a3e <_dtoa_r+0x86>
 80084c8:	4b14      	ldr	r3, [pc, #80]	; (800851c <_dtoa_r+0xb64>)
 80084ca:	f7ff bada 	b.w	8007a82 <_dtoa_r+0xca>
 80084ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f77f ae3f 	ble.w	8008154 <_dtoa_r+0x79c>
 80084d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d8:	9308      	str	r3, [sp, #32]
 80084da:	e653      	b.n	8008184 <_dtoa_r+0x7cc>
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dc03      	bgt.n	80084ea <_dtoa_r+0xb32>
 80084e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	f73f aed5 	bgt.w	8008294 <_dtoa_r+0x8dc>
 80084ea:	9d06      	ldr	r5, [sp, #24]
 80084ec:	4631      	mov	r1, r6
 80084ee:	4658      	mov	r0, fp
 80084f0:	f7ff f9d4 	bl	800789c <quorem>
 80084f4:	9b06      	ldr	r3, [sp, #24]
 80084f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80084fa:	f805 8b01 	strb.w	r8, [r5], #1
 80084fe:	9a04      	ldr	r2, [sp, #16]
 8008500:	1aeb      	subs	r3, r5, r3
 8008502:	429a      	cmp	r2, r3
 8008504:	ddb5      	ble.n	8008472 <_dtoa_r+0xaba>
 8008506:	4659      	mov	r1, fp
 8008508:	2300      	movs	r3, #0
 800850a:	220a      	movs	r2, #10
 800850c:	4620      	mov	r0, r4
 800850e:	f000 f873 	bl	80085f8 <__multadd>
 8008512:	4683      	mov	fp, r0
 8008514:	e7ea      	b.n	80084ec <_dtoa_r+0xb34>
 8008516:	bf00      	nop
 8008518:	08008ce4 	.word	0x08008ce4
 800851c:	08008ce6 	.word	0x08008ce6

08008520 <_localeconv_r>:
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <_localeconv_r+0x14>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6a18      	ldr	r0, [r3, #32]
 8008526:	4b04      	ldr	r3, [pc, #16]	; (8008538 <_localeconv_r+0x18>)
 8008528:	2800      	cmp	r0, #0
 800852a:	bf08      	it	eq
 800852c:	4618      	moveq	r0, r3
 800852e:	30f0      	adds	r0, #240	; 0xf0
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	20000180 	.word	0x20000180
 8008538:	200001e4 	.word	0x200001e4

0800853c <malloc>:
 800853c:	4b02      	ldr	r3, [pc, #8]	; (8008548 <malloc+0xc>)
 800853e:	4601      	mov	r1, r0
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	f000 baf9 	b.w	8008b38 <_malloc_r>
 8008546:	bf00      	nop
 8008548:	20000180 	.word	0x20000180

0800854c <memcpy>:
 800854c:	b510      	push	{r4, lr}
 800854e:	1e43      	subs	r3, r0, #1
 8008550:	440a      	add	r2, r1
 8008552:	4291      	cmp	r1, r2
 8008554:	d100      	bne.n	8008558 <memcpy+0xc>
 8008556:	bd10      	pop	{r4, pc}
 8008558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008560:	e7f7      	b.n	8008552 <memcpy+0x6>

08008562 <_Balloc>:
 8008562:	b570      	push	{r4, r5, r6, lr}
 8008564:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008566:	4604      	mov	r4, r0
 8008568:	460e      	mov	r6, r1
 800856a:	b93d      	cbnz	r5, 800857c <_Balloc+0x1a>
 800856c:	2010      	movs	r0, #16
 800856e:	f7ff ffe5 	bl	800853c <malloc>
 8008572:	6260      	str	r0, [r4, #36]	; 0x24
 8008574:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008578:	6005      	str	r5, [r0, #0]
 800857a:	60c5      	str	r5, [r0, #12]
 800857c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800857e:	68eb      	ldr	r3, [r5, #12]
 8008580:	b183      	cbz	r3, 80085a4 <_Balloc+0x42>
 8008582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800858a:	b9b8      	cbnz	r0, 80085bc <_Balloc+0x5a>
 800858c:	2101      	movs	r1, #1
 800858e:	fa01 f506 	lsl.w	r5, r1, r6
 8008592:	1d6a      	adds	r2, r5, #5
 8008594:	0092      	lsls	r2, r2, #2
 8008596:	4620      	mov	r0, r4
 8008598:	f000 fabf 	bl	8008b1a <_calloc_r>
 800859c:	b160      	cbz	r0, 80085b8 <_Balloc+0x56>
 800859e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80085a2:	e00e      	b.n	80085c2 <_Balloc+0x60>
 80085a4:	2221      	movs	r2, #33	; 0x21
 80085a6:	2104      	movs	r1, #4
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 fab6 	bl	8008b1a <_calloc_r>
 80085ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b0:	60e8      	str	r0, [r5, #12]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e4      	bne.n	8008582 <_Balloc+0x20>
 80085b8:	2000      	movs	r0, #0
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	6802      	ldr	r2, [r0, #0]
 80085be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80085c2:	2300      	movs	r3, #0
 80085c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085c8:	e7f7      	b.n	80085ba <_Balloc+0x58>

080085ca <_Bfree>:
 80085ca:	b570      	push	{r4, r5, r6, lr}
 80085cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80085ce:	4606      	mov	r6, r0
 80085d0:	460d      	mov	r5, r1
 80085d2:	b93c      	cbnz	r4, 80085e4 <_Bfree+0x1a>
 80085d4:	2010      	movs	r0, #16
 80085d6:	f7ff ffb1 	bl	800853c <malloc>
 80085da:	6270      	str	r0, [r6, #36]	; 0x24
 80085dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085e0:	6004      	str	r4, [r0, #0]
 80085e2:	60c4      	str	r4, [r0, #12]
 80085e4:	b13d      	cbz	r5, 80085f6 <_Bfree+0x2c>
 80085e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80085e8:	686a      	ldr	r2, [r5, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085f0:	6029      	str	r1, [r5, #0]
 80085f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80085f6:	bd70      	pop	{r4, r5, r6, pc}

080085f8 <__multadd>:
 80085f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085fc:	461f      	mov	r7, r3
 80085fe:	4606      	mov	r6, r0
 8008600:	460c      	mov	r4, r1
 8008602:	2300      	movs	r3, #0
 8008604:	690d      	ldr	r5, [r1, #16]
 8008606:	f101 0c14 	add.w	ip, r1, #20
 800860a:	f8dc 0000 	ldr.w	r0, [ip]
 800860e:	3301      	adds	r3, #1
 8008610:	b281      	uxth	r1, r0
 8008612:	fb02 7101 	mla	r1, r2, r1, r7
 8008616:	0c00      	lsrs	r0, r0, #16
 8008618:	0c0f      	lsrs	r7, r1, #16
 800861a:	fb02 7000 	mla	r0, r2, r0, r7
 800861e:	b289      	uxth	r1, r1
 8008620:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008624:	429d      	cmp	r5, r3
 8008626:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800862a:	f84c 1b04 	str.w	r1, [ip], #4
 800862e:	dcec      	bgt.n	800860a <__multadd+0x12>
 8008630:	b1d7      	cbz	r7, 8008668 <__multadd+0x70>
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	42ab      	cmp	r3, r5
 8008636:	dc12      	bgt.n	800865e <__multadd+0x66>
 8008638:	6861      	ldr	r1, [r4, #4]
 800863a:	4630      	mov	r0, r6
 800863c:	3101      	adds	r1, #1
 800863e:	f7ff ff90 	bl	8008562 <_Balloc>
 8008642:	4680      	mov	r8, r0
 8008644:	6922      	ldr	r2, [r4, #16]
 8008646:	f104 010c 	add.w	r1, r4, #12
 800864a:	3202      	adds	r2, #2
 800864c:	0092      	lsls	r2, r2, #2
 800864e:	300c      	adds	r0, #12
 8008650:	f7ff ff7c 	bl	800854c <memcpy>
 8008654:	4621      	mov	r1, r4
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ffb7 	bl	80085ca <_Bfree>
 800865c:	4644      	mov	r4, r8
 800865e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008662:	3501      	adds	r5, #1
 8008664:	615f      	str	r7, [r3, #20]
 8008666:	6125      	str	r5, [r4, #16]
 8008668:	4620      	mov	r0, r4
 800866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800866e <__hi0bits>:
 800866e:	0c02      	lsrs	r2, r0, #16
 8008670:	0412      	lsls	r2, r2, #16
 8008672:	4603      	mov	r3, r0
 8008674:	b9b2      	cbnz	r2, 80086a4 <__hi0bits+0x36>
 8008676:	0403      	lsls	r3, r0, #16
 8008678:	2010      	movs	r0, #16
 800867a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800867e:	bf04      	itt	eq
 8008680:	021b      	lsleq	r3, r3, #8
 8008682:	3008      	addeq	r0, #8
 8008684:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008688:	bf04      	itt	eq
 800868a:	011b      	lsleq	r3, r3, #4
 800868c:	3004      	addeq	r0, #4
 800868e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008692:	bf04      	itt	eq
 8008694:	009b      	lsleq	r3, r3, #2
 8008696:	3002      	addeq	r0, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	db06      	blt.n	80086aa <__hi0bits+0x3c>
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	d503      	bpl.n	80086a8 <__hi0bits+0x3a>
 80086a0:	3001      	adds	r0, #1
 80086a2:	4770      	bx	lr
 80086a4:	2000      	movs	r0, #0
 80086a6:	e7e8      	b.n	800867a <__hi0bits+0xc>
 80086a8:	2020      	movs	r0, #32
 80086aa:	4770      	bx	lr

080086ac <__lo0bits>:
 80086ac:	6803      	ldr	r3, [r0, #0]
 80086ae:	4601      	mov	r1, r0
 80086b0:	f013 0207 	ands.w	r2, r3, #7
 80086b4:	d00b      	beq.n	80086ce <__lo0bits+0x22>
 80086b6:	07da      	lsls	r2, r3, #31
 80086b8:	d423      	bmi.n	8008702 <__lo0bits+0x56>
 80086ba:	0798      	lsls	r0, r3, #30
 80086bc:	bf49      	itett	mi
 80086be:	085b      	lsrmi	r3, r3, #1
 80086c0:	089b      	lsrpl	r3, r3, #2
 80086c2:	2001      	movmi	r0, #1
 80086c4:	600b      	strmi	r3, [r1, #0]
 80086c6:	bf5c      	itt	pl
 80086c8:	600b      	strpl	r3, [r1, #0]
 80086ca:	2002      	movpl	r0, #2
 80086cc:	4770      	bx	lr
 80086ce:	b298      	uxth	r0, r3
 80086d0:	b9a8      	cbnz	r0, 80086fe <__lo0bits+0x52>
 80086d2:	2010      	movs	r0, #16
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086da:	bf04      	itt	eq
 80086dc:	0a1b      	lsreq	r3, r3, #8
 80086de:	3008      	addeq	r0, #8
 80086e0:	071a      	lsls	r2, r3, #28
 80086e2:	bf04      	itt	eq
 80086e4:	091b      	lsreq	r3, r3, #4
 80086e6:	3004      	addeq	r0, #4
 80086e8:	079a      	lsls	r2, r3, #30
 80086ea:	bf04      	itt	eq
 80086ec:	089b      	lsreq	r3, r3, #2
 80086ee:	3002      	addeq	r0, #2
 80086f0:	07da      	lsls	r2, r3, #31
 80086f2:	d402      	bmi.n	80086fa <__lo0bits+0x4e>
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	d006      	beq.n	8008706 <__lo0bits+0x5a>
 80086f8:	3001      	adds	r0, #1
 80086fa:	600b      	str	r3, [r1, #0]
 80086fc:	4770      	bx	lr
 80086fe:	4610      	mov	r0, r2
 8008700:	e7e9      	b.n	80086d6 <__lo0bits+0x2a>
 8008702:	2000      	movs	r0, #0
 8008704:	4770      	bx	lr
 8008706:	2020      	movs	r0, #32
 8008708:	4770      	bx	lr

0800870a <__i2b>:
 800870a:	b510      	push	{r4, lr}
 800870c:	460c      	mov	r4, r1
 800870e:	2101      	movs	r1, #1
 8008710:	f7ff ff27 	bl	8008562 <_Balloc>
 8008714:	2201      	movs	r2, #1
 8008716:	6144      	str	r4, [r0, #20]
 8008718:	6102      	str	r2, [r0, #16]
 800871a:	bd10      	pop	{r4, pc}

0800871c <__multiply>:
 800871c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	4614      	mov	r4, r2
 8008722:	690a      	ldr	r2, [r1, #16]
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	4688      	mov	r8, r1
 8008728:	429a      	cmp	r2, r3
 800872a:	bfbe      	ittt	lt
 800872c:	460b      	movlt	r3, r1
 800872e:	46a0      	movlt	r8, r4
 8008730:	461c      	movlt	r4, r3
 8008732:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008736:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800873a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800873e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008742:	eb07 0609 	add.w	r6, r7, r9
 8008746:	42b3      	cmp	r3, r6
 8008748:	bfb8      	it	lt
 800874a:	3101      	addlt	r1, #1
 800874c:	f7ff ff09 	bl	8008562 <_Balloc>
 8008750:	f100 0514 	add.w	r5, r0, #20
 8008754:	462b      	mov	r3, r5
 8008756:	2200      	movs	r2, #0
 8008758:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800875c:	4573      	cmp	r3, lr
 800875e:	d316      	bcc.n	800878e <__multiply+0x72>
 8008760:	f104 0214 	add.w	r2, r4, #20
 8008764:	f108 0114 	add.w	r1, r8, #20
 8008768:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800876c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	9201      	str	r2, [sp, #4]
 8008776:	4293      	cmp	r3, r2
 8008778:	d80c      	bhi.n	8008794 <__multiply+0x78>
 800877a:	2e00      	cmp	r6, #0
 800877c:	dd03      	ble.n	8008786 <__multiply+0x6a>
 800877e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008782:	2b00      	cmp	r3, #0
 8008784:	d05d      	beq.n	8008842 <__multiply+0x126>
 8008786:	6106      	str	r6, [r0, #16]
 8008788:	b003      	add	sp, #12
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	f843 2b04 	str.w	r2, [r3], #4
 8008792:	e7e3      	b.n	800875c <__multiply+0x40>
 8008794:	f8b2 b000 	ldrh.w	fp, [r2]
 8008798:	f1bb 0f00 	cmp.w	fp, #0
 800879c:	d023      	beq.n	80087e6 <__multiply+0xca>
 800879e:	4689      	mov	r9, r1
 80087a0:	46ac      	mov	ip, r5
 80087a2:	f04f 0800 	mov.w	r8, #0
 80087a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80087aa:	f8dc a000 	ldr.w	sl, [ip]
 80087ae:	b2a3      	uxth	r3, r4
 80087b0:	fa1f fa8a 	uxth.w	sl, sl
 80087b4:	fb0b a303 	mla	r3, fp, r3, sl
 80087b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087bc:	f8dc 4000 	ldr.w	r4, [ip]
 80087c0:	4443      	add	r3, r8
 80087c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80087ca:	46e2      	mov	sl, ip
 80087cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087d6:	454f      	cmp	r7, r9
 80087d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087dc:	f84a 3b04 	str.w	r3, [sl], #4
 80087e0:	d82b      	bhi.n	800883a <__multiply+0x11e>
 80087e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	3204      	adds	r2, #4
 80087ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80087ee:	f1ba 0f00 	cmp.w	sl, #0
 80087f2:	d020      	beq.n	8008836 <__multiply+0x11a>
 80087f4:	4689      	mov	r9, r1
 80087f6:	46a8      	mov	r8, r5
 80087f8:	f04f 0b00 	mov.w	fp, #0
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8008802:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008806:	b29b      	uxth	r3, r3
 8008808:	fb0a 440c 	mla	r4, sl, ip, r4
 800880c:	46c4      	mov	ip, r8
 800880e:	445c      	add	r4, fp
 8008810:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008814:	f84c 3b04 	str.w	r3, [ip], #4
 8008818:	f859 3b04 	ldr.w	r3, [r9], #4
 800881c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008820:	0c1b      	lsrs	r3, r3, #16
 8008822:	fb0a b303 	mla	r3, sl, r3, fp
 8008826:	454f      	cmp	r7, r9
 8008828:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800882c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008830:	d805      	bhi.n	800883e <__multiply+0x122>
 8008832:	f8c8 3004 	str.w	r3, [r8, #4]
 8008836:	3504      	adds	r5, #4
 8008838:	e79b      	b.n	8008772 <__multiply+0x56>
 800883a:	46d4      	mov	ip, sl
 800883c:	e7b3      	b.n	80087a6 <__multiply+0x8a>
 800883e:	46e0      	mov	r8, ip
 8008840:	e7dd      	b.n	80087fe <__multiply+0xe2>
 8008842:	3e01      	subs	r6, #1
 8008844:	e799      	b.n	800877a <__multiply+0x5e>
	...

08008848 <__pow5mult>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	4615      	mov	r5, r2
 800884e:	f012 0203 	ands.w	r2, r2, #3
 8008852:	4606      	mov	r6, r0
 8008854:	460f      	mov	r7, r1
 8008856:	d007      	beq.n	8008868 <__pow5mult+0x20>
 8008858:	4c21      	ldr	r4, [pc, #132]	; (80088e0 <__pow5mult+0x98>)
 800885a:	3a01      	subs	r2, #1
 800885c:	2300      	movs	r3, #0
 800885e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008862:	f7ff fec9 	bl	80085f8 <__multadd>
 8008866:	4607      	mov	r7, r0
 8008868:	10ad      	asrs	r5, r5, #2
 800886a:	d035      	beq.n	80088d8 <__pow5mult+0x90>
 800886c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800886e:	b93c      	cbnz	r4, 8008880 <__pow5mult+0x38>
 8008870:	2010      	movs	r0, #16
 8008872:	f7ff fe63 	bl	800853c <malloc>
 8008876:	6270      	str	r0, [r6, #36]	; 0x24
 8008878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800887c:	6004      	str	r4, [r0, #0]
 800887e:	60c4      	str	r4, [r0, #12]
 8008880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008888:	b94c      	cbnz	r4, 800889e <__pow5mult+0x56>
 800888a:	f240 2171 	movw	r1, #625	; 0x271
 800888e:	4630      	mov	r0, r6
 8008890:	f7ff ff3b 	bl	800870a <__i2b>
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	f8c8 0008 	str.w	r0, [r8, #8]
 800889c:	6003      	str	r3, [r0, #0]
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	07eb      	lsls	r3, r5, #31
 80088a4:	d50a      	bpl.n	80088bc <__pow5mult+0x74>
 80088a6:	4639      	mov	r1, r7
 80088a8:	4622      	mov	r2, r4
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ff36 	bl	800871c <__multiply>
 80088b0:	4681      	mov	r9, r0
 80088b2:	4639      	mov	r1, r7
 80088b4:	4630      	mov	r0, r6
 80088b6:	f7ff fe88 	bl	80085ca <_Bfree>
 80088ba:	464f      	mov	r7, r9
 80088bc:	106d      	asrs	r5, r5, #1
 80088be:	d00b      	beq.n	80088d8 <__pow5mult+0x90>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	b938      	cbnz	r0, 80088d4 <__pow5mult+0x8c>
 80088c4:	4622      	mov	r2, r4
 80088c6:	4621      	mov	r1, r4
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7ff ff27 	bl	800871c <__multiply>
 80088ce:	6020      	str	r0, [r4, #0]
 80088d0:	f8c0 8000 	str.w	r8, [r0]
 80088d4:	4604      	mov	r4, r0
 80088d6:	e7e4      	b.n	80088a2 <__pow5mult+0x5a>
 80088d8:	4638      	mov	r0, r7
 80088da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088de:	bf00      	nop
 80088e0:	08008de8 	.word	0x08008de8

080088e4 <__lshift>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	460c      	mov	r4, r1
 80088ea:	4607      	mov	r7, r0
 80088ec:	4616      	mov	r6, r2
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088f4:	eb0a 0903 	add.w	r9, sl, r3
 80088f8:	6849      	ldr	r1, [r1, #4]
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	f109 0501 	add.w	r5, r9, #1
 8008900:	42ab      	cmp	r3, r5
 8008902:	db32      	blt.n	800896a <__lshift+0x86>
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff fe2c 	bl	8008562 <_Balloc>
 800890a:	2300      	movs	r3, #0
 800890c:	4680      	mov	r8, r0
 800890e:	461a      	mov	r2, r3
 8008910:	f100 0114 	add.w	r1, r0, #20
 8008914:	4553      	cmp	r3, sl
 8008916:	db2b      	blt.n	8008970 <__lshift+0x8c>
 8008918:	6920      	ldr	r0, [r4, #16]
 800891a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800891e:	f104 0314 	add.w	r3, r4, #20
 8008922:	f016 021f 	ands.w	r2, r6, #31
 8008926:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800892a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800892e:	d025      	beq.n	800897c <__lshift+0x98>
 8008930:	2000      	movs	r0, #0
 8008932:	f1c2 0e20 	rsb	lr, r2, #32
 8008936:	468a      	mov	sl, r1
 8008938:	681e      	ldr	r6, [r3, #0]
 800893a:	4096      	lsls	r6, r2
 800893c:	4330      	orrs	r0, r6
 800893e:	f84a 0b04 	str.w	r0, [sl], #4
 8008942:	f853 0b04 	ldr.w	r0, [r3], #4
 8008946:	459c      	cmp	ip, r3
 8008948:	fa20 f00e 	lsr.w	r0, r0, lr
 800894c:	d814      	bhi.n	8008978 <__lshift+0x94>
 800894e:	6048      	str	r0, [r1, #4]
 8008950:	b108      	cbz	r0, 8008956 <__lshift+0x72>
 8008952:	f109 0502 	add.w	r5, r9, #2
 8008956:	3d01      	subs	r5, #1
 8008958:	4638      	mov	r0, r7
 800895a:	f8c8 5010 	str.w	r5, [r8, #16]
 800895e:	4621      	mov	r1, r4
 8008960:	f7ff fe33 	bl	80085ca <_Bfree>
 8008964:	4640      	mov	r0, r8
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	3101      	adds	r1, #1
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	e7c7      	b.n	8008900 <__lshift+0x1c>
 8008970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008974:	3301      	adds	r3, #1
 8008976:	e7cd      	b.n	8008914 <__lshift+0x30>
 8008978:	4651      	mov	r1, sl
 800897a:	e7dc      	b.n	8008936 <__lshift+0x52>
 800897c:	3904      	subs	r1, #4
 800897e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008982:	459c      	cmp	ip, r3
 8008984:	f841 2f04 	str.w	r2, [r1, #4]!
 8008988:	d8f9      	bhi.n	800897e <__lshift+0x9a>
 800898a:	e7e4      	b.n	8008956 <__lshift+0x72>

0800898c <__mcmp>:
 800898c:	6903      	ldr	r3, [r0, #16]
 800898e:	690a      	ldr	r2, [r1, #16]
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	d10c      	bne.n	80089b0 <__mcmp+0x24>
 8008996:	0092      	lsls	r2, r2, #2
 8008998:	3014      	adds	r0, #20
 800899a:	3114      	adds	r1, #20
 800899c:	1884      	adds	r4, r0, r2
 800899e:	4411      	add	r1, r2
 80089a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089a8:	4295      	cmp	r5, r2
 80089aa:	d003      	beq.n	80089b4 <__mcmp+0x28>
 80089ac:	d305      	bcc.n	80089ba <__mcmp+0x2e>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4618      	mov	r0, r3
 80089b2:	bd30      	pop	{r4, r5, pc}
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d3f3      	bcc.n	80089a0 <__mcmp+0x14>
 80089b8:	e7fa      	b.n	80089b0 <__mcmp+0x24>
 80089ba:	f04f 33ff 	mov.w	r3, #4294967295
 80089be:	e7f7      	b.n	80089b0 <__mcmp+0x24>

080089c0 <__mdiff>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	460d      	mov	r5, r1
 80089c6:	4607      	mov	r7, r0
 80089c8:	4611      	mov	r1, r2
 80089ca:	4628      	mov	r0, r5
 80089cc:	4614      	mov	r4, r2
 80089ce:	f7ff ffdd 	bl	800898c <__mcmp>
 80089d2:	1e06      	subs	r6, r0, #0
 80089d4:	d108      	bne.n	80089e8 <__mdiff+0x28>
 80089d6:	4631      	mov	r1, r6
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff fdc2 	bl	8008562 <_Balloc>
 80089de:	2301      	movs	r3, #1
 80089e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e8:	bfa4      	itt	ge
 80089ea:	4623      	movge	r3, r4
 80089ec:	462c      	movge	r4, r5
 80089ee:	4638      	mov	r0, r7
 80089f0:	6861      	ldr	r1, [r4, #4]
 80089f2:	bfa6      	itte	ge
 80089f4:	461d      	movge	r5, r3
 80089f6:	2600      	movge	r6, #0
 80089f8:	2601      	movlt	r6, #1
 80089fa:	f7ff fdb2 	bl	8008562 <_Balloc>
 80089fe:	f04f 0e00 	mov.w	lr, #0
 8008a02:	60c6      	str	r6, [r0, #12]
 8008a04:	692b      	ldr	r3, [r5, #16]
 8008a06:	6926      	ldr	r6, [r4, #16]
 8008a08:	f104 0214 	add.w	r2, r4, #20
 8008a0c:	f105 0914 	add.w	r9, r5, #20
 8008a10:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a18:	f100 0114 	add.w	r1, r0, #20
 8008a1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a20:	f859 5b04 	ldr.w	r5, [r9], #4
 8008a24:	fa1f f38a 	uxth.w	r3, sl
 8008a28:	4473      	add	r3, lr
 8008a2a:	b2ac      	uxth	r4, r5
 8008a2c:	1b1b      	subs	r3, r3, r4
 8008a2e:	0c2c      	lsrs	r4, r5, #16
 8008a30:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008a34:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008a3e:	45c8      	cmp	r8, r9
 8008a40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008a44:	4694      	mov	ip, r2
 8008a46:	f841 4b04 	str.w	r4, [r1], #4
 8008a4a:	d8e7      	bhi.n	8008a1c <__mdiff+0x5c>
 8008a4c:	45bc      	cmp	ip, r7
 8008a4e:	d304      	bcc.n	8008a5a <__mdiff+0x9a>
 8008a50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a54:	b183      	cbz	r3, 8008a78 <__mdiff+0xb8>
 8008a56:	6106      	str	r6, [r0, #16]
 8008a58:	e7c4      	b.n	80089e4 <__mdiff+0x24>
 8008a5a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008a5e:	b2a2      	uxth	r2, r4
 8008a60:	4472      	add	r2, lr
 8008a62:	1413      	asrs	r3, r2, #16
 8008a64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a68:	b292      	uxth	r2, r2
 8008a6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a6e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a72:	f841 2b04 	str.w	r2, [r1], #4
 8008a76:	e7e9      	b.n	8008a4c <__mdiff+0x8c>
 8008a78:	3e01      	subs	r6, #1
 8008a7a:	e7e9      	b.n	8008a50 <__mdiff+0x90>

08008a7c <__d2b>:
 8008a7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008a80:	461c      	mov	r4, r3
 8008a82:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008a86:	2101      	movs	r1, #1
 8008a88:	4690      	mov	r8, r2
 8008a8a:	f7ff fd6a 	bl	8008562 <_Balloc>
 8008a8e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008a92:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008a96:	4607      	mov	r7, r0
 8008a98:	bb34      	cbnz	r4, 8008ae8 <__d2b+0x6c>
 8008a9a:	9201      	str	r2, [sp, #4]
 8008a9c:	f1b8 0200 	subs.w	r2, r8, #0
 8008aa0:	d027      	beq.n	8008af2 <__d2b+0x76>
 8008aa2:	a802      	add	r0, sp, #8
 8008aa4:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008aa8:	f7ff fe00 	bl	80086ac <__lo0bits>
 8008aac:	9900      	ldr	r1, [sp, #0]
 8008aae:	b1f0      	cbz	r0, 8008aee <__d2b+0x72>
 8008ab0:	9a01      	ldr	r2, [sp, #4]
 8008ab2:	f1c0 0320 	rsb	r3, r0, #32
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	430b      	orrs	r3, r1
 8008abc:	40c2      	lsrs	r2, r0
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	9201      	str	r2, [sp, #4]
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bf14      	ite	ne
 8008ac8:	2102      	movne	r1, #2
 8008aca:	2101      	moveq	r1, #1
 8008acc:	61bb      	str	r3, [r7, #24]
 8008ace:	6139      	str	r1, [r7, #16]
 8008ad0:	b1c4      	cbz	r4, 8008b04 <__d2b+0x88>
 8008ad2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008ad6:	4404      	add	r4, r0
 8008ad8:	6034      	str	r4, [r6, #0]
 8008ada:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ade:	6028      	str	r0, [r5, #0]
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	b002      	add	sp, #8
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008aec:	e7d5      	b.n	8008a9a <__d2b+0x1e>
 8008aee:	6179      	str	r1, [r7, #20]
 8008af0:	e7e7      	b.n	8008ac2 <__d2b+0x46>
 8008af2:	a801      	add	r0, sp, #4
 8008af4:	f7ff fdda 	bl	80086ac <__lo0bits>
 8008af8:	2101      	movs	r1, #1
 8008afa:	9b01      	ldr	r3, [sp, #4]
 8008afc:	6139      	str	r1, [r7, #16]
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	3020      	adds	r0, #32
 8008b02:	e7e5      	b.n	8008ad0 <__d2b+0x54>
 8008b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b08:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008b0c:	6030      	str	r0, [r6, #0]
 8008b0e:	6918      	ldr	r0, [r3, #16]
 8008b10:	f7ff fdad 	bl	800866e <__hi0bits>
 8008b14:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b18:	e7e1      	b.n	8008ade <__d2b+0x62>

08008b1a <_calloc_r>:
 8008b1a:	b538      	push	{r3, r4, r5, lr}
 8008b1c:	fb02 f401 	mul.w	r4, r2, r1
 8008b20:	4621      	mov	r1, r4
 8008b22:	f000 f809 	bl	8008b38 <_malloc_r>
 8008b26:	4605      	mov	r5, r0
 8008b28:	b118      	cbz	r0, 8008b32 <_calloc_r+0x18>
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	f7fe fb6f 	bl	8007210 <memset>
 8008b32:	4628      	mov	r0, r5
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
	...

08008b38 <_malloc_r>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	1ccd      	adds	r5, r1, #3
 8008b3c:	f025 0503 	bic.w	r5, r5, #3
 8008b40:	3508      	adds	r5, #8
 8008b42:	2d0c      	cmp	r5, #12
 8008b44:	bf38      	it	cc
 8008b46:	250c      	movcc	r5, #12
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	db01      	blt.n	8008b52 <_malloc_r+0x1a>
 8008b4e:	42a9      	cmp	r1, r5
 8008b50:	d903      	bls.n	8008b5a <_malloc_r+0x22>
 8008b52:	230c      	movs	r3, #12
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	2000      	movs	r0, #0
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
 8008b5a:	f000 f869 	bl	8008c30 <__malloc_lock>
 8008b5e:	4a21      	ldr	r2, [pc, #132]	; (8008be4 <_malloc_r+0xac>)
 8008b60:	6814      	ldr	r4, [r2, #0]
 8008b62:	4621      	mov	r1, r4
 8008b64:	b991      	cbnz	r1, 8008b8c <_malloc_r+0x54>
 8008b66:	4c20      	ldr	r4, [pc, #128]	; (8008be8 <_malloc_r+0xb0>)
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	b91b      	cbnz	r3, 8008b74 <_malloc_r+0x3c>
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f000 f83d 	bl	8008bec <_sbrk_r>
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	4629      	mov	r1, r5
 8008b76:	4630      	mov	r0, r6
 8008b78:	f000 f838 	bl	8008bec <_sbrk_r>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d124      	bne.n	8008bca <_malloc_r+0x92>
 8008b80:	230c      	movs	r3, #12
 8008b82:	4630      	mov	r0, r6
 8008b84:	6033      	str	r3, [r6, #0]
 8008b86:	f000 f854 	bl	8008c32 <__malloc_unlock>
 8008b8a:	e7e4      	b.n	8008b56 <_malloc_r+0x1e>
 8008b8c:	680b      	ldr	r3, [r1, #0]
 8008b8e:	1b5b      	subs	r3, r3, r5
 8008b90:	d418      	bmi.n	8008bc4 <_malloc_r+0x8c>
 8008b92:	2b0b      	cmp	r3, #11
 8008b94:	d90f      	bls.n	8008bb6 <_malloc_r+0x7e>
 8008b96:	600b      	str	r3, [r1, #0]
 8008b98:	18cc      	adds	r4, r1, r3
 8008b9a:	50cd      	str	r5, [r1, r3]
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f000 f848 	bl	8008c32 <__malloc_unlock>
 8008ba2:	f104 000b 	add.w	r0, r4, #11
 8008ba6:	1d23      	adds	r3, r4, #4
 8008ba8:	f020 0007 	bic.w	r0, r0, #7
 8008bac:	1ac3      	subs	r3, r0, r3
 8008bae:	d0d3      	beq.n	8008b58 <_malloc_r+0x20>
 8008bb0:	425a      	negs	r2, r3
 8008bb2:	50e2      	str	r2, [r4, r3]
 8008bb4:	e7d0      	b.n	8008b58 <_malloc_r+0x20>
 8008bb6:	684b      	ldr	r3, [r1, #4]
 8008bb8:	428c      	cmp	r4, r1
 8008bba:	bf16      	itet	ne
 8008bbc:	6063      	strne	r3, [r4, #4]
 8008bbe:	6013      	streq	r3, [r2, #0]
 8008bc0:	460c      	movne	r4, r1
 8008bc2:	e7eb      	b.n	8008b9c <_malloc_r+0x64>
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	6849      	ldr	r1, [r1, #4]
 8008bc8:	e7cc      	b.n	8008b64 <_malloc_r+0x2c>
 8008bca:	1cc4      	adds	r4, r0, #3
 8008bcc:	f024 0403 	bic.w	r4, r4, #3
 8008bd0:	42a0      	cmp	r0, r4
 8008bd2:	d005      	beq.n	8008be0 <_malloc_r+0xa8>
 8008bd4:	1a21      	subs	r1, r4, r0
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f808 	bl	8008bec <_sbrk_r>
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d0cf      	beq.n	8008b80 <_malloc_r+0x48>
 8008be0:	6025      	str	r5, [r4, #0]
 8008be2:	e7db      	b.n	8008b9c <_malloc_r+0x64>
 8008be4:	2000059c 	.word	0x2000059c
 8008be8:	200005a0 	.word	0x200005a0

08008bec <_sbrk_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4c05      	ldr	r4, [pc, #20]	; (8008c08 <_sbrk_r+0x1c>)
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	f7f8 ff12 	bl	8001a20 <_sbrk>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_sbrk_r+0x1a>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_sbrk_r+0x1a>
 8008c04:	602b      	str	r3, [r5, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	200011bc 	.word	0x200011bc

08008c0c <__ascii_mbtowc>:
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	b901      	cbnz	r1, 8008c12 <__ascii_mbtowc+0x6>
 8008c10:	a901      	add	r1, sp, #4
 8008c12:	b142      	cbz	r2, 8008c26 <__ascii_mbtowc+0x1a>
 8008c14:	b14b      	cbz	r3, 8008c2a <__ascii_mbtowc+0x1e>
 8008c16:	7813      	ldrb	r3, [r2, #0]
 8008c18:	600b      	str	r3, [r1, #0]
 8008c1a:	7812      	ldrb	r2, [r2, #0]
 8008c1c:	1c10      	adds	r0, r2, #0
 8008c1e:	bf18      	it	ne
 8008c20:	2001      	movne	r0, #1
 8008c22:	b002      	add	sp, #8
 8008c24:	4770      	bx	lr
 8008c26:	4610      	mov	r0, r2
 8008c28:	e7fb      	b.n	8008c22 <__ascii_mbtowc+0x16>
 8008c2a:	f06f 0001 	mvn.w	r0, #1
 8008c2e:	e7f8      	b.n	8008c22 <__ascii_mbtowc+0x16>

08008c30 <__malloc_lock>:
 8008c30:	4770      	bx	lr

08008c32 <__malloc_unlock>:
 8008c32:	4770      	bx	lr

08008c34 <__ascii_wctomb>:
 8008c34:	b149      	cbz	r1, 8008c4a <__ascii_wctomb+0x16>
 8008c36:	2aff      	cmp	r2, #255	; 0xff
 8008c38:	bf8b      	itete	hi
 8008c3a:	238a      	movhi	r3, #138	; 0x8a
 8008c3c:	700a      	strbls	r2, [r1, #0]
 8008c3e:	6003      	strhi	r3, [r0, #0]
 8008c40:	2001      	movls	r0, #1
 8008c42:	bf88      	it	hi
 8008c44:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c48:	4770      	bx	lr
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	4770      	bx	lr
	...

08008c50 <_init>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	bf00      	nop
 8008c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c56:	bc08      	pop	{r3}
 8008c58:	469e      	mov	lr, r3
 8008c5a:	4770      	bx	lr

08008c5c <_fini>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	bf00      	nop
 8008c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c62:	bc08      	pop	{r3}
 8008c64:	469e      	mov	lr, r3
 8008c66:	4770      	bx	lr
